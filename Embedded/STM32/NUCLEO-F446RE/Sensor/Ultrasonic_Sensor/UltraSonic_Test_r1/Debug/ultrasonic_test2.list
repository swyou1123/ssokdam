
ultrasonic_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004f68  08004f68  00014f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd4  08004fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fdc  08004fdc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08005054  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08005054  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  0002e465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00030240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf0  00000000  00000000  00030ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021379  00000000  00000000  00031ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f008  00000000  00000000  00052e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cea08  00000000  00000000  00061e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130861  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  001308b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f50 	.word	0x08004f50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004f50 	.word	0x08004f50

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <delay>:
static void MX_GPIO_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void delay (uint16_t time)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <delay+0x30>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < time);
 8000da2:	bf00      	nop
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <delay+0x30>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d3f9      	bcc.n	8000da4 <delay+0x14>
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000008c 	.word	0x2000008c
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	f040 8083 	bne.w	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11a      	bne.n	8000e18 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000de2:	2100      	movs	r1, #0
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f002 f935 	bl	8003054 <HAL_TIM_ReadCapturedValue>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a41      	ldr	r2, [pc, #260]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dee:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000df0:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6a1a      	ldr	r2, [r3, #32]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 020a 	bic.w	r2, r2, #10
 8000e04:	621a      	str	r2, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6a1a      	ldr	r2, [r3, #32]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f042 0202 	orr.w	r2, r2, #2
 8000e14:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
		}
	}
}
 8000e16:	e063      	b.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e18:	4b35      	ldr	r3, [pc, #212]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d15f      	bne.n	8000ee0 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e20:	2100      	movs	r1, #0
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f002 f916 	bl	8003054 <HAL_TIM_ReadCapturedValue>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e2c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e36:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e00f      	b.n	8000e72 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	4b28      	ldr	r3, [pc, #160]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d909      	bls.n	8000e72 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e6c:	33ff      	adds	r3, #255	; 0xff
 8000e6e:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e70:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fb5c 	bl	8000534 <__aeabi_ui2d>
 8000e7c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ee8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	f7ff fbd1 	bl	8000628 <__aeabi_dmul>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e96:	f7ff fcf1 	bl	800087c <__aeabi_ddiv>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f7ff fdd3 	bl	8000a4c <__aeabi_d2uiz>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000eac:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a1a      	ldr	r2, [r3, #32]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020a 	bic.w	r2, r2, #10
 8000ec2:	621a      	str	r2, [r3, #32]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6a12      	ldr	r2, [r2, #32]
 8000ece:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC1);
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0202 	bic.w	r2, r2, #2
 8000ede:	60da      	str	r2, [r3, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	b020c49c 	.word	0xb020c49c
 8000eec:	3fa16872 	.word	0x3fa16872
 8000ef0:	20000124 	.word	0x20000124
 8000ef4:	20000118 	.word	0x20000118
 8000ef8:	2000011c 	.word	0x2000011c
 8000efc:	20000120 	.word	0x20000120
 8000f00:	20000125 	.word	0x20000125
 8000f04:	2000008c 	.word	0x2000008c

08000f08 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2120      	movs	r1, #32
 8000f10:	480a      	ldr	r0, [pc, #40]	; (8000f3c <HCSR04_Read+0x34>)
 8000f12:	f000 fee7 	bl	8001ce4 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000f16:	200a      	movs	r0, #10
 8000f18:	f7ff ff3a 	bl	8000d90 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2120      	movs	r1, #32
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HCSR04_Read+0x34>)
 8000f22:	f000 fedf 	bl	8001ce4 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HCSR04_Read+0x38>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HCSR04_Read+0x38>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0202 	orr.w	r2, r2, #2
 8000f34:	60da      	str	r2, [r3, #12]
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	2000008c 	.word	0x2000008c

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b5b0      	push	{r4, r5, r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 fafd 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f845 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 f949 	bl	80011e8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000f56:	f000 f8ad 	bl	80010b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 f91b 	bl	8001194 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4819      	ldr	r0, [pc, #100]	; (8000fc8 <main+0x84>)
 8000f62:	f001 fce3 	bl	800292c <HAL_TIM_IC_Start_IT>
  uint8_t str[] = "UltraSonic Sensor\n\r";
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <main+0x88>)
 8000f68:	f107 0420 	add.w	r4, r7, #32
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	6023      	str	r3, [r4, #0]
  char uart_buf[30];
  uint32_t data = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_UART_Transmit_IT(&huart2, str, sizeof(str));
 8000f7a:	f107 0320 	add.w	r3, r7, #32
 8000f7e:	2214      	movs	r2, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <main+0x8c>)
 8000f84:	f002 fc39 	bl	80037fa <HAL_UART_Transmit_IT>
  HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f000 fb4e 	bl	800162c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HCSR04_Read();
 8000f90:	f7ff ffba 	bl	8000f08 <HCSR04_Read>
	  data = Distance;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <main+0x90>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
	  memset(uart_buf,0,30);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	221e      	movs	r2, #30
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f003 fb5f 	bl	8004664 <memset>
	  sprintf(uart_buf, "data : %d\n\r", data);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000faa:	490b      	ldr	r1, [pc, #44]	; (8000fd8 <main+0x94>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fb61 	bl	8004674 <siprintf>
	  HAL_UART_Transmit_IT(&huart2, uart_buf, sizeof(uart_buf));
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	221e      	movs	r2, #30
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <main+0x8c>)
 8000fba:	f002 fc1e 	bl	80037fa <HAL_UART_Transmit_IT>
//	  HAL_UART_Transmit_IT ( &huart2, Distance, sizeof(Distance) );
//	  printf("%d cm\r\n",Distance);
	  HAL_Delay(200);
 8000fbe:	20c8      	movs	r0, #200	; 0xc8
 8000fc0:	f000 fb34 	bl	800162c <HAL_Delay>
  {
 8000fc4:	e7e4      	b.n	8000f90 <main+0x4c>
 8000fc6:	bf00      	nop
 8000fc8:	2000008c 	.word	0x2000008c
 8000fcc:	08004f74 	.word	0x08004f74
 8000fd0:	200000d4 	.word	0x200000d4
 8000fd4:	20000125 	.word	0x20000125
 8000fd8:	08004f68 	.word	0x08004f68

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2234      	movs	r2, #52	; 0x34
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fb3a 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	4b29      	ldr	r3, [pc, #164]	; (80010ac <SystemClock_Config+0xd0>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a28      	ldr	r2, [pc, #160]	; (80010ac <SystemClock_Config+0xd0>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <SystemClock_Config+0xd0>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <SystemClock_Config+0xd4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <SystemClock_Config+0xd4>)
 800102a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <SystemClock_Config+0xd4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001044:	2310      	movs	r3, #16
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001048:	2302      	movs	r3, #2
 800104a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001050:	2308      	movs	r3, #8
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001054:	235a      	movs	r3, #90	; 0x5a
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001058:	2302      	movs	r3, #2
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800105c:	2302      	movs	r3, #2
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001060:	2302      	movs	r3, #2
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4618      	mov	r0, r3
 800106a:	f001 f919 	bl	80022a0 <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001074:	f000 f8ea 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108e:	f107 0308 	add.w	r3, r7, #8
 8001092:	2102      	movs	r1, #2
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fe3f 	bl	8001d18 <HAL_RCC_ClockConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010a0:	f000 f8d4 	bl	800124c <Error_Handler>
  }
}
 80010a4:	bf00      	nop
 80010a6:	3750      	adds	r7, #80	; 0x50
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40007000 	.word	0x40007000

080010b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0318 	add.w	r3, r7, #24
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM3_Init+0xd8>)
 80010e0:	4a2b      	ldr	r2, [pc, #172]	; (8001190 <MX_TIM3_Init+0xdc>)
 80010e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 80010e4:	4b29      	ldr	r3, [pc, #164]	; (800118c <MX_TIM3_Init+0xd8>)
 80010e6:	2259      	movs	r2, #89	; 0x59
 80010e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_TIM3_Init+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_TIM3_Init+0xd8>)
 80010f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <MX_TIM3_Init+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_TIM3_Init+0xd8>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001104:	4821      	ldr	r0, [pc, #132]	; (800118c <MX_TIM3_Init+0xd8>)
 8001106:	f001 fb69 	bl	80027dc <HAL_TIM_Base_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001110:	f000 f89c 	bl	800124c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800111a:	f107 0318 	add.w	r3, r7, #24
 800111e:	4619      	mov	r1, r3
 8001120:	481a      	ldr	r0, [pc, #104]	; (800118c <MX_TIM3_Init+0xd8>)
 8001122:	f001 fecf 	bl	8002ec4 <HAL_TIM_ConfigClockSource>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800112c:	f000 f88e 	bl	800124c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <MX_TIM3_Init+0xd8>)
 8001132:	f001 fba2 	bl	800287a <HAL_TIM_IC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800113c:	f000 f886 	bl	800124c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	4619      	mov	r1, r3
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <MX_TIM3_Init+0xd8>)
 8001150:	f002 fa76 	bl	8003640 <HAL_TIMEx_MasterConfigSynchronization>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800115a:	f000 f877 	bl	800124c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001162:	2301      	movs	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	463b      	mov	r3, r7
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_TIM3_Init+0xd8>)
 8001176:	f001 fe09 	bl	8002d8c <HAL_TIM_IC_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001180:	f000 f864 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000008c 	.word	0x2000008c
 8001190:	40000400 	.word	0x40000400

08001194 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_USART2_UART_Init+0x50>)
 800119c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a6:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011ba:	220c      	movs	r2, #12
 80011bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_USART2_UART_Init+0x4c>)
 80011cc:	f002 fac8 	bl	8003760 <HAL_UART_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d6:	f000 f839 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200000d4 	.word	0x200000d4
 80011e4:	40004400 	.word	0x40004400

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_GPIO_Init+0x5c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <MX_GPIO_Init+0x5c>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6313      	str	r3, [r2, #48]	; 0x30
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <MX_GPIO_Init+0x5c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2120      	movs	r1, #32
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <MX_GPIO_Init+0x60>)
 800121e:	f000 fd61 	bl	8001ce4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001222:	2320      	movs	r3, #32
 8001224:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	2301      	movs	r3, #1
 8001228:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_GPIO_Init+0x60>)
 8001238:	f000 fbc0 	bl	80019bc <HAL_GPIO_Init>

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	e7fe      	b.n	8001254 <Error_Handler+0x8>
	...

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_TIM_Base_MspInit+0x94>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d133      	bne.n	8001332 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_TIM_Base_MspInit+0x98>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001312:	2302      	movs	r3, #2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4809      	ldr	r0, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x9c>)
 800131e:	f000 fb4d 	bl	80019bc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	201d      	movs	r0, #29
 8001328:	f000 fa7f 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800132c:	201d      	movs	r0, #29
 800132e:	f000 fa98 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40000400 	.word	0x40000400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_UART_MspInit+0x94>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d133      	bne.n	80013d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UART_MspInit+0x98>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_UART_MspInit+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013a2:	230c      	movs	r3, #12
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b2:	2307      	movs	r3, #7
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_UART_MspInit+0x9c>)
 80013be:	f000 fafd 	bl	80019bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2026      	movs	r0, #38	; 0x26
 80013c8:	f000 fa2f 	bl	800182a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013cc:	2026      	movs	r0, #38	; 0x26
 80013ce:	f000 fa48 	bl	8001862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004400 	.word	0x40004400
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f8da 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001440:	4802      	ldr	r0, [pc, #8]	; (800144c <TIM3_IRQHandler+0x10>)
 8001442:	f001 fb9b 	bl	8002b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000008c 	.word	0x2000008c

08001450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART2_IRQHandler+0x10>)
 8001456:	f002 fa15 	bl	8003884 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000d4 	.word	0x200000d4

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f003 f8bc 	bl	8004610 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20020000 	.word	0x20020000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	20000128 	.word	0x20000128
 80014cc:	20000140 	.word	0x20000140

080014d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014fa:	490e      	ldr	r1, [pc, #56]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001510:	4c0b      	ldr	r4, [pc, #44]	; (8001540 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800151e:	f7ff ffd7 	bl	80014d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001522:	f003 f87b 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001526:	f7ff fd0d 	bl	8000f44 <main>
  bx  lr    
 800152a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001538:	08004fe4 	.word	0x08004fe4
  ldr r2, =_sbss
 800153c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001540:	20000140 	.word	0x20000140

08001544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <HAL_Init+0x40>)
 8001552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_Init+0x40>)
 800155e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x40>)
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f94f 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fe6c 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f967 	bl	800187e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f92f 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_IncTick+0x20>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x24>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_IncTick+0x24>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	20000008 	.word	0x20000008
 8001610:	2000012c 	.word	0x2000012c

08001614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return uwTick;
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_GetTick+0x14>)
 800161a:	681b      	ldr	r3, [r3, #0]
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000012c 	.word	0x2000012c

0800162c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001634:	f7ff ffee 	bl	8001614 <HAL_GetTick>
 8001638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d005      	beq.n	8001652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001646:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <HAL_Delay+0x44>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001652:	bf00      	nop
 8001654:	f7ff ffde 	bl	8001614 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	429a      	cmp	r2, r3
 8001662:	d8f7      	bhi.n	8001654 <HAL_Delay+0x28>
  {
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008

08001674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001690:	4013      	ands	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800169c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <__NVIC_GetPriorityGrouping+0x18>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f003 0307 	and.w	r3, r3, #7
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db0b      	blt.n	8001702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	f003 021f 	and.w	r2, r3, #31
 80016f0:	4907      	ldr	r1, [pc, #28]	; (8001710 <__NVIC_EnableIRQ+0x38>)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	2001      	movs	r0, #1
 80016fa:	fa00 f202 	lsl.w	r2, r0, r2
 80016fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000e100 	.word	0xe000e100

08001714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	6039      	str	r1, [r7, #0]
 800171e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	2b00      	cmp	r3, #0
 8001726:	db0a      	blt.n	800173e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b2da      	uxtb	r2, r3
 800172c:	490c      	ldr	r1, [pc, #48]	; (8001760 <__NVIC_SetPriority+0x4c>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	0112      	lsls	r2, r2, #4
 8001734:	b2d2      	uxtb	r2, r2
 8001736:	440b      	add	r3, r1
 8001738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800173c:	e00a      	b.n	8001754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4908      	ldr	r1, [pc, #32]	; (8001764 <__NVIC_SetPriority+0x50>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	3b04      	subs	r3, #4
 800174c:	0112      	lsls	r2, r2, #4
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	440b      	add	r3, r1
 8001752:	761a      	strb	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f1c3 0307 	rsb	r3, r3, #7
 8001782:	2b04      	cmp	r3, #4
 8001784:	bf28      	it	cs
 8001786:	2304      	movcs	r3, #4
 8001788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	3304      	adds	r3, #4
 800178e:	2b06      	cmp	r3, #6
 8001790:	d902      	bls.n	8001798 <NVIC_EncodePriority+0x30>
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3b03      	subs	r3, #3
 8001796:	e000      	b.n	800179a <NVIC_EncodePriority+0x32>
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	f04f 32ff 	mov.w	r2, #4294967295
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ba:	43d9      	mvns	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c0:	4313      	orrs	r3, r2
         );
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff8e 	bl	8001714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff29 	bl	8001674 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff3e 	bl	80016bc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff8e 	bl	8001768 <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5d 	bl	8001714 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff31 	bl	80016d8 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7ff ffa2 	bl	80017d0 <SysTick_Config>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b084      	sub	sp, #16
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff feb6 	bl	8001614 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d008      	beq.n	80018c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e052      	b.n	800196e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0216 	bic.w	r2, r2, #22
 80018d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d103      	bne.n	80018f8 <HAL_DMA_Abort+0x62>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0208 	bic.w	r2, r2, #8
 8001906:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0201 	bic.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001918:	e013      	b.n	8001942 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800191a:	f7ff fe7b 	bl	8001614 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b05      	cmp	r3, #5
 8001926:	d90c      	bls.n	8001942 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2220      	movs	r2, #32
 800192c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2203      	movs	r2, #3
 8001932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e015      	b.n	800196e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e4      	bne.n	800191a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001954:	223f      	movs	r2, #63	; 0x3f
 8001956:	409a      	lsls	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d004      	beq.n	8001994 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2280      	movs	r2, #128	; 0x80
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e00c      	b.n	80019ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2205      	movs	r2, #5
 8001998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e165      	b.n	8001ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8154 	bne.w	8001c9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80ae 	beq.w	8001c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	4a5c      	ldr	r2, [pc, #368]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	; 0x44
 8001b52:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_GPIO_Init+0x300>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_GPIO_Init+0x308>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4d      	ldr	r2, [pc, #308]	; (8001ccc <HAL_GPIO_Init+0x310>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4c      	ldr	r2, [pc, #304]	; (8001cd0 <HAL_GPIO_Init+0x314>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x20e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4b      	ldr	r2, [pc, #300]	; (8001cd4 <HAL_GPIO_Init+0x318>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x20a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4a      	ldr	r2, [pc, #296]	; (8001cd8 <HAL_GPIO_Init+0x31c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x206>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a49      	ldr	r2, [pc, #292]	; (8001cdc <HAL_GPIO_Init+0x320>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x202>
 8001bba:	2306      	movs	r3, #6
 8001bbc:	e00c      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00a      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	e008      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	e006      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e004      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_GPIO_Init+0x21c>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	69fa      	ldr	r2, [r7, #28]
 8001bda:	f002 0203 	and.w	r2, r2, #3
 8001bde:	0092      	lsls	r2, r2, #2
 8001be0:	4093      	lsls	r3, r2
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001be8:	4935      	ldr	r1, [pc, #212]	; (8001cc0 <HAL_GPIO_Init+0x304>)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3302      	adds	r3, #2
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1a:	4a31      	ldr	r2, [pc, #196]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c20:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c44:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_GPIO_Init+0x324>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	f67f ae96 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	3724      	adds	r7, #36	; 0x24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40013c00 	.word	0x40013c00

08001ce4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	460b      	mov	r3, r1
 8001cee:	807b      	strh	r3, [r7, #2]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf4:	787b      	ldrb	r3, [r7, #1]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d00:	e003      	b.n	8001d0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d02:	887b      	ldrh	r3, [r7, #2]
 8001d04:	041a      	lsls	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e0cc      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b68      	ldr	r3, [pc, #416]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d90c      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b63      	ldr	r3, [pc, #396]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b8      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b59      	ldr	r3, [pc, #356]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a58      	ldr	r2, [pc, #352]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494d      	ldr	r1, [pc, #308]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d044      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d119      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d003      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e067      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f023 0203 	bic.w	r2, r3, #3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4934      	ldr	r1, [pc, #208]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7ff fc04 	bl	8001614 <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7ff fc00 	bl	8001614 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e04f      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 020c 	and.w	r2, r3, #12
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d1eb      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d20c      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e032      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f855 	bl	8001f4c <HAL_RCC_GetSysClockFreq>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	490a      	ldr	r1, [pc, #40]	; (8001ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	5ccb      	ldrb	r3, [r1, r3]
 8001eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb6:	4a09      	ldr	r2, [pc, #36]	; (8001edc <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001eba:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fb64 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023c00 	.word	0x40023c00
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08004f88 	.word	0x08004f88
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000

08001efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f00:	f7ff fff0 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	; (8001f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08004f98 	.word	0x08004f98

08001f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f28:	f7ff ffdc 	bl	8001ee4 <HAL_RCC_GetHCLKFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	0b5b      	lsrs	r3, r3, #13
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	4903      	ldr	r1, [pc, #12]	; (8001f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	08004f98 	.word	0x08004f98

08001f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f50:	b0a6      	sub	sp, #152	; 0x98
 8001f52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f72:	4bc8      	ldr	r3, [pc, #800]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	f200 817e 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x330>
 8001f80:	a201      	add	r2, pc, #4	; (adr r2, 8001f88 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f86:	bf00      	nop
 8001f88:	08001fbd 	.word	0x08001fbd
 8001f8c:	0800227d 	.word	0x0800227d
 8001f90:	0800227d 	.word	0x0800227d
 8001f94:	0800227d 	.word	0x0800227d
 8001f98:	08001fc5 	.word	0x08001fc5
 8001f9c:	0800227d 	.word	0x0800227d
 8001fa0:	0800227d 	.word	0x0800227d
 8001fa4:	0800227d 	.word	0x0800227d
 8001fa8:	08001fcd 	.word	0x08001fcd
 8001fac:	0800227d 	.word	0x0800227d
 8001fb0:	0800227d 	.word	0x0800227d
 8001fb4:	0800227d 	.word	0x0800227d
 8001fb8:	08002137 	.word	0x08002137
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fbc:	4bb6      	ldr	r3, [pc, #728]	; (8002298 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001fc2:	e15f      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4bb5      	ldr	r3, [pc, #724]	; (800229c <HAL_RCC_GetSysClockFreq+0x350>)
 8001fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001fca:	e15b      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	4bb1      	ldr	r3, [pc, #708]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd8:	4bae      	ldr	r3, [pc, #696]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d031      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe4:	4bab      	ldr	r3, [pc, #684]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	099b      	lsrs	r3, r3, #6
 8001fea:	2200      	movs	r2, #0
 8001fec:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ff6:	663b      	str	r3, [r7, #96]	; 0x60
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	667b      	str	r3, [r7, #100]	; 0x64
 8001ffc:	4ba7      	ldr	r3, [pc, #668]	; (800229c <HAL_RCC_GetSysClockFreq+0x350>)
 8001ffe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002002:	462a      	mov	r2, r5
 8002004:	fb03 f202 	mul.w	r2, r3, r2
 8002008:	2300      	movs	r3, #0
 800200a:	4621      	mov	r1, r4
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	4aa2      	ldr	r2, [pc, #648]	; (800229c <HAL_RCC_GetSysClockFreq+0x350>)
 8002014:	4621      	mov	r1, r4
 8002016:	fba1 1202 	umull	r1, r2, r1, r2
 800201a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800201c:	460a      	mov	r2, r1
 800201e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002020:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002022:	4413      	add	r3, r2
 8002024:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202a:	2200      	movs	r2, #0
 800202c:	65bb      	str	r3, [r7, #88]	; 0x58
 800202e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002030:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002034:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002038:	f7fe fd28 	bl	8000a8c <__aeabi_uldivmod>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4613      	mov	r3, r2
 8002042:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002046:	e064      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	099b      	lsrs	r3, r3, #6
 800204e:	2200      	movs	r2, #0
 8002050:	653b      	str	r3, [r7, #80]	; 0x50
 8002052:	657a      	str	r2, [r7, #84]	; 0x54
 8002054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
 800205c:	2300      	movs	r3, #0
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002060:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002064:	4622      	mov	r2, r4
 8002066:	462b      	mov	r3, r5
 8002068:	f04f 0000 	mov.w	r0, #0
 800206c:	f04f 0100 	mov.w	r1, #0
 8002070:	0159      	lsls	r1, r3, #5
 8002072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002076:	0150      	lsls	r0, r2, #5
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4621      	mov	r1, r4
 800207e:	1a51      	subs	r1, r2, r1
 8002080:	6139      	str	r1, [r7, #16]
 8002082:	4629      	mov	r1, r5
 8002084:	eb63 0301 	sbc.w	r3, r3, r1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002096:	4659      	mov	r1, fp
 8002098:	018b      	lsls	r3, r1, #6
 800209a:	4651      	mov	r1, sl
 800209c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a0:	4651      	mov	r1, sl
 80020a2:	018a      	lsls	r2, r1, #6
 80020a4:	4651      	mov	r1, sl
 80020a6:	ebb2 0801 	subs.w	r8, r2, r1
 80020aa:	4659      	mov	r1, fp
 80020ac:	eb63 0901 	sbc.w	r9, r3, r1
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c4:	4690      	mov	r8, r2
 80020c6:	4699      	mov	r9, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	eb18 0303 	adds.w	r3, r8, r3
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	462b      	mov	r3, r5
 80020d2:	eb49 0303 	adc.w	r3, r9, r3
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	f04f 0300 	mov.w	r3, #0
 80020e0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020e4:	4629      	mov	r1, r5
 80020e6:	028b      	lsls	r3, r1, #10
 80020e8:	4621      	mov	r1, r4
 80020ea:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020ee:	4621      	mov	r1, r4
 80020f0:	028a      	lsls	r2, r1, #10
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020fa:	2200      	movs	r2, #0
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
 80020fe:	647a      	str	r2, [r7, #68]	; 0x44
 8002100:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002104:	f7fe fcc2 	bl	8000a8c <__aeabi_uldivmod>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4613      	mov	r3, r2
 800210e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002112:	4b60      	ldr	r3, [pc, #384]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0c1b      	lsrs	r3, r3, #16
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	3301      	adds	r3, #1
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002124:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002128:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002134:	e0a6      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002136:	4b57      	ldr	r3, [pc, #348]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800213e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d02a      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
 8002158:	63fa      	str	r2, [r7, #60]	; 0x3c
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002160:	2100      	movs	r1, #0
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_RCC_GetSysClockFreq+0x350>)
 8002164:	fb03 f201 	mul.w	r2, r3, r1
 8002168:	2300      	movs	r3, #0
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	4413      	add	r3, r2
 8002170:	4a4a      	ldr	r2, [pc, #296]	; (800229c <HAL_RCC_GetSysClockFreq+0x350>)
 8002172:	fba0 1202 	umull	r1, r2, r0, r2
 8002176:	677a      	str	r2, [r7, #116]	; 0x74
 8002178:	460a      	mov	r2, r1
 800217a:	673a      	str	r2, [r7, #112]	; 0x70
 800217c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800217e:	4413      	add	r3, r2
 8002180:	677b      	str	r3, [r7, #116]	; 0x74
 8002182:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002186:	2200      	movs	r2, #0
 8002188:	633b      	str	r3, [r7, #48]	; 0x30
 800218a:	637a      	str	r2, [r7, #52]	; 0x34
 800218c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002190:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002194:	f7fe fc7a 	bl	8000a8c <__aeabi_uldivmod>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4613      	mov	r3, r2
 800219e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021a2:	e05b      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	2200      	movs	r2, #0
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021b6:	623b      	str	r3, [r7, #32]
 80021b8:	2300      	movs	r3, #0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
 80021bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021c0:	4642      	mov	r2, r8
 80021c2:	464b      	mov	r3, r9
 80021c4:	f04f 0000 	mov.w	r0, #0
 80021c8:	f04f 0100 	mov.w	r1, #0
 80021cc:	0159      	lsls	r1, r3, #5
 80021ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d2:	0150      	lsls	r0, r2, #5
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4641      	mov	r1, r8
 80021da:	ebb2 0a01 	subs.w	sl, r2, r1
 80021de:	4649      	mov	r1, r9
 80021e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021f8:	ebb2 040a 	subs.w	r4, r2, sl
 80021fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	00eb      	lsls	r3, r5, #3
 800220a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800220e:	00e2      	lsls	r2, r4, #3
 8002210:	4614      	mov	r4, r2
 8002212:	461d      	mov	r5, r3
 8002214:	4643      	mov	r3, r8
 8002216:	18e3      	adds	r3, r4, r3
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	464b      	mov	r3, r9
 800221c:	eb45 0303 	adc.w	r3, r5, r3
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800222e:	4629      	mov	r1, r5
 8002230:	028b      	lsls	r3, r1, #10
 8002232:	4621      	mov	r1, r4
 8002234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002238:	4621      	mov	r1, r4
 800223a:	028a      	lsls	r2, r1, #10
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002244:	2200      	movs	r2, #0
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	61fa      	str	r2, [r7, #28]
 800224a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224e:	f7fe fc1d 	bl	8000a8c <__aeabi_uldivmod>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4613      	mov	r3, r2
 8002258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_GetSysClockFreq+0x348>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	0f1b      	lsrs	r3, r3, #28
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800226a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800226e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800227a:	e003      	b.n	8002284 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_GetSysClockFreq+0x34c>)
 800227e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002282:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002284:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002288:	4618      	mov	r0, r3
 800228a:	3798      	adds	r7, #152	; 0x98
 800228c:	46bd      	mov	sp, r7
 800228e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	00f42400 	.word	0x00f42400
 800229c:	017d7840 	.word	0x017d7840

080022a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e28d      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8083 	beq.w	80023c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022c0:	4b94      	ldr	r3, [pc, #592]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 030c 	and.w	r3, r3, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d019      	beq.n	8002300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022cc:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022d8:	4b8e      	ldr	r3, [pc, #568]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b8b      	ldr	r3, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b84      	ldr	r3, [pc, #528]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x124>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e25a      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x90>
 8002322:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7b      	ldr	r2, [pc, #492]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xcc>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xb4>
 800233a:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a75      	ldr	r2, [pc, #468]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a72      	ldr	r2, [pc, #456]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xcc>
 8002354:	4b6f      	ldr	r3, [pc, #444]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6e      	ldr	r2, [pc, #440]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a6b      	ldr	r2, [pc, #428]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f94e 	bl	8001614 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff f94a 	bl	8001614 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e21f      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b61      	ldr	r3, [pc, #388]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xdc>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239c:	f7ff f93a 	bl	8001614 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f936 	bl	8001614 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e20b      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x104>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06f      	beq.n	80024b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d017      	beq.n	800240e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023de:	4b4d      	ldr	r3, [pc, #308]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d105      	bne.n	80023f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023ea:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00b      	beq.n	800240e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023fe:	2b0c      	cmp	r3, #12
 8002400:	d11c      	bne.n	800243c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x186>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d001      	beq.n	8002426 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e1d3      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	4937      	ldr	r1, [pc, #220]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	e03a      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d020      	beq.n	8002486 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_RCC_OscConfig+0x278>)
 8002446:	2201      	movs	r2, #1
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7ff f8e3 	bl	8001614 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002452:	f7ff f8df 	bl	8001614 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b4      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f0      	beq.n	8002452 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4925      	ldr	r1, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
 8002484:	e015      	b.n	80024b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_OscConfig+0x278>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7ff f8c2 	bl	8001614 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002494:	f7ff f8be 	bl	8001614 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e193      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d036      	beq.n	800252c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_RCC_OscConfig+0x27c>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff f8a2 	bl	8001614 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024d4:	f7ff f89e 	bl	8001614 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e173      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x274>)
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x234>
 80024f2:	e01b      	b.n	800252c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_OscConfig+0x27c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7ff f88b 	bl	8001614 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002500:	e00e      	b.n	8002520 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002502:	f7ff f887 	bl	8001614 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d907      	bls.n	8002520 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e15c      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
 8002514:	40023800 	.word	0x40023800
 8002518:	42470000 	.word	0x42470000
 800251c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	4b8a      	ldr	r3, [pc, #552]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ea      	bne.n	8002502 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0304 	and.w	r3, r3, #4
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 8097 	beq.w	8002668 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253e:	4b83      	ldr	r3, [pc, #524]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	4b7f      	ldr	r3, [pc, #508]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	4a7e      	ldr	r2, [pc, #504]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002558:	6413      	str	r3, [r2, #64]	; 0x40
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b79      	ldr	r3, [pc, #484]	; (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d118      	bne.n	80025a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002576:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCC_OscConfig+0x4b0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a75      	ldr	r2, [pc, #468]	; (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002582:	f7ff f847 	bl	8001614 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258a:	f7ff f843 	bl	8001614 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e118      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	4b6c      	ldr	r3, [pc, #432]	; (8002750 <HAL_RCC_OscConfig+0x4b0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x31e>
 80025b0:	4b66      	ldr	r3, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	4a65      	ldr	r2, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6713      	str	r3, [r2, #112]	; 0x70
 80025bc:	e01c      	b.n	80025f8 <HAL_RCC_OscConfig+0x358>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x340>
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a60      	ldr	r2, [pc, #384]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a5d      	ldr	r2, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	e00b      	b.n	80025f8 <HAL_RCC_OscConfig+0x358>
 80025e0:	4b5a      	ldr	r3, [pc, #360]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a59      	ldr	r2, [pc, #356]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
 80025ec:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80025f2:	f023 0304 	bic.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d015      	beq.n	800262c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002600:	f7ff f808 	bl	8001614 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	e00a      	b.n	800261e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7ff f804 	bl	8001614 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f241 3288 	movw	r2, #5000	; 0x1388
 8002616:	4293      	cmp	r3, r2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0d7      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ee      	beq.n	8002608 <HAL_RCC_OscConfig+0x368>
 800262a:	e014      	b.n	8002656 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7fe fff2 	bl	8001614 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7fe ffee 	bl	8001614 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0c1      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	4b40      	ldr	r3, [pc, #256]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ee      	bne.n	8002634 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265c:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a3a      	ldr	r2, [pc, #232]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80ad 	beq.w	80027cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b08      	cmp	r3, #8
 800267c:	d060      	beq.n	8002740 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d145      	bne.n	8002712 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x4b4>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe ffc2 	bl	8001614 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe ffbe 	bl	8001614 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e093      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	019b      	lsls	r3, r3, #6
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	3b01      	subs	r3, #1
 80026cc:	041b      	lsls	r3, r3, #16
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	071b      	lsls	r3, r3, #28
 80026de:	491b      	ldr	r1, [pc, #108]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x4b4>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ea:	f7fe ff93 	bl	8001614 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f2:	f7fe ff8f 	bl	8001614 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e064      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x452>
 8002710:	e05c      	b.n	80027cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_RCC_OscConfig+0x4b4>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe ff7c 	bl	8001614 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe ff78 	bl	8001614 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e04d      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_OscConfig+0x4ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x480>
 800273e:	e045      	b.n	80027cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d107      	bne.n	8002758 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e040      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
 800274c:	40023800 	.word	0x40023800
 8002750:	40007000 	.word	0x40007000
 8002754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002758:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_RCC_OscConfig+0x538>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d030      	beq.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d129      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d122      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002788:	4013      	ands	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002790:	4293      	cmp	r3, r2
 8002792:	d119      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10f      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e041      	b.n	8002872 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe fd50 	bl	80012a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fc86 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e041      	b.n	8002910 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d106      	bne.n	80028a6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f839 	bl	8002918 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f000 fc37 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_TIM_IC_Start_IT+0x1e>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e013      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x46>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b04      	cmp	r3, #4
 800294e:	d104      	bne.n	800295a <HAL_TIM_IC_Start_IT+0x2e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e00b      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x46>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d104      	bne.n	800296a <HAL_TIM_IC_Start_IT+0x3e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e003      	b.n	8002972 <HAL_TIM_IC_Start_IT+0x46>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d104      	bne.n	8002984 <HAL_TIM_IC_Start_IT+0x58>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e013      	b.n	80029ac <HAL_TIM_IC_Start_IT+0x80>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b04      	cmp	r3, #4
 8002988:	d104      	bne.n	8002994 <HAL_TIM_IC_Start_IT+0x68>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e00b      	b.n	80029ac <HAL_TIM_IC_Start_IT+0x80>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b08      	cmp	r3, #8
 8002998:	d104      	bne.n	80029a4 <HAL_TIM_IC_Start_IT+0x78>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e003      	b.n	80029ac <HAL_TIM_IC_Start_IT+0x80>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80029ae:	7bbb      	ldrb	r3, [r7, #14]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80029b4:	7b7b      	ldrb	r3, [r7, #13]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d001      	beq.n	80029be <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0cc      	b.n	8002b58 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d104      	bne.n	80029ce <HAL_TIM_IC_Start_IT+0xa2>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029cc:	e013      	b.n	80029f6 <HAL_TIM_IC_Start_IT+0xca>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d104      	bne.n	80029de <HAL_TIM_IC_Start_IT+0xb2>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2202      	movs	r2, #2
 80029d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029dc:	e00b      	b.n	80029f6 <HAL_TIM_IC_Start_IT+0xca>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d104      	bne.n	80029ee <HAL_TIM_IC_Start_IT+0xc2>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ec:	e003      	b.n	80029f6 <HAL_TIM_IC_Start_IT+0xca>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2202      	movs	r2, #2
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_IC_Start_IT+0xda>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a04:	e013      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x102>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_IC_Start_IT+0xea>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a14:	e00b      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x102>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_IC_Start_IT+0xfa>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a24:	e003      	b.n	8002a2e <HAL_TIM_IC_Start_IT+0x102>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2202      	movs	r2, #2
 8002a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b0c      	cmp	r3, #12
 8002a32:	d841      	bhi.n	8002ab8 <HAL_TIM_IC_Start_IT+0x18c>
 8002a34:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <HAL_TIM_IC_Start_IT+0x110>)
 8002a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3a:	bf00      	nop
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002ab9 	.word	0x08002ab9
 8002a44:	08002ab9 	.word	0x08002ab9
 8002a48:	08002ab9 	.word	0x08002ab9
 8002a4c:	08002a83 	.word	0x08002a83
 8002a50:	08002ab9 	.word	0x08002ab9
 8002a54:	08002ab9 	.word	0x08002ab9
 8002a58:	08002ab9 	.word	0x08002ab9
 8002a5c:	08002a95 	.word	0x08002a95
 8002a60:	08002ab9 	.word	0x08002ab9
 8002a64:	08002ab9 	.word	0x08002ab9
 8002a68:	08002ab9 	.word	0x08002ab9
 8002a6c:	08002aa7 	.word	0x08002aa7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0202 	orr.w	r2, r2, #2
 8002a7e:	60da      	str	r2, [r3, #12]
      break;
 8002a80:	e01d      	b.n	8002abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0204 	orr.w	r2, r2, #4
 8002a90:	60da      	str	r2, [r3, #12]
      break;
 8002a92:	e014      	b.n	8002abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0208 	orr.w	r2, r2, #8
 8002aa2:	60da      	str	r2, [r3, #12]
      break;
 8002aa4:	e00b      	b.n	8002abe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0210 	orr.w	r2, r2, #16
 8002ab4:	60da      	str	r2, [r3, #12]
      break;
 8002ab6:	e002      	b.n	8002abe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      break;
 8002abc:	bf00      	nop
  }

  if (status == HAL_OK)
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d148      	bne.n	8002b56 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	6839      	ldr	r1, [r7, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fd91 	bl	80035f4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_TIM_IC_Start_IT+0x234>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d022      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d01d      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_TIM_IC_Start_IT+0x238>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d018      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1c      	ldr	r2, [pc, #112]	; (8002b68 <HAL_TIM_IC_Start_IT+0x23c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a1b      	ldr	r2, [pc, #108]	; (8002b6c <HAL_TIM_IC_Start_IT+0x240>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a19      	ldr	r2, [pc, #100]	; (8002b70 <HAL_TIM_IC_Start_IT+0x244>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a18      	ldr	r2, [pc, #96]	; (8002b74 <HAL_TIM_IC_Start_IT+0x248>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_TIM_IC_Start_IT+0x1f6>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <HAL_TIM_IC_Start_IT+0x24c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d111      	bne.n	8002b46 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b06      	cmp	r3, #6
 8002b32:	d010      	beq.n	8002b56 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	e007      	b.n	8002b56 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1
 8002b54:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40010000 	.word	0x40010000
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800
 8002b6c:	40000c00 	.word	0x40000c00
 8002b70:	40010400 	.word	0x40010400
 8002b74:	40014000 	.word	0x40014000
 8002b78:	40001800 	.word	0x40001800

08002b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0202 	mvn.w	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fe f902 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa92 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa99 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0204 	mvn.w	r2, #4
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f8d8 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fa68 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fa6f 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0208 	mvn.w	r2, #8
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f8ae 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fa3e 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fa45 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe f884 	bl	8000dc8 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 fa14 	bl	80030f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fa1b 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0201 	mvn.w	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f9ee 	bl	80030dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fd10 	bl	800374c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f9e0 	bl	8003118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fcda 	bl	8003738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_IC_ConfigChannel+0x1e>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e088      	b.n	8002ebc <HAL_TIM_IC_ConfigChannel+0x130>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f000 fa50 	bl	800326c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 020c 	bic.w	r2, r2, #12
 8002dda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6999      	ldr	r1, [r3, #24]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	619a      	str	r2, [r3, #24]
 8002dee:	e060      	b.n	8002eb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d11c      	bne.n	8002e30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f000 fad4 	bl	80033b2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6999      	ldr	r1, [r3, #24]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	619a      	str	r2, [r3, #24]
 8002e2e:	e040      	b.n	8002eb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11b      	bne.n	8002e6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f000 fb21 	bl	800348c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 020c 	bic.w	r2, r2, #12
 8002e58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69d9      	ldr	r1, [r3, #28]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
 8002e6c:	e021      	b.n	8002eb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d11c      	bne.n	8002eae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	6819      	ldr	r1, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f000 fb3e 	bl	8003504 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69da      	ldr	r2, [r3, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002e96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69d9      	ldr	r1, [r3, #28]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	021a      	lsls	r2, r3, #8
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	61da      	str	r2, [r3, #28]
 8002eac:	e001      	b.n	8002eb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e0b4      	b.n	800304a <HAL_TIM_ConfigClockSource+0x186>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f18:	d03e      	beq.n	8002f98 <HAL_TIM_ConfigClockSource+0xd4>
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	f200 8087 	bhi.w	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	f000 8086 	beq.w	8003036 <HAL_TIM_ConfigClockSource+0x172>
 8002f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2e:	d87f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f30:	2b70      	cmp	r3, #112	; 0x70
 8002f32:	d01a      	beq.n	8002f6a <HAL_TIM_ConfigClockSource+0xa6>
 8002f34:	2b70      	cmp	r3, #112	; 0x70
 8002f36:	d87b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f38:	2b60      	cmp	r3, #96	; 0x60
 8002f3a:	d050      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x11a>
 8002f3c:	2b60      	cmp	r3, #96	; 0x60
 8002f3e:	d877      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f40:	2b50      	cmp	r3, #80	; 0x50
 8002f42:	d03c      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0xfa>
 8002f44:	2b50      	cmp	r3, #80	; 0x50
 8002f46:	d873      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f48:	2b40      	cmp	r3, #64	; 0x40
 8002f4a:	d058      	beq.n	8002ffe <HAL_TIM_ConfigClockSource+0x13a>
 8002f4c:	2b40      	cmp	r3, #64	; 0x40
 8002f4e:	d86f      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f50:	2b30      	cmp	r3, #48	; 0x30
 8002f52:	d064      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f54:	2b30      	cmp	r3, #48	; 0x30
 8002f56:	d86b      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d060      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d867      	bhi.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d05c      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f64:	2b10      	cmp	r3, #16
 8002f66:	d05a      	beq.n	800301e <HAL_TIM_ConfigClockSource+0x15a>
 8002f68:	e062      	b.n	8003030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6818      	ldr	r0, [r3, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	6899      	ldr	r1, [r3, #8]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f000 fb1b 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	609a      	str	r2, [r3, #8]
      break;
 8002f96:	e04f      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f000 fb04 	bl	80035b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fba:	609a      	str	r2, [r3, #8]
      break;
 8002fbc:	e03c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6859      	ldr	r1, [r3, #4]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	f000 f9c2 	bl	8003354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2150      	movs	r1, #80	; 0x50
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fad1 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 8002fdc:	e02c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f000 fa1e 	bl	800342c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2160      	movs	r1, #96	; 0x60
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fac1 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 8002ffc:	e01c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6859      	ldr	r1, [r3, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	461a      	mov	r2, r3
 800300c:	f000 f9a2 	bl	8003354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2140      	movs	r1, #64	; 0x40
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fab1 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 800301c:	e00c      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f000 faa8 	bl	800357e <TIM_ITRx_SetConfig>
      break;
 800302e:	e003      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      break;
 8003034:	e000      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003048:	7bfb      	ldrb	r3, [r7, #15]
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d831      	bhi.n	80030cc <HAL_TIM_ReadCapturedValue+0x78>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_ReadCapturedValue+0x1c>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030cd 	.word	0x080030cd
 8003078:	080030cd 	.word	0x080030cd
 800307c:	080030cd 	.word	0x080030cd
 8003080:	080030af 	.word	0x080030af
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030cd 	.word	0x080030cd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030b9 	.word	0x080030b9
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030c3 	.word	0x080030c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030aa:	60fb      	str	r3, [r7, #12]

      break;
 80030ac:	e00f      	b.n	80030ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b4:	60fb      	str	r3, [r7, #12]

      break;
 80030b6:	e00a      	b.n	80030ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	60fb      	str	r3, [r7, #12]

      break;
 80030c0:	e005      	b.n	80030ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	60fb      	str	r3, [r7, #12]

      break;
 80030ca:	e000      	b.n	80030ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80030cc:	bf00      	nop
  }

  return tmpreg;
 80030ce:	68fb      	ldr	r3, [r7, #12]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a40      	ldr	r2, [pc, #256]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3b      	ldr	r2, [pc, #236]	; (800324c <TIM_Base_SetConfig+0x120>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d02b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318c:	d027      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a2c      	ldr	r2, [pc, #176]	; (8003244 <TIM_Base_SetConfig+0x118>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d023      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2b      	ldr	r2, [pc, #172]	; (8003248 <TIM_Base_SetConfig+0x11c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2a      	ldr	r2, [pc, #168]	; (800324c <TIM_Base_SetConfig+0x120>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a29      	ldr	r2, [pc, #164]	; (8003250 <TIM_Base_SetConfig+0x124>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d017      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a28      	ldr	r2, [pc, #160]	; (8003254 <TIM_Base_SetConfig+0x128>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a27      	ldr	r2, [pc, #156]	; (8003258 <TIM_Base_SetConfig+0x12c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00f      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <TIM_Base_SetConfig+0x130>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00b      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a25      	ldr	r2, [pc, #148]	; (8003260 <TIM_Base_SetConfig+0x134>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a24      	ldr	r2, [pc, #144]	; (8003264 <TIM_Base_SetConfig+0x138>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d003      	beq.n	80031de <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <TIM_Base_SetConfig+0x13c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d108      	bne.n	80031f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <TIM_Base_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_Base_SetConfig+0xf8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0c      	ldr	r2, [pc, #48]	; (8003250 <TIM_Base_SetConfig+0x124>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d103      	bne.n	800322c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	615a      	str	r2, [r3, #20]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	40010000 	.word	0x40010000
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010400 	.word	0x40010400
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	40001800 	.word	0x40001800
 8003264:	40001c00 	.word	0x40001c00
 8003268:	40002000 	.word	0x40002000

0800326c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	f023 0201 	bic.w	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a28      	ldr	r2, [pc, #160]	; (8003338 <TIM_TI1_SetConfig+0xcc>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01b      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d017      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4a25      	ldr	r2, [pc, #148]	; (800333c <TIM_TI1_SetConfig+0xd0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a24      	ldr	r2, [pc, #144]	; (8003340 <TIM_TI1_SetConfig+0xd4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00f      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <TIM_TI1_SetConfig+0xd8>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a22      	ldr	r2, [pc, #136]	; (8003348 <TIM_TI1_SetConfig+0xdc>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d007      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a21      	ldr	r2, [pc, #132]	; (800334c <TIM_TI1_SetConfig+0xe0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d003      	beq.n	80032d2 <TIM_TI1_SetConfig+0x66>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a20      	ldr	r2, [pc, #128]	; (8003350 <TIM_TI1_SetConfig+0xe4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <TIM_TI1_SetConfig+0x6a>
 80032d2:	2301      	movs	r3, #1
 80032d4:	e000      	b.n	80032d8 <TIM_TI1_SetConfig+0x6c>
 80032d6:	2300      	movs	r3, #0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e003      	b.n	80032f6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f023 030a 	bic.w	r3, r3, #10
 8003310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f003 030a 	and.w	r3, r3, #10
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40010400 	.word	0x40010400
 800334c:	40014000 	.word	0x40014000
 8003350:	40001800 	.word	0x40001800

08003354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	f023 0201 	bic.w	r2, r3, #1
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800337e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f023 030a 	bic.w	r3, r3, #10
 8003390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b087      	sub	sp, #28
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 0210 	bic.w	r2, r3, #16
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003404:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	621a      	str	r2, [r3, #32]
}
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800342c:	b480      	push	{r7}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f023 0210 	bic.w	r2, r3, #16
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	031b      	lsls	r3, r3, #12
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003468:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	621a      	str	r2, [r3, #32]
}
 8003480:	bf00      	nop
 8003482:	371c      	adds	r7, #28
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4313      	orrs	r3, r2
 80034c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80034dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	621a      	str	r2, [r3, #32]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003530:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003542:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	031b      	lsls	r3, r3, #12
 8003548:	b29b      	uxth	r3, r3
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003556:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	031b      	lsls	r3, r3, #12
 800355c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	621a      	str	r2, [r3, #32]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003594:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	f043 0307 	orr.w	r3, r3, #7
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	021a      	lsls	r2, r3, #8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	371c      	adds	r7, #28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2201      	movs	r2, #1
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a1a      	ldr	r2, [r3, #32]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1a      	ldr	r2, [r3, #32]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e05a      	b.n	800370e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a21      	ldr	r2, [pc, #132]	; (800371c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a4:	d01d      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1d      	ldr	r2, [pc, #116]	; (8003720 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d018      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1a      	ldr	r2, [pc, #104]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d009      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a17      	ldr	r2, [pc, #92]	; (8003730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10c      	bne.n	80036fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40010000 	.word	0x40010000
 8003720:	40000400 	.word	0x40000400
 8003724:	40000800 	.word	0x40000800
 8003728:	40000c00 	.word	0x40000c00
 800372c:	40010400 	.word	0x40010400
 8003730:	40014000 	.word	0x40014000
 8003734:	40001800 	.word	0x40001800

08003738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e03f      	b.n	80037f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7fd fdde 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fcbf 	bl	8004128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b085      	sub	sp, #20
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	4613      	mov	r3, r2
 8003806:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b20      	cmp	r3, #32
 8003812:	d130      	bne.n	8003876 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Transmit_IT+0x26>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e029      	b.n	8003878 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_UART_Transmit_IT+0x38>
 800382e:	2302      	movs	r3, #2
 8003830:	e022      	b.n	8003878 <HAL_UART_Transmit_IT+0x7e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	88fa      	ldrh	r2, [r7, #6]
 800384a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2221      	movs	r2, #33	; 0x21
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003870:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	e000      	b.n	8003878 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003876:	2302      	movs	r3, #2
  }
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b0ba      	sub	sp, #232	; 0xe8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80038c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10f      	bne.n	80038ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_UART_IRQHandler+0x66>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fb65 	bl	8003fb2 <UART_Receive_IT>
      return;
 80038e8:	e256      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80de 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x22c>
 80038f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d106      	bne.n	800390e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003904:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80d1 	beq.w	8003ab0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800390e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_UART_IRQHandler+0xae>
 800391a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f043 0201 	orr.w	r2, r3, #1
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <HAL_UART_IRQHandler+0xd2>
 800393e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0202 	orr.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_UART_IRQHandler+0xf6>
 8003962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d005      	beq.n	800397a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f043 0204 	orr.w	r2, r3, #4
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d011      	beq.n	80039aa <HAL_UART_IRQHandler+0x126>
 8003986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d105      	bne.n	800399e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0208 	orr.w	r2, r3, #8
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 81ed 	beq.w	8003d8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b8:	f003 0320 	and.w	r3, r3, #32
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_UART_IRQHandler+0x14e>
 80039c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 faf0 	bl	8003fb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b40      	cmp	r3, #64	; 0x40
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_UART_IRQHandler+0x17a>
 80039f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d04f      	beq.n	8003a9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f9f8 	bl	8003df4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d141      	bne.n	8003a96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	3314      	adds	r3, #20
 8003a18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003a28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3314      	adds	r3, #20
 8003a3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003a3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003a42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003a4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003a4e:	e841 2300 	strex	r3, r2, [r1]
 8003a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1d9      	bne.n	8003a12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d013      	beq.n	8003a8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	4a7d      	ldr	r2, [pc, #500]	; (8003c60 <HAL_UART_IRQHandler+0x3dc>)
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fd ff7f 	bl	8001976 <HAL_DMA_Abort_IT>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a8c:	e00e      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f99a 	bl	8003dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a94:	e00a      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f996 	bl	8003dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9c:	e006      	b.n	8003aac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f992 	bl	8003dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003aaa:	e170      	b.n	8003d8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	bf00      	nop
    return;
 8003aae:	e16e      	b.n	8003d8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	f040 814a 	bne.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 8143 	beq.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 813c 	beq.w	8003d4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	60bb      	str	r3, [r7, #8]
 8003aea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	f040 80b4 	bne.w	8003c64 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003b08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8140 	beq.w	8003d92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	f080 8139 	bcs.w	8003d92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003b26:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b32:	f000 8088 	beq.w	8003c46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b44:	e853 3f00 	ldrex	r3, [r3]
 8003b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1d9      	bne.n	8003b36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3314      	adds	r3, #20
 8003b88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8c:	e853 3f00 	ldrex	r3, [r3]
 8003b90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3314      	adds	r3, #20
 8003ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ba6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003bb2:	e841 2300 	strex	r3, r2, [r1]
 8003bb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1e1      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3314      	adds	r3, #20
 8003bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003be4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e3      	bne.n	8003bbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c16:	f023 0310 	bic.w	r3, r3, #16
 8003c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003c28:	65ba      	str	r2, [r7, #88]	; 0x58
 8003c2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c30:	e841 2300 	strex	r3, r2, [r1]
 8003c34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1e3      	bne.n	8003c04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd fe28 	bl	8001896 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f8c0 	bl	8003ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c5c:	e099      	b.n	8003d92 <HAL_UART_IRQHandler+0x50e>
 8003c5e:	bf00      	nop
 8003c60:	08003ebb 	.word	0x08003ebb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 808b 	beq.w	8003d96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8086 	beq.w	8003d96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	330c      	adds	r3, #12
 8003caa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003cae:	647a      	str	r2, [r7, #68]	; 0x44
 8003cb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e3      	bne.n	8003c8a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3314      	adds	r3, #20
 8003cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	e853 3f00 	ldrex	r3, [r3]
 8003cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3314      	adds	r3, #20
 8003ce2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003ce6:	633a      	str	r2, [r7, #48]	; 0x30
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e3      	bne.n	8003cc2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	e853 3f00 	ldrex	r3, [r3]
 8003d16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0310 	bic.w	r3, r3, #16
 8003d1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003d2c:	61fa      	str	r2, [r7, #28]
 8003d2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	e841 2300 	strex	r3, r2, [r1]
 8003d38:	617b      	str	r3, [r7, #20]
   return(result);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e3      	bne.n	8003d08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d44:	4619      	mov	r1, r3
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f848 	bl	8003ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d4c:	e023      	b.n	8003d96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_UART_IRQHandler+0x4ea>
 8003d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f8bb 	bl	8003ee2 <UART_Transmit_IT>
    return;
 8003d6c:	e014      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00e      	beq.n	8003d98 <HAL_UART_IRQHandler+0x514>
 8003d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 f8fb 	bl	8003f82 <UART_EndTransmit_IT>
    return;
 8003d8c:	e004      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
    return;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
      return;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <HAL_UART_IRQHandler+0x514>
      return;
 8003d96:	bf00      	nop
  }
}
 8003d98:	37e8      	adds	r7, #232	; 0xe8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b095      	sub	sp, #84	; 0x54
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	330c      	adds	r3, #12
 8003e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3314      	adds	r3, #20
 8003e36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3314      	adds	r3, #20
 8003e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e5      	bne.n	8003e30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d119      	bne.n	8003ea0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	330c      	adds	r3, #12
 8003e72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f023 0310 	bic.w	r3, r3, #16
 8003e82:	647b      	str	r3, [r7, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e8c:	61ba      	str	r2, [r7, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eae:	bf00      	nop
 8003eb0:	3754      	adds	r7, #84	; 0x54
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff77 	bl	8003dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b21      	cmp	r3, #33	; 0x21
 8003ef4:	d13e      	bne.n	8003f74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d114      	bne.n	8003f2a <UART_Transmit_IT+0x48>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d110      	bne.n	8003f2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	1c9a      	adds	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	621a      	str	r2, [r3, #32]
 8003f28:	e008      	b.n	8003f3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	1c59      	adds	r1, r3, #1
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6211      	str	r1, [r2, #32]
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10f      	bne.n	8003f70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fefc 	bl	8003da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b08c      	sub	sp, #48	; 0x30
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b22      	cmp	r3, #34	; 0x22
 8003fc4:	f040 80ab 	bne.w	800411e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d117      	bne.n	8004002 <UART_Receive_IT+0x50>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d113      	bne.n	8004002 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8004000:	e026      	b.n	8004050 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d007      	beq.n	8004026 <UART_Receive_IT+0x74>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <UART_Receive_IT+0x82>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	701a      	strb	r2, [r3, #0]
 8004032:	e008      	b.n	8004046 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004040:	b2da      	uxtb	r2, r3
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004060:	2b00      	cmp	r3, #0
 8004062:	d15a      	bne.n	800411a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0220 	bic.w	r2, r2, #32
 8004072:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d135      	bne.n	8004110 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f023 0310 	bic.w	r3, r3, #16
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ca:	623a      	str	r2, [r7, #32]
 80040cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	6a3a      	ldr	r2, [r7, #32]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d10a      	bne.n	8004102 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004106:	4619      	mov	r1, r3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fe67 	bl	8003ddc <HAL_UARTEx_RxEventCallback>
 800410e:	e002      	b.n	8004116 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fe4f 	bl	8003db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e002      	b.n	8004120 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800412c:	b0c0      	sub	sp, #256	; 0x100
 800412e:	af00      	add	r7, sp, #0
 8004130:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	68d9      	ldr	r1, [r3, #12]
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	ea40 0301 	orr.w	r3, r0, r1
 8004150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004180:	f021 010c 	bic.w	r1, r1, #12
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800418e:	430b      	orrs	r3, r1
 8004190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	6999      	ldr	r1, [r3, #24]
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	ea40 0301 	orr.w	r3, r0, r1
 80041ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <UART_SetConfig+0x2cc>)
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d005      	beq.n	80041c8 <UART_SetConfig+0xa0>
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	4b8d      	ldr	r3, [pc, #564]	; (80043f8 <UART_SetConfig+0x2d0>)
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d104      	bne.n	80041d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c8:	f7fd feac 	bl	8001f24 <HAL_RCC_GetPCLK2Freq>
 80041cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041d0:	e003      	b.n	80041da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041d2:	f7fd fe93 	bl	8001efc <HAL_RCC_GetPCLK1Freq>
 80041d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041e4:	f040 810c 	bne.w	8004400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041ec:	2200      	movs	r2, #0
 80041ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80041f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80041f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80041fa:	4622      	mov	r2, r4
 80041fc:	462b      	mov	r3, r5
 80041fe:	1891      	adds	r1, r2, r2
 8004200:	65b9      	str	r1, [r7, #88]	; 0x58
 8004202:	415b      	adcs	r3, r3
 8004204:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800420a:	4621      	mov	r1, r4
 800420c:	eb12 0801 	adds.w	r8, r2, r1
 8004210:	4629      	mov	r1, r5
 8004212:	eb43 0901 	adc.w	r9, r3, r1
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800422a:	4690      	mov	r8, r2
 800422c:	4699      	mov	r9, r3
 800422e:	4623      	mov	r3, r4
 8004230:	eb18 0303 	adds.w	r3, r8, r3
 8004234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004238:	462b      	mov	r3, r5
 800423a:	eb49 0303 	adc.w	r3, r9, r3
 800423e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800424e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004256:	460b      	mov	r3, r1
 8004258:	18db      	adds	r3, r3, r3
 800425a:	653b      	str	r3, [r7, #80]	; 0x50
 800425c:	4613      	mov	r3, r2
 800425e:	eb42 0303 	adc.w	r3, r2, r3
 8004262:	657b      	str	r3, [r7, #84]	; 0x54
 8004264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800426c:	f7fc fc0e 	bl	8000a8c <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <UART_SetConfig+0x2d4>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800428c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	64b9      	str	r1, [r7, #72]	; 0x48
 8004298:	415b      	adcs	r3, r3
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042a0:	4641      	mov	r1, r8
 80042a2:	eb12 0a01 	adds.w	sl, r2, r1
 80042a6:	4649      	mov	r1, r9
 80042a8:	eb43 0b01 	adc.w	fp, r3, r1
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c0:	4692      	mov	sl, r2
 80042c2:	469b      	mov	fp, r3
 80042c4:	4643      	mov	r3, r8
 80042c6:	eb1a 0303 	adds.w	r3, sl, r3
 80042ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042ce:	464b      	mov	r3, r9
 80042d0:	eb4b 0303 	adc.w	r3, fp, r3
 80042d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042ec:	460b      	mov	r3, r1
 80042ee:	18db      	adds	r3, r3, r3
 80042f0:	643b      	str	r3, [r7, #64]	; 0x40
 80042f2:	4613      	mov	r3, r2
 80042f4:	eb42 0303 	adc.w	r3, r2, r3
 80042f8:	647b      	str	r3, [r7, #68]	; 0x44
 80042fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004302:	f7fc fbc3 	bl	8000a8c <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4611      	mov	r1, r2
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <UART_SetConfig+0x2d4>)
 800430e:	fba3 2301 	umull	r2, r3, r3, r1
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	2264      	movs	r2, #100	; 0x64
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	1acb      	subs	r3, r1, r3
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004322:	4b36      	ldr	r3, [pc, #216]	; (80043fc <UART_SetConfig+0x2d4>)
 8004324:	fba3 2302 	umull	r2, r3, r3, r2
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004330:	441c      	add	r4, r3
 8004332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004336:	2200      	movs	r2, #0
 8004338:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800433c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	1891      	adds	r1, r2, r2
 800434a:	63b9      	str	r1, [r7, #56]	; 0x38
 800434c:	415b      	adcs	r3, r3
 800434e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004354:	4641      	mov	r1, r8
 8004356:	1851      	adds	r1, r2, r1
 8004358:	6339      	str	r1, [r7, #48]	; 0x30
 800435a:	4649      	mov	r1, r9
 800435c:	414b      	adcs	r3, r1
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800436c:	4659      	mov	r1, fp
 800436e:	00cb      	lsls	r3, r1, #3
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004376:	4651      	mov	r1, sl
 8004378:	00ca      	lsls	r2, r1, #3
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	4603      	mov	r3, r0
 8004380:	4642      	mov	r2, r8
 8004382:	189b      	adds	r3, r3, r2
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004388:	464b      	mov	r3, r9
 800438a:	460a      	mov	r2, r1
 800438c:	eb42 0303 	adc.w	r3, r2, r3
 8004390:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043a8:	460b      	mov	r3, r1
 80043aa:	18db      	adds	r3, r3, r3
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ae:	4613      	mov	r3, r2
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043be:	f7fc fb65 	bl	8000a8c <__aeabi_uldivmod>
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <UART_SetConfig+0x2d4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a08      	ldr	r2, [pc, #32]	; (80043fc <UART_SetConfig+0x2d4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 0207 	and.w	r2, r3, #7
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4422      	add	r2, r4
 80043ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f0:	e105      	b.n	80045fe <UART_SetConfig+0x4d6>
 80043f2:	bf00      	nop
 80043f4:	40011000 	.word	0x40011000
 80043f8:	40011400 	.word	0x40011400
 80043fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004404:	2200      	movs	r2, #0
 8004406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800440a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800440e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004412:	4642      	mov	r2, r8
 8004414:	464b      	mov	r3, r9
 8004416:	1891      	adds	r1, r2, r2
 8004418:	6239      	str	r1, [r7, #32]
 800441a:	415b      	adcs	r3, r3
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004422:	4641      	mov	r1, r8
 8004424:	1854      	adds	r4, r2, r1
 8004426:	4649      	mov	r1, r9
 8004428:	eb43 0501 	adc.w	r5, r3, r1
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	00eb      	lsls	r3, r5, #3
 8004436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800443a:	00e2      	lsls	r2, r4, #3
 800443c:	4614      	mov	r4, r2
 800443e:	461d      	mov	r5, r3
 8004440:	4643      	mov	r3, r8
 8004442:	18e3      	adds	r3, r4, r3
 8004444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004448:	464b      	mov	r3, r9
 800444a:	eb45 0303 	adc.w	r3, r5, r3
 800444e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800445e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800446e:	4629      	mov	r1, r5
 8004470:	008b      	lsls	r3, r1, #2
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004478:	4621      	mov	r1, r4
 800447a:	008a      	lsls	r2, r1, #2
 800447c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004480:	f7fc fb04 	bl	8000a8c <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4b60      	ldr	r3, [pc, #384]	; (800460c <UART_SetConfig+0x4e4>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011c      	lsls	r4, r3, #4
 8004492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004496:	2200      	movs	r2, #0
 8004498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800449c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	1891      	adds	r1, r2, r2
 80044aa:	61b9      	str	r1, [r7, #24]
 80044ac:	415b      	adcs	r3, r3
 80044ae:	61fb      	str	r3, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	4641      	mov	r1, r8
 80044b6:	1851      	adds	r1, r2, r1
 80044b8:	6139      	str	r1, [r7, #16]
 80044ba:	4649      	mov	r1, r9
 80044bc:	414b      	adcs	r3, r1
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044cc:	4659      	mov	r1, fp
 80044ce:	00cb      	lsls	r3, r1, #3
 80044d0:	4651      	mov	r1, sl
 80044d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044d6:	4651      	mov	r1, sl
 80044d8:	00ca      	lsls	r2, r1, #3
 80044da:	4610      	mov	r0, r2
 80044dc:	4619      	mov	r1, r3
 80044de:	4603      	mov	r3, r0
 80044e0:	4642      	mov	r2, r8
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044e8:	464b      	mov	r3, r9
 80044ea:	460a      	mov	r2, r1
 80044ec:	eb42 0303 	adc.w	r3, r2, r3
 80044f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80044fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800451e:	f7fc fab5 	bl	8000a8c <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b39      	ldr	r3, [pc, #228]	; (800460c <UART_SetConfig+0x4e4>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a34      	ldr	r2, [pc, #208]	; (800460c <UART_SetConfig+0x4e4>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004546:	441c      	add	r4, r3
 8004548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454c:	2200      	movs	r2, #0
 800454e:	673b      	str	r3, [r7, #112]	; 0x70
 8004550:	677a      	str	r2, [r7, #116]	; 0x74
 8004552:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004556:	4642      	mov	r2, r8
 8004558:	464b      	mov	r3, r9
 800455a:	1891      	adds	r1, r2, r2
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	415b      	adcs	r3, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004566:	4641      	mov	r1, r8
 8004568:	1851      	adds	r1, r2, r1
 800456a:	6039      	str	r1, [r7, #0]
 800456c:	4649      	mov	r1, r9
 800456e:	414b      	adcs	r3, r1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800457e:	4659      	mov	r1, fp
 8004580:	00cb      	lsls	r3, r1, #3
 8004582:	4651      	mov	r1, sl
 8004584:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004588:	4651      	mov	r1, sl
 800458a:	00ca      	lsls	r2, r1, #3
 800458c:	4610      	mov	r0, r2
 800458e:	4619      	mov	r1, r3
 8004590:	4603      	mov	r3, r0
 8004592:	4642      	mov	r2, r8
 8004594:	189b      	adds	r3, r3, r2
 8004596:	66bb      	str	r3, [r7, #104]	; 0x68
 8004598:	464b      	mov	r3, r9
 800459a:	460a      	mov	r2, r1
 800459c:	eb42 0303 	adc.w	r3, r2, r3
 80045a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	663b      	str	r3, [r7, #96]	; 0x60
 80045ac:	667a      	str	r2, [r7, #100]	; 0x64
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ba:	4649      	mov	r1, r9
 80045bc:	008b      	lsls	r3, r1, #2
 80045be:	4641      	mov	r1, r8
 80045c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045c4:	4641      	mov	r1, r8
 80045c6:	008a      	lsls	r2, r1, #2
 80045c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045cc:	f7fc fa5e 	bl	8000a8c <__aeabi_uldivmod>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <UART_SetConfig+0x4e4>)
 80045d6:	fba3 1302 	umull	r1, r3, r3, r2
 80045da:	095b      	lsrs	r3, r3, #5
 80045dc:	2164      	movs	r1, #100	; 0x64
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	3332      	adds	r3, #50	; 0x32
 80045e8:	4a08      	ldr	r2, [pc, #32]	; (800460c <UART_SetConfig+0x4e4>)
 80045ea:	fba2 2303 	umull	r2, r3, r2, r3
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	f003 020f 	and.w	r2, r3, #15
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4422      	add	r2, r4
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004604:	46bd      	mov	sp, r7
 8004606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460a:	bf00      	nop
 800460c:	51eb851f 	.word	0x51eb851f

08004610 <__errno>:
 8004610:	4b01      	ldr	r3, [pc, #4]	; (8004618 <__errno+0x8>)
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f000 fc8e 	bl	8004f50 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08004fdc 	.word	0x08004fdc
 8004658:	08004fdc 	.word	0x08004fdc
 800465c:	08004fdc 	.word	0x08004fdc
 8004660:	08004fe0 	.word	0x08004fe0

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <siprintf>:
 8004674:	b40e      	push	{r1, r2, r3}
 8004676:	b500      	push	{lr}
 8004678:	b09c      	sub	sp, #112	; 0x70
 800467a:	ab1d      	add	r3, sp, #116	; 0x74
 800467c:	9002      	str	r0, [sp, #8]
 800467e:	9006      	str	r0, [sp, #24]
 8004680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004684:	4809      	ldr	r0, [pc, #36]	; (80046ac <siprintf+0x38>)
 8004686:	9107      	str	r1, [sp, #28]
 8004688:	9104      	str	r1, [sp, #16]
 800468a:	4909      	ldr	r1, [pc, #36]	; (80046b0 <siprintf+0x3c>)
 800468c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004690:	9105      	str	r1, [sp, #20]
 8004692:	6800      	ldr	r0, [r0, #0]
 8004694:	9301      	str	r3, [sp, #4]
 8004696:	a902      	add	r1, sp, #8
 8004698:	f000 f868 	bl	800476c <_svfiprintf_r>
 800469c:	9b02      	ldr	r3, [sp, #8]
 800469e:	2200      	movs	r2, #0
 80046a0:	701a      	strb	r2, [r3, #0]
 80046a2:	b01c      	add	sp, #112	; 0x70
 80046a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046a8:	b003      	add	sp, #12
 80046aa:	4770      	bx	lr
 80046ac:	2000000c 	.word	0x2000000c
 80046b0:	ffff0208 	.word	0xffff0208

080046b4 <__ssputs_r>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	688e      	ldr	r6, [r1, #8]
 80046ba:	429e      	cmp	r6, r3
 80046bc:	4682      	mov	sl, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	4690      	mov	r8, r2
 80046c2:	461f      	mov	r7, r3
 80046c4:	d838      	bhi.n	8004738 <__ssputs_r+0x84>
 80046c6:	898a      	ldrh	r2, [r1, #12]
 80046c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046cc:	d032      	beq.n	8004734 <__ssputs_r+0x80>
 80046ce:	6825      	ldr	r5, [r4, #0]
 80046d0:	6909      	ldr	r1, [r1, #16]
 80046d2:	eba5 0901 	sub.w	r9, r5, r1
 80046d6:	6965      	ldr	r5, [r4, #20]
 80046d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046e0:	3301      	adds	r3, #1
 80046e2:	444b      	add	r3, r9
 80046e4:	106d      	asrs	r5, r5, #1
 80046e6:	429d      	cmp	r5, r3
 80046e8:	bf38      	it	cc
 80046ea:	461d      	movcc	r5, r3
 80046ec:	0553      	lsls	r3, r2, #21
 80046ee:	d531      	bpl.n	8004754 <__ssputs_r+0xa0>
 80046f0:	4629      	mov	r1, r5
 80046f2:	f000 fb63 	bl	8004dbc <_malloc_r>
 80046f6:	4606      	mov	r6, r0
 80046f8:	b950      	cbnz	r0, 8004710 <__ssputs_r+0x5c>
 80046fa:	230c      	movs	r3, #12
 80046fc:	f8ca 3000 	str.w	r3, [sl]
 8004700:	89a3      	ldrh	r3, [r4, #12]
 8004702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	f04f 30ff 	mov.w	r0, #4294967295
 800470c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	464a      	mov	r2, r9
 8004714:	f000 fabe 	bl	8004c94 <memcpy>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800471e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	6126      	str	r6, [r4, #16]
 8004726:	6165      	str	r5, [r4, #20]
 8004728:	444e      	add	r6, r9
 800472a:	eba5 0509 	sub.w	r5, r5, r9
 800472e:	6026      	str	r6, [r4, #0]
 8004730:	60a5      	str	r5, [r4, #8]
 8004732:	463e      	mov	r6, r7
 8004734:	42be      	cmp	r6, r7
 8004736:	d900      	bls.n	800473a <__ssputs_r+0x86>
 8004738:	463e      	mov	r6, r7
 800473a:	6820      	ldr	r0, [r4, #0]
 800473c:	4632      	mov	r2, r6
 800473e:	4641      	mov	r1, r8
 8004740:	f000 fab6 	bl	8004cb0 <memmove>
 8004744:	68a3      	ldr	r3, [r4, #8]
 8004746:	1b9b      	subs	r3, r3, r6
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	4433      	add	r3, r6
 800474e:	6023      	str	r3, [r4, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e7db      	b.n	800470c <__ssputs_r+0x58>
 8004754:	462a      	mov	r2, r5
 8004756:	f000 fba5 	bl	8004ea4 <_realloc_r>
 800475a:	4606      	mov	r6, r0
 800475c:	2800      	cmp	r0, #0
 800475e:	d1e1      	bne.n	8004724 <__ssputs_r+0x70>
 8004760:	6921      	ldr	r1, [r4, #16]
 8004762:	4650      	mov	r0, sl
 8004764:	f000 fabe 	bl	8004ce4 <_free_r>
 8004768:	e7c7      	b.n	80046fa <__ssputs_r+0x46>
	...

0800476c <_svfiprintf_r>:
 800476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004770:	4698      	mov	r8, r3
 8004772:	898b      	ldrh	r3, [r1, #12]
 8004774:	061b      	lsls	r3, r3, #24
 8004776:	b09d      	sub	sp, #116	; 0x74
 8004778:	4607      	mov	r7, r0
 800477a:	460d      	mov	r5, r1
 800477c:	4614      	mov	r4, r2
 800477e:	d50e      	bpl.n	800479e <_svfiprintf_r+0x32>
 8004780:	690b      	ldr	r3, [r1, #16]
 8004782:	b963      	cbnz	r3, 800479e <_svfiprintf_r+0x32>
 8004784:	2140      	movs	r1, #64	; 0x40
 8004786:	f000 fb19 	bl	8004dbc <_malloc_r>
 800478a:	6028      	str	r0, [r5, #0]
 800478c:	6128      	str	r0, [r5, #16]
 800478e:	b920      	cbnz	r0, 800479a <_svfiprintf_r+0x2e>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f04f 30ff 	mov.w	r0, #4294967295
 8004798:	e0d1      	b.n	800493e <_svfiprintf_r+0x1d2>
 800479a:	2340      	movs	r3, #64	; 0x40
 800479c:	616b      	str	r3, [r5, #20]
 800479e:	2300      	movs	r3, #0
 80047a0:	9309      	str	r3, [sp, #36]	; 0x24
 80047a2:	2320      	movs	r3, #32
 80047a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80047ac:	2330      	movs	r3, #48	; 0x30
 80047ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004958 <_svfiprintf_r+0x1ec>
 80047b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047b6:	f04f 0901 	mov.w	r9, #1
 80047ba:	4623      	mov	r3, r4
 80047bc:	469a      	mov	sl, r3
 80047be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047c2:	b10a      	cbz	r2, 80047c8 <_svfiprintf_r+0x5c>
 80047c4:	2a25      	cmp	r2, #37	; 0x25
 80047c6:	d1f9      	bne.n	80047bc <_svfiprintf_r+0x50>
 80047c8:	ebba 0b04 	subs.w	fp, sl, r4
 80047cc:	d00b      	beq.n	80047e6 <_svfiprintf_r+0x7a>
 80047ce:	465b      	mov	r3, fp
 80047d0:	4622      	mov	r2, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	4638      	mov	r0, r7
 80047d6:	f7ff ff6d 	bl	80046b4 <__ssputs_r>
 80047da:	3001      	adds	r0, #1
 80047dc:	f000 80aa 	beq.w	8004934 <_svfiprintf_r+0x1c8>
 80047e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047e2:	445a      	add	r2, fp
 80047e4:	9209      	str	r2, [sp, #36]	; 0x24
 80047e6:	f89a 3000 	ldrb.w	r3, [sl]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80a2 	beq.w	8004934 <_svfiprintf_r+0x1c8>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295
 80047f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047fa:	f10a 0a01 	add.w	sl, sl, #1
 80047fe:	9304      	str	r3, [sp, #16]
 8004800:	9307      	str	r3, [sp, #28]
 8004802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004806:	931a      	str	r3, [sp, #104]	; 0x68
 8004808:	4654      	mov	r4, sl
 800480a:	2205      	movs	r2, #5
 800480c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004810:	4851      	ldr	r0, [pc, #324]	; (8004958 <_svfiprintf_r+0x1ec>)
 8004812:	f7fb fcfd 	bl	8000210 <memchr>
 8004816:	9a04      	ldr	r2, [sp, #16]
 8004818:	b9d8      	cbnz	r0, 8004852 <_svfiprintf_r+0xe6>
 800481a:	06d0      	lsls	r0, r2, #27
 800481c:	bf44      	itt	mi
 800481e:	2320      	movmi	r3, #32
 8004820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004824:	0711      	lsls	r1, r2, #28
 8004826:	bf44      	itt	mi
 8004828:	232b      	movmi	r3, #43	; 0x2b
 800482a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800482e:	f89a 3000 	ldrb.w	r3, [sl]
 8004832:	2b2a      	cmp	r3, #42	; 0x2a
 8004834:	d015      	beq.n	8004862 <_svfiprintf_r+0xf6>
 8004836:	9a07      	ldr	r2, [sp, #28]
 8004838:	4654      	mov	r4, sl
 800483a:	2000      	movs	r0, #0
 800483c:	f04f 0c0a 	mov.w	ip, #10
 8004840:	4621      	mov	r1, r4
 8004842:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004846:	3b30      	subs	r3, #48	; 0x30
 8004848:	2b09      	cmp	r3, #9
 800484a:	d94e      	bls.n	80048ea <_svfiprintf_r+0x17e>
 800484c:	b1b0      	cbz	r0, 800487c <_svfiprintf_r+0x110>
 800484e:	9207      	str	r2, [sp, #28]
 8004850:	e014      	b.n	800487c <_svfiprintf_r+0x110>
 8004852:	eba0 0308 	sub.w	r3, r0, r8
 8004856:	fa09 f303 	lsl.w	r3, r9, r3
 800485a:	4313      	orrs	r3, r2
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	46a2      	mov	sl, r4
 8004860:	e7d2      	b.n	8004808 <_svfiprintf_r+0x9c>
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	1d19      	adds	r1, r3, #4
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	9103      	str	r1, [sp, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	bfbb      	ittet	lt
 800486e:	425b      	neglt	r3, r3
 8004870:	f042 0202 	orrlt.w	r2, r2, #2
 8004874:	9307      	strge	r3, [sp, #28]
 8004876:	9307      	strlt	r3, [sp, #28]
 8004878:	bfb8      	it	lt
 800487a:	9204      	strlt	r2, [sp, #16]
 800487c:	7823      	ldrb	r3, [r4, #0]
 800487e:	2b2e      	cmp	r3, #46	; 0x2e
 8004880:	d10c      	bne.n	800489c <_svfiprintf_r+0x130>
 8004882:	7863      	ldrb	r3, [r4, #1]
 8004884:	2b2a      	cmp	r3, #42	; 0x2a
 8004886:	d135      	bne.n	80048f4 <_svfiprintf_r+0x188>
 8004888:	9b03      	ldr	r3, [sp, #12]
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	9203      	str	r2, [sp, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	bfb8      	it	lt
 8004894:	f04f 33ff 	movlt.w	r3, #4294967295
 8004898:	3402      	adds	r4, #2
 800489a:	9305      	str	r3, [sp, #20]
 800489c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004968 <_svfiprintf_r+0x1fc>
 80048a0:	7821      	ldrb	r1, [r4, #0]
 80048a2:	2203      	movs	r2, #3
 80048a4:	4650      	mov	r0, sl
 80048a6:	f7fb fcb3 	bl	8000210 <memchr>
 80048aa:	b140      	cbz	r0, 80048be <_svfiprintf_r+0x152>
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	eba0 000a 	sub.w	r0, r0, sl
 80048b2:	fa03 f000 	lsl.w	r0, r3, r0
 80048b6:	9b04      	ldr	r3, [sp, #16]
 80048b8:	4303      	orrs	r3, r0
 80048ba:	3401      	adds	r4, #1
 80048bc:	9304      	str	r3, [sp, #16]
 80048be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c2:	4826      	ldr	r0, [pc, #152]	; (800495c <_svfiprintf_r+0x1f0>)
 80048c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048c8:	2206      	movs	r2, #6
 80048ca:	f7fb fca1 	bl	8000210 <memchr>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d038      	beq.n	8004944 <_svfiprintf_r+0x1d8>
 80048d2:	4b23      	ldr	r3, [pc, #140]	; (8004960 <_svfiprintf_r+0x1f4>)
 80048d4:	bb1b      	cbnz	r3, 800491e <_svfiprintf_r+0x1b2>
 80048d6:	9b03      	ldr	r3, [sp, #12]
 80048d8:	3307      	adds	r3, #7
 80048da:	f023 0307 	bic.w	r3, r3, #7
 80048de:	3308      	adds	r3, #8
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	4433      	add	r3, r6
 80048e6:	9309      	str	r3, [sp, #36]	; 0x24
 80048e8:	e767      	b.n	80047ba <_svfiprintf_r+0x4e>
 80048ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80048ee:	460c      	mov	r4, r1
 80048f0:	2001      	movs	r0, #1
 80048f2:	e7a5      	b.n	8004840 <_svfiprintf_r+0xd4>
 80048f4:	2300      	movs	r3, #0
 80048f6:	3401      	adds	r4, #1
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	4619      	mov	r1, r3
 80048fc:	f04f 0c0a 	mov.w	ip, #10
 8004900:	4620      	mov	r0, r4
 8004902:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004906:	3a30      	subs	r2, #48	; 0x30
 8004908:	2a09      	cmp	r2, #9
 800490a:	d903      	bls.n	8004914 <_svfiprintf_r+0x1a8>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0c5      	beq.n	800489c <_svfiprintf_r+0x130>
 8004910:	9105      	str	r1, [sp, #20]
 8004912:	e7c3      	b.n	800489c <_svfiprintf_r+0x130>
 8004914:	fb0c 2101 	mla	r1, ip, r1, r2
 8004918:	4604      	mov	r4, r0
 800491a:	2301      	movs	r3, #1
 800491c:	e7f0      	b.n	8004900 <_svfiprintf_r+0x194>
 800491e:	ab03      	add	r3, sp, #12
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	462a      	mov	r2, r5
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <_svfiprintf_r+0x1f8>)
 8004926:	a904      	add	r1, sp, #16
 8004928:	4638      	mov	r0, r7
 800492a:	f3af 8000 	nop.w
 800492e:	1c42      	adds	r2, r0, #1
 8004930:	4606      	mov	r6, r0
 8004932:	d1d6      	bne.n	80048e2 <_svfiprintf_r+0x176>
 8004934:	89ab      	ldrh	r3, [r5, #12]
 8004936:	065b      	lsls	r3, r3, #25
 8004938:	f53f af2c 	bmi.w	8004794 <_svfiprintf_r+0x28>
 800493c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800493e:	b01d      	add	sp, #116	; 0x74
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	ab03      	add	r3, sp, #12
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	462a      	mov	r2, r5
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <_svfiprintf_r+0x1f8>)
 800494c:	a904      	add	r1, sp, #16
 800494e:	4638      	mov	r0, r7
 8004950:	f000 f87a 	bl	8004a48 <_printf_i>
 8004954:	e7eb      	b.n	800492e <_svfiprintf_r+0x1c2>
 8004956:	bf00      	nop
 8004958:	08004fa0 	.word	0x08004fa0
 800495c:	08004faa 	.word	0x08004faa
 8004960:	00000000 	.word	0x00000000
 8004964:	080046b5 	.word	0x080046b5
 8004968:	08004fa6 	.word	0x08004fa6

0800496c <_printf_common>:
 800496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004970:	4616      	mov	r6, r2
 8004972:	4699      	mov	r9, r3
 8004974:	688a      	ldr	r2, [r1, #8]
 8004976:	690b      	ldr	r3, [r1, #16]
 8004978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800497c:	4293      	cmp	r3, r2
 800497e:	bfb8      	it	lt
 8004980:	4613      	movlt	r3, r2
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004988:	4607      	mov	r7, r0
 800498a:	460c      	mov	r4, r1
 800498c:	b10a      	cbz	r2, 8004992 <_printf_common+0x26>
 800498e:	3301      	adds	r3, #1
 8004990:	6033      	str	r3, [r6, #0]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	0699      	lsls	r1, r3, #26
 8004996:	bf42      	ittt	mi
 8004998:	6833      	ldrmi	r3, [r6, #0]
 800499a:	3302      	addmi	r3, #2
 800499c:	6033      	strmi	r3, [r6, #0]
 800499e:	6825      	ldr	r5, [r4, #0]
 80049a0:	f015 0506 	ands.w	r5, r5, #6
 80049a4:	d106      	bne.n	80049b4 <_printf_common+0x48>
 80049a6:	f104 0a19 	add.w	sl, r4, #25
 80049aa:	68e3      	ldr	r3, [r4, #12]
 80049ac:	6832      	ldr	r2, [r6, #0]
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	dc26      	bgt.n	8004a02 <_printf_common+0x96>
 80049b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049b8:	1e13      	subs	r3, r2, #0
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	bf18      	it	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	0692      	lsls	r2, r2, #26
 80049c2:	d42b      	bmi.n	8004a1c <_printf_common+0xb0>
 80049c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d01e      	beq.n	8004a10 <_printf_common+0xa4>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	68e5      	ldr	r5, [r4, #12]
 80049d6:	6832      	ldr	r2, [r6, #0]
 80049d8:	f003 0306 	and.w	r3, r3, #6
 80049dc:	2b04      	cmp	r3, #4
 80049de:	bf08      	it	eq
 80049e0:	1aad      	subeq	r5, r5, r2
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	6922      	ldr	r2, [r4, #16]
 80049e6:	bf0c      	ite	eq
 80049e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049ec:	2500      	movne	r5, #0
 80049ee:	4293      	cmp	r3, r2
 80049f0:	bfc4      	itt	gt
 80049f2:	1a9b      	subgt	r3, r3, r2
 80049f4:	18ed      	addgt	r5, r5, r3
 80049f6:	2600      	movs	r6, #0
 80049f8:	341a      	adds	r4, #26
 80049fa:	42b5      	cmp	r5, r6
 80049fc:	d11a      	bne.n	8004a34 <_printf_common+0xc8>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e008      	b.n	8004a14 <_printf_common+0xa8>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4649      	mov	r1, r9
 8004a08:	4638      	mov	r0, r7
 8004a0a:	47c0      	blx	r8
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	d103      	bne.n	8004a18 <_printf_common+0xac>
 8004a10:	f04f 30ff 	mov.w	r0, #4294967295
 8004a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a18:	3501      	adds	r5, #1
 8004a1a:	e7c6      	b.n	80049aa <_printf_common+0x3e>
 8004a1c:	18e1      	adds	r1, r4, r3
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	2030      	movs	r0, #48	; 0x30
 8004a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a26:	4422      	add	r2, r4
 8004a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a30:	3302      	adds	r3, #2
 8004a32:	e7c7      	b.n	80049c4 <_printf_common+0x58>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4622      	mov	r2, r4
 8004a38:	4649      	mov	r1, r9
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	47c0      	blx	r8
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d0e6      	beq.n	8004a10 <_printf_common+0xa4>
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7d9      	b.n	80049fa <_printf_common+0x8e>
	...

08004a48 <_printf_i>:
 8004a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	7e0f      	ldrb	r7, [r1, #24]
 8004a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a50:	2f78      	cmp	r7, #120	; 0x78
 8004a52:	4691      	mov	r9, r2
 8004a54:	4680      	mov	r8, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	469a      	mov	sl, r3
 8004a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a5e:	d807      	bhi.n	8004a70 <_printf_i+0x28>
 8004a60:	2f62      	cmp	r7, #98	; 0x62
 8004a62:	d80a      	bhi.n	8004a7a <_printf_i+0x32>
 8004a64:	2f00      	cmp	r7, #0
 8004a66:	f000 80d8 	beq.w	8004c1a <_printf_i+0x1d2>
 8004a6a:	2f58      	cmp	r7, #88	; 0x58
 8004a6c:	f000 80a3 	beq.w	8004bb6 <_printf_i+0x16e>
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a78:	e03a      	b.n	8004af0 <_printf_i+0xa8>
 8004a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a7e:	2b15      	cmp	r3, #21
 8004a80:	d8f6      	bhi.n	8004a70 <_printf_i+0x28>
 8004a82:	a101      	add	r1, pc, #4	; (adr r1, 8004a88 <_printf_i+0x40>)
 8004a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a88:	08004ae1 	.word	0x08004ae1
 8004a8c:	08004af5 	.word	0x08004af5
 8004a90:	08004a71 	.word	0x08004a71
 8004a94:	08004a71 	.word	0x08004a71
 8004a98:	08004a71 	.word	0x08004a71
 8004a9c:	08004a71 	.word	0x08004a71
 8004aa0:	08004af5 	.word	0x08004af5
 8004aa4:	08004a71 	.word	0x08004a71
 8004aa8:	08004a71 	.word	0x08004a71
 8004aac:	08004a71 	.word	0x08004a71
 8004ab0:	08004a71 	.word	0x08004a71
 8004ab4:	08004c01 	.word	0x08004c01
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004be3 	.word	0x08004be3
 8004ac0:	08004a71 	.word	0x08004a71
 8004ac4:	08004a71 	.word	0x08004a71
 8004ac8:	08004c23 	.word	0x08004c23
 8004acc:	08004a71 	.word	0x08004a71
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004a71 	.word	0x08004a71
 8004ad8:	08004a71 	.word	0x08004a71
 8004adc:	08004beb 	.word	0x08004beb
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	1d1a      	adds	r2, r3, #4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	602a      	str	r2, [r5, #0]
 8004ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0a3      	b.n	8004c3c <_printf_i+0x1f4>
 8004af4:	6820      	ldr	r0, [r4, #0]
 8004af6:	6829      	ldr	r1, [r5, #0]
 8004af8:	0606      	lsls	r6, r0, #24
 8004afa:	f101 0304 	add.w	r3, r1, #4
 8004afe:	d50a      	bpl.n	8004b16 <_printf_i+0xce>
 8004b00:	680e      	ldr	r6, [r1, #0]
 8004b02:	602b      	str	r3, [r5, #0]
 8004b04:	2e00      	cmp	r6, #0
 8004b06:	da03      	bge.n	8004b10 <_printf_i+0xc8>
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	4276      	negs	r6, r6
 8004b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b10:	485e      	ldr	r0, [pc, #376]	; (8004c8c <_printf_i+0x244>)
 8004b12:	230a      	movs	r3, #10
 8004b14:	e019      	b.n	8004b4a <_printf_i+0x102>
 8004b16:	680e      	ldr	r6, [r1, #0]
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b1e:	bf18      	it	ne
 8004b20:	b236      	sxthne	r6, r6
 8004b22:	e7ef      	b.n	8004b04 <_printf_i+0xbc>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	6820      	ldr	r0, [r4, #0]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	6029      	str	r1, [r5, #0]
 8004b2c:	0601      	lsls	r1, r0, #24
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0xec>
 8004b30:	681e      	ldr	r6, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <_printf_i+0xf2>
 8004b34:	0646      	lsls	r6, r0, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0xe8>
 8004b38:	881e      	ldrh	r6, [r3, #0]
 8004b3a:	4854      	ldr	r0, [pc, #336]	; (8004c8c <_printf_i+0x244>)
 8004b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8004b3e:	bf0c      	ite	eq
 8004b40:	2308      	moveq	r3, #8
 8004b42:	230a      	movne	r3, #10
 8004b44:	2100      	movs	r1, #0
 8004b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b4a:	6865      	ldr	r5, [r4, #4]
 8004b4c:	60a5      	str	r5, [r4, #8]
 8004b4e:	2d00      	cmp	r5, #0
 8004b50:	bfa2      	ittt	ge
 8004b52:	6821      	ldrge	r1, [r4, #0]
 8004b54:	f021 0104 	bicge.w	r1, r1, #4
 8004b58:	6021      	strge	r1, [r4, #0]
 8004b5a:	b90e      	cbnz	r6, 8004b60 <_printf_i+0x118>
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	d04d      	beq.n	8004bfc <_printf_i+0x1b4>
 8004b60:	4615      	mov	r5, r2
 8004b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b66:	fb03 6711 	mls	r7, r3, r1, r6
 8004b6a:	5dc7      	ldrb	r7, [r0, r7]
 8004b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b70:	4637      	mov	r7, r6
 8004b72:	42bb      	cmp	r3, r7
 8004b74:	460e      	mov	r6, r1
 8004b76:	d9f4      	bls.n	8004b62 <_printf_i+0x11a>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d10b      	bne.n	8004b94 <_printf_i+0x14c>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07de      	lsls	r6, r3, #31
 8004b80:	d508      	bpl.n	8004b94 <_printf_i+0x14c>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	6861      	ldr	r1, [r4, #4]
 8004b86:	4299      	cmp	r1, r3
 8004b88:	bfde      	ittt	le
 8004b8a:	2330      	movle	r3, #48	; 0x30
 8004b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b94:	1b52      	subs	r2, r2, r5
 8004b96:	6122      	str	r2, [r4, #16]
 8004b98:	f8cd a000 	str.w	sl, [sp]
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	aa03      	add	r2, sp, #12
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff fee2 	bl	800496c <_printf_common>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d14c      	bne.n	8004c46 <_printf_i+0x1fe>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	b004      	add	sp, #16
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	4835      	ldr	r0, [pc, #212]	; (8004c8c <_printf_i+0x244>)
 8004bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bbc:	6829      	ldr	r1, [r5, #0]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bc4:	6029      	str	r1, [r5, #0]
 8004bc6:	061d      	lsls	r5, r3, #24
 8004bc8:	d514      	bpl.n	8004bf4 <_printf_i+0x1ac>
 8004bca:	07df      	lsls	r7, r3, #31
 8004bcc:	bf44      	itt	mi
 8004bce:	f043 0320 	orrmi.w	r3, r3, #32
 8004bd2:	6023      	strmi	r3, [r4, #0]
 8004bd4:	b91e      	cbnz	r6, 8004bde <_printf_i+0x196>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	f023 0320 	bic.w	r3, r3, #32
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	2310      	movs	r3, #16
 8004be0:	e7b0      	b.n	8004b44 <_printf_i+0xfc>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f043 0320 	orr.w	r3, r3, #32
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	2378      	movs	r3, #120	; 0x78
 8004bec:	4828      	ldr	r0, [pc, #160]	; (8004c90 <_printf_i+0x248>)
 8004bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bf2:	e7e3      	b.n	8004bbc <_printf_i+0x174>
 8004bf4:	0659      	lsls	r1, r3, #25
 8004bf6:	bf48      	it	mi
 8004bf8:	b2b6      	uxthmi	r6, r6
 8004bfa:	e7e6      	b.n	8004bca <_printf_i+0x182>
 8004bfc:	4615      	mov	r5, r2
 8004bfe:	e7bb      	b.n	8004b78 <_printf_i+0x130>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6826      	ldr	r6, [r4, #0]
 8004c04:	6961      	ldr	r1, [r4, #20]
 8004c06:	1d18      	adds	r0, r3, #4
 8004c08:	6028      	str	r0, [r5, #0]
 8004c0a:	0635      	lsls	r5, r6, #24
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0x1cc>
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	e002      	b.n	8004c1a <_printf_i+0x1d2>
 8004c14:	0670      	lsls	r0, r6, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0x1c8>
 8004c18:	8019      	strh	r1, [r3, #0]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	4615      	mov	r5, r2
 8004c20:	e7ba      	b.n	8004b98 <_printf_i+0x150>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	1d1a      	adds	r2, r3, #4
 8004c26:	602a      	str	r2, [r5, #0]
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f7fb faee 	bl	8000210 <memchr>
 8004c34:	b108      	cbz	r0, 8004c3a <_printf_i+0x1f2>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c44:	e7a8      	b.n	8004b98 <_printf_i+0x150>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	47d0      	blx	sl
 8004c50:	3001      	adds	r0, #1
 8004c52:	d0ab      	beq.n	8004bac <_printf_i+0x164>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	079b      	lsls	r3, r3, #30
 8004c58:	d413      	bmi.n	8004c82 <_printf_i+0x23a>
 8004c5a:	68e0      	ldr	r0, [r4, #12]
 8004c5c:	9b03      	ldr	r3, [sp, #12]
 8004c5e:	4298      	cmp	r0, r3
 8004c60:	bfb8      	it	lt
 8004c62:	4618      	movlt	r0, r3
 8004c64:	e7a4      	b.n	8004bb0 <_printf_i+0x168>
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4649      	mov	r1, r9
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	47d0      	blx	sl
 8004c70:	3001      	adds	r0, #1
 8004c72:	d09b      	beq.n	8004bac <_printf_i+0x164>
 8004c74:	3501      	adds	r5, #1
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	1a5b      	subs	r3, r3, r1
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dcf2      	bgt.n	8004c66 <_printf_i+0x21e>
 8004c80:	e7eb      	b.n	8004c5a <_printf_i+0x212>
 8004c82:	2500      	movs	r5, #0
 8004c84:	f104 0619 	add.w	r6, r4, #25
 8004c88:	e7f5      	b.n	8004c76 <_printf_i+0x22e>
 8004c8a:	bf00      	nop
 8004c8c:	08004fb1 	.word	0x08004fb1
 8004c90:	08004fc2 	.word	0x08004fc2

08004c94 <memcpy>:
 8004c94:	440a      	add	r2, r1
 8004c96:	4291      	cmp	r1, r2
 8004c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c9c:	d100      	bne.n	8004ca0 <memcpy+0xc>
 8004c9e:	4770      	bx	lr
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004caa:	4291      	cmp	r1, r2
 8004cac:	d1f9      	bne.n	8004ca2 <memcpy+0xe>
 8004cae:	bd10      	pop	{r4, pc}

08004cb0 <memmove>:
 8004cb0:	4288      	cmp	r0, r1
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	eb01 0402 	add.w	r4, r1, r2
 8004cb8:	d902      	bls.n	8004cc0 <memmove+0x10>
 8004cba:	4284      	cmp	r4, r0
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	d807      	bhi.n	8004cd0 <memmove+0x20>
 8004cc0:	1e43      	subs	r3, r0, #1
 8004cc2:	42a1      	cmp	r1, r4
 8004cc4:	d008      	beq.n	8004cd8 <memmove+0x28>
 8004cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cce:	e7f8      	b.n	8004cc2 <memmove+0x12>
 8004cd0:	4402      	add	r2, r0
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	428a      	cmp	r2, r1
 8004cd6:	d100      	bne.n	8004cda <memmove+0x2a>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ce2:	e7f7      	b.n	8004cd4 <memmove+0x24>

08004ce4 <_free_r>:
 8004ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ce6:	2900      	cmp	r1, #0
 8004ce8:	d044      	beq.n	8004d74 <_free_r+0x90>
 8004cea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cee:	9001      	str	r0, [sp, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f1a1 0404 	sub.w	r4, r1, #4
 8004cf6:	bfb8      	it	lt
 8004cf8:	18e4      	addlt	r4, r4, r3
 8004cfa:	f000 f913 	bl	8004f24 <__malloc_lock>
 8004cfe:	4a1e      	ldr	r2, [pc, #120]	; (8004d78 <_free_r+0x94>)
 8004d00:	9801      	ldr	r0, [sp, #4]
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	b933      	cbnz	r3, 8004d14 <_free_r+0x30>
 8004d06:	6063      	str	r3, [r4, #4]
 8004d08:	6014      	str	r4, [r2, #0]
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	f000 b90e 	b.w	8004f30 <__malloc_unlock>
 8004d14:	42a3      	cmp	r3, r4
 8004d16:	d908      	bls.n	8004d2a <_free_r+0x46>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf01      	itttt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	1949      	addeq	r1, r1, r5
 8004d26:	6021      	streq	r1, [r4, #0]
 8004d28:	e7ed      	b.n	8004d06 <_free_r+0x22>
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	b10b      	cbz	r3, 8004d34 <_free_r+0x50>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d9fa      	bls.n	8004d2a <_free_r+0x46>
 8004d34:	6811      	ldr	r1, [r2, #0]
 8004d36:	1855      	adds	r5, r2, r1
 8004d38:	42a5      	cmp	r5, r4
 8004d3a:	d10b      	bne.n	8004d54 <_free_r+0x70>
 8004d3c:	6824      	ldr	r4, [r4, #0]
 8004d3e:	4421      	add	r1, r4
 8004d40:	1854      	adds	r4, r2, r1
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	6011      	str	r1, [r2, #0]
 8004d46:	d1e0      	bne.n	8004d0a <_free_r+0x26>
 8004d48:	681c      	ldr	r4, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	6053      	str	r3, [r2, #4]
 8004d4e:	4421      	add	r1, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	e7da      	b.n	8004d0a <_free_r+0x26>
 8004d54:	d902      	bls.n	8004d5c <_free_r+0x78>
 8004d56:	230c      	movs	r3, #12
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	e7d6      	b.n	8004d0a <_free_r+0x26>
 8004d5c:	6825      	ldr	r5, [r4, #0]
 8004d5e:	1961      	adds	r1, r4, r5
 8004d60:	428b      	cmp	r3, r1
 8004d62:	bf04      	itt	eq
 8004d64:	6819      	ldreq	r1, [r3, #0]
 8004d66:	685b      	ldreq	r3, [r3, #4]
 8004d68:	6063      	str	r3, [r4, #4]
 8004d6a:	bf04      	itt	eq
 8004d6c:	1949      	addeq	r1, r1, r5
 8004d6e:	6021      	streq	r1, [r4, #0]
 8004d70:	6054      	str	r4, [r2, #4]
 8004d72:	e7ca      	b.n	8004d0a <_free_r+0x26>
 8004d74:	b003      	add	sp, #12
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	20000130 	.word	0x20000130

08004d7c <sbrk_aligned>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4e0e      	ldr	r6, [pc, #56]	; (8004db8 <sbrk_aligned+0x3c>)
 8004d80:	460c      	mov	r4, r1
 8004d82:	6831      	ldr	r1, [r6, #0]
 8004d84:	4605      	mov	r5, r0
 8004d86:	b911      	cbnz	r1, 8004d8e <sbrk_aligned+0x12>
 8004d88:	f000 f8bc 	bl	8004f04 <_sbrk_r>
 8004d8c:	6030      	str	r0, [r6, #0]
 8004d8e:	4621      	mov	r1, r4
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 f8b7 	bl	8004f04 <_sbrk_r>
 8004d96:	1c43      	adds	r3, r0, #1
 8004d98:	d00a      	beq.n	8004db0 <sbrk_aligned+0x34>
 8004d9a:	1cc4      	adds	r4, r0, #3
 8004d9c:	f024 0403 	bic.w	r4, r4, #3
 8004da0:	42a0      	cmp	r0, r4
 8004da2:	d007      	beq.n	8004db4 <sbrk_aligned+0x38>
 8004da4:	1a21      	subs	r1, r4, r0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f000 f8ac 	bl	8004f04 <_sbrk_r>
 8004dac:	3001      	adds	r0, #1
 8004dae:	d101      	bne.n	8004db4 <sbrk_aligned+0x38>
 8004db0:	f04f 34ff 	mov.w	r4, #4294967295
 8004db4:	4620      	mov	r0, r4
 8004db6:	bd70      	pop	{r4, r5, r6, pc}
 8004db8:	20000134 	.word	0x20000134

08004dbc <_malloc_r>:
 8004dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc0:	1ccd      	adds	r5, r1, #3
 8004dc2:	f025 0503 	bic.w	r5, r5, #3
 8004dc6:	3508      	adds	r5, #8
 8004dc8:	2d0c      	cmp	r5, #12
 8004dca:	bf38      	it	cc
 8004dcc:	250c      	movcc	r5, #12
 8004dce:	2d00      	cmp	r5, #0
 8004dd0:	4607      	mov	r7, r0
 8004dd2:	db01      	blt.n	8004dd8 <_malloc_r+0x1c>
 8004dd4:	42a9      	cmp	r1, r5
 8004dd6:	d905      	bls.n	8004de4 <_malloc_r+0x28>
 8004dd8:	230c      	movs	r3, #12
 8004dda:	603b      	str	r3, [r7, #0]
 8004ddc:	2600      	movs	r6, #0
 8004dde:	4630      	mov	r0, r6
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	4e2e      	ldr	r6, [pc, #184]	; (8004ea0 <_malloc_r+0xe4>)
 8004de6:	f000 f89d 	bl	8004f24 <__malloc_lock>
 8004dea:	6833      	ldr	r3, [r6, #0]
 8004dec:	461c      	mov	r4, r3
 8004dee:	bb34      	cbnz	r4, 8004e3e <_malloc_r+0x82>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4638      	mov	r0, r7
 8004df4:	f7ff ffc2 	bl	8004d7c <sbrk_aligned>
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	d14d      	bne.n	8004e9a <_malloc_r+0xde>
 8004dfe:	6834      	ldr	r4, [r6, #0]
 8004e00:	4626      	mov	r6, r4
 8004e02:	2e00      	cmp	r6, #0
 8004e04:	d140      	bne.n	8004e88 <_malloc_r+0xcc>
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	eb04 0803 	add.w	r8, r4, r3
 8004e10:	f000 f878 	bl	8004f04 <_sbrk_r>
 8004e14:	4580      	cmp	r8, r0
 8004e16:	d13a      	bne.n	8004e8e <_malloc_r+0xd2>
 8004e18:	6821      	ldr	r1, [r4, #0]
 8004e1a:	3503      	adds	r5, #3
 8004e1c:	1a6d      	subs	r5, r5, r1
 8004e1e:	f025 0503 	bic.w	r5, r5, #3
 8004e22:	3508      	adds	r5, #8
 8004e24:	2d0c      	cmp	r5, #12
 8004e26:	bf38      	it	cc
 8004e28:	250c      	movcc	r5, #12
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	f7ff ffa5 	bl	8004d7c <sbrk_aligned>
 8004e32:	3001      	adds	r0, #1
 8004e34:	d02b      	beq.n	8004e8e <_malloc_r+0xd2>
 8004e36:	6823      	ldr	r3, [r4, #0]
 8004e38:	442b      	add	r3, r5
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e00e      	b.n	8004e5c <_malloc_r+0xa0>
 8004e3e:	6822      	ldr	r2, [r4, #0]
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	d41e      	bmi.n	8004e82 <_malloc_r+0xc6>
 8004e44:	2a0b      	cmp	r2, #11
 8004e46:	d916      	bls.n	8004e76 <_malloc_r+0xba>
 8004e48:	1961      	adds	r1, r4, r5
 8004e4a:	42a3      	cmp	r3, r4
 8004e4c:	6025      	str	r5, [r4, #0]
 8004e4e:	bf18      	it	ne
 8004e50:	6059      	strne	r1, [r3, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	bf08      	it	eq
 8004e56:	6031      	streq	r1, [r6, #0]
 8004e58:	5162      	str	r2, [r4, r5]
 8004e5a:	604b      	str	r3, [r1, #4]
 8004e5c:	4638      	mov	r0, r7
 8004e5e:	f104 060b 	add.w	r6, r4, #11
 8004e62:	f000 f865 	bl	8004f30 <__malloc_unlock>
 8004e66:	f026 0607 	bic.w	r6, r6, #7
 8004e6a:	1d23      	adds	r3, r4, #4
 8004e6c:	1af2      	subs	r2, r6, r3
 8004e6e:	d0b6      	beq.n	8004dde <_malloc_r+0x22>
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	50a3      	str	r3, [r4, r2]
 8004e74:	e7b3      	b.n	8004dde <_malloc_r+0x22>
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	bf0c      	ite	eq
 8004e7c:	6032      	streq	r2, [r6, #0]
 8004e7e:	605a      	strne	r2, [r3, #4]
 8004e80:	e7ec      	b.n	8004e5c <_malloc_r+0xa0>
 8004e82:	4623      	mov	r3, r4
 8004e84:	6864      	ldr	r4, [r4, #4]
 8004e86:	e7b2      	b.n	8004dee <_malloc_r+0x32>
 8004e88:	4634      	mov	r4, r6
 8004e8a:	6876      	ldr	r6, [r6, #4]
 8004e8c:	e7b9      	b.n	8004e02 <_malloc_r+0x46>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	4638      	mov	r0, r7
 8004e94:	f000 f84c 	bl	8004f30 <__malloc_unlock>
 8004e98:	e7a1      	b.n	8004dde <_malloc_r+0x22>
 8004e9a:	6025      	str	r5, [r4, #0]
 8004e9c:	e7de      	b.n	8004e5c <_malloc_r+0xa0>
 8004e9e:	bf00      	nop
 8004ea0:	20000130 	.word	0x20000130

08004ea4 <_realloc_r>:
 8004ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea8:	4680      	mov	r8, r0
 8004eaa:	4614      	mov	r4, r2
 8004eac:	460e      	mov	r6, r1
 8004eae:	b921      	cbnz	r1, 8004eba <_realloc_r+0x16>
 8004eb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	f7ff bf81 	b.w	8004dbc <_malloc_r>
 8004eba:	b92a      	cbnz	r2, 8004ec8 <_realloc_r+0x24>
 8004ebc:	f7ff ff12 	bl	8004ce4 <_free_r>
 8004ec0:	4625      	mov	r5, r4
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec8:	f000 f838 	bl	8004f3c <_malloc_usable_size_r>
 8004ecc:	4284      	cmp	r4, r0
 8004ece:	4607      	mov	r7, r0
 8004ed0:	d802      	bhi.n	8004ed8 <_realloc_r+0x34>
 8004ed2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ed6:	d812      	bhi.n	8004efe <_realloc_r+0x5a>
 8004ed8:	4621      	mov	r1, r4
 8004eda:	4640      	mov	r0, r8
 8004edc:	f7ff ff6e 	bl	8004dbc <_malloc_r>
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0ed      	beq.n	8004ec2 <_realloc_r+0x1e>
 8004ee6:	42bc      	cmp	r4, r7
 8004ee8:	4622      	mov	r2, r4
 8004eea:	4631      	mov	r1, r6
 8004eec:	bf28      	it	cs
 8004eee:	463a      	movcs	r2, r7
 8004ef0:	f7ff fed0 	bl	8004c94 <memcpy>
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	f7ff fef4 	bl	8004ce4 <_free_r>
 8004efc:	e7e1      	b.n	8004ec2 <_realloc_r+0x1e>
 8004efe:	4635      	mov	r5, r6
 8004f00:	e7df      	b.n	8004ec2 <_realloc_r+0x1e>
	...

08004f04 <_sbrk_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d06      	ldr	r5, [pc, #24]	; (8004f20 <_sbrk_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fc faa8 	bl	8001464 <_sbrk>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_sbrk_r+0x1a>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_sbrk_r+0x1a>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	20000138 	.word	0x20000138

08004f24 <__malloc_lock>:
 8004f24:	4801      	ldr	r0, [pc, #4]	; (8004f2c <__malloc_lock+0x8>)
 8004f26:	f000 b811 	b.w	8004f4c <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	2000013c 	.word	0x2000013c

08004f30 <__malloc_unlock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_unlock+0x8>)
 8004f32:	f000 b80c 	b.w	8004f4e <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	2000013c 	.word	0x2000013c

08004f3c <_malloc_usable_size_r>:
 8004f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f40:	1f18      	subs	r0, r3, #4
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	bfbc      	itt	lt
 8004f46:	580b      	ldrlt	r3, [r1, r0]
 8004f48:	18c0      	addlt	r0, r0, r3
 8004f4a:	4770      	bx	lr

08004f4c <__retarget_lock_acquire_recursive>:
 8004f4c:	4770      	bx	lr

08004f4e <__retarget_lock_release_recursive>:
 8004f4e:	4770      	bx	lr

08004f50 <_init>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr

08004f5c <_fini>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr
