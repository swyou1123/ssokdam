
thermometer_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006040  08006040  00016040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060dc  080060dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e4  080060e4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080060ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000078  08006164  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08006164  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5fd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b34  00000000  00000000  0002c6a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021985  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db10  00000000  00000000  00050f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb726  00000000  00000000  0005ea15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a13b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e90  00000000  00000000  0012a18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006028 	.word	0x08006028

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006028 	.word	0x08006028

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <mlx_read_temperature>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void mlx_read_temperature(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af02      	add	r7, sp, #8
	double temp_obj_1, temp_obj_2, temp_amb;
	mlx_read_buffer[mlx_cmd_pointer]=mlx_cmd_amb;
 8000b86:	4b6e      	ldr	r3, [pc, #440]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000b88:	2206      	movs	r2, #6
 8000b8a:	705a      	strb	r2, [r3, #1]

	HAL_I2C_Mem_Read_IT(&hi2c1,(uint16_t)MLX90614_addr<<1,mlx_cmd_amb,I2C_MEMADD_SIZE_8BIT,
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	4b6c      	ldr	r3, [pc, #432]	; (8000d44 <mlx_read_temperature+0x1c4>)
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	2206      	movs	r2, #6
 8000b98:	21b4      	movs	r1, #180	; 0xb4
 8000b9a:	486b      	ldr	r0, [pc, #428]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000b9c:	f001 fb42 	bl	8002224 <HAL_I2C_Mem_Read_IT>
			(uint8_t *)&mlx_read_buffer[3],3);

	while(HAL_I2C_GetState(&hi2c1)!=HAL_I2C_STATE_READY)
 8000ba0:	bf00      	nop
 8000ba2:	4869      	ldr	r0, [pc, #420]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000ba4:	f001 fe7c 	bl	80028a0 <HAL_I2C_GetState>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b20      	cmp	r3, #32
 8000bac:	d1f9      	bne.n	8000ba2 <mlx_read_temperature+0x22>
	{

	}
	temp_amb=(mlx_read_buffer[4]<<8|mlx_read_buffer[3]);
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	021b      	lsls	r3, r3, #8
 8000bb4:	4a62      	ldr	r2, [pc, #392]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000bb6:	78d2      	ldrb	r2, [r2, #3]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fdf4 	bl	80007a8 <__aeabi_i2d>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp_amb=(temp_amb*0.02)-273.15;
 8000bc8:	a359      	add	r3, pc, #356	; (adr r3, 8000d30 <mlx_read_temperature+0x1b0>)
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bd2:	f7ff fb6d 	bl	80002b0 <__aeabi_dmul>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	4610      	mov	r0, r2
 8000bdc:	4619      	mov	r1, r3
 8000bde:	a356      	add	r3, pc, #344	; (adr r3, 8000d38 <mlx_read_temperature+0x1b8>)
 8000be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be4:	f7ff fc92 	bl	800050c <__aeabi_dsub>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	e9c7 2304 	strd	r2, r3, [r7, #16]

	memset(uart_buf,0,30);
 8000bf0:	221e      	movs	r2, #30
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4855      	ldr	r0, [pc, #340]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000bf6:	f004 fda1 	bl	800573c <memset>
	sprintf(uart_buf, "amb : %.2lf\n\r", temp_amb);
 8000bfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bfe:	4954      	ldr	r1, [pc, #336]	; (8000d50 <mlx_read_temperature+0x1d0>)
 8000c00:	4852      	ldr	r0, [pc, #328]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000c02:	f004 fda3 	bl	800574c <siprintf>
	HAL_UART_Transmit_IT(&huart2, uart_buf, sizeof(uart_buf));
 8000c06:	221e      	movs	r2, #30
 8000c08:	4950      	ldr	r1, [pc, #320]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000c0a:	4852      	ldr	r0, [pc, #328]	; (8000d54 <mlx_read_temperature+0x1d4>)
 8000c0c:	f003 fe61 	bl	80048d2 <HAL_UART_Transmit_IT>

	mlx_read_buffer[mlx_cmd_pointer]=mlx_cmd_obj_1;
 8000c10:	4b4b      	ldr	r3, [pc, #300]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000c12:	2207      	movs	r2, #7
 8000c14:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Read_IT(&hi2c1,(uint16_t)MLX90614_addr<<1,mlx_cmd_obj_1,I2C_MEMADD_SIZE_8BIT,
 8000c16:	2303      	movs	r3, #3
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	4b4a      	ldr	r3, [pc, #296]	; (8000d44 <mlx_read_temperature+0x1c4>)
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	2207      	movs	r2, #7
 8000c22:	21b4      	movs	r1, #180	; 0xb4
 8000c24:	4848      	ldr	r0, [pc, #288]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000c26:	f001 fafd 	bl	8002224 <HAL_I2C_Mem_Read_IT>
    	(uint8_t *)&mlx_read_buffer[3],3);
	while(HAL_I2C_GetState(&hi2c1)!=HAL_I2C_STATE_READY)
 8000c2a:	bf00      	nop
 8000c2c:	4846      	ldr	r0, [pc, #280]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000c2e:	f001 fe37 	bl	80028a0 <HAL_I2C_GetState>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d1f9      	bne.n	8000c2c <mlx_read_temperature+0xac>
	{

	}
	temp_obj_1=(mlx_read_buffer[4]<<8|mlx_read_buffer[3]);
 8000c38:	4b41      	ldr	r3, [pc, #260]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000c3a:	791b      	ldrb	r3, [r3, #4]
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000c40:	78d2      	ldrb	r2, [r2, #3]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fdaf 	bl	80007a8 <__aeabi_i2d>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp_obj_1=(temp_obj_1*0.02)-273.15;
 8000c52:	a337      	add	r3, pc, #220	; (adr r3, 8000d30 <mlx_read_temperature+0x1b0>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c5c:	f7ff fb28 	bl	80002b0 <__aeabi_dmul>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4610      	mov	r0, r2
 8000c66:	4619      	mov	r1, r3
 8000c68:	a333      	add	r3, pc, #204	; (adr r3, 8000d38 <mlx_read_temperature+0x1b8>)
 8000c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6e:	f7ff fc4d 	bl	800050c <__aeabi_dsub>
 8000c72:	4602      	mov	r2, r0
 8000c74:	460b      	mov	r3, r1
 8000c76:	e9c7 2302 	strd	r2, r3, [r7, #8]

	memset(uart_buf,0,30);
 8000c7a:	221e      	movs	r2, #30
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4833      	ldr	r0, [pc, #204]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000c80:	f004 fd5c 	bl	800573c <memset>
	sprintf(uart_buf, "obj1 : %.2lf\n\r", temp_obj_1);
 8000c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c88:	4933      	ldr	r1, [pc, #204]	; (8000d58 <mlx_read_temperature+0x1d8>)
 8000c8a:	4830      	ldr	r0, [pc, #192]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000c8c:	f004 fd5e 	bl	800574c <siprintf>
	HAL_UART_Transmit_IT(&huart2, uart_buf, sizeof(uart_buf));
 8000c90:	221e      	movs	r2, #30
 8000c92:	492e      	ldr	r1, [pc, #184]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000c94:	482f      	ldr	r0, [pc, #188]	; (8000d54 <mlx_read_temperature+0x1d4>)
 8000c96:	f003 fe1c 	bl	80048d2 <HAL_UART_Transmit_IT>

	/*
	Object 2 temperature, RAM-0x07
	*/
	mlx_read_buffer[mlx_cmd_pointer]=mlx_cmd_obj_2;
 8000c9a:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Mem_Read_IT(&hi2c1,(uint16_t)MLX90614_addr<<1,mlx_cmd_obj_2,I2C_MEMADD_SIZE_8BIT,
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <mlx_read_temperature+0x1c4>)
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2208      	movs	r2, #8
 8000cac:	21b4      	movs	r1, #180	; 0xb4
 8000cae:	4826      	ldr	r0, [pc, #152]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000cb0:	f001 fab8 	bl	8002224 <HAL_I2C_Mem_Read_IT>
    	(uint8_t *)&mlx_read_buffer[3],3);
	while(HAL_I2C_GetState(&hi2c1)!=HAL_I2C_STATE_READY)
 8000cb4:	bf00      	nop
 8000cb6:	4824      	ldr	r0, [pc, #144]	; (8000d48 <mlx_read_temperature+0x1c8>)
 8000cb8:	f001 fdf2 	bl	80028a0 <HAL_I2C_GetState>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b20      	cmp	r3, #32
 8000cc0:	d1f9      	bne.n	8000cb6 <mlx_read_temperature+0x136>
	{

	}
	temp_obj_2=(mlx_read_buffer[4]<<8|mlx_read_buffer[3]);
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	021b      	lsls	r3, r3, #8
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <mlx_read_temperature+0x1c0>)
 8000cca:	78d2      	ldrb	r2, [r2, #3]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd6a 	bl	80007a8 <__aeabi_i2d>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	e9c7 2300 	strd	r2, r3, [r7]
	temp_obj_2=(temp_obj_2*0.02)-273.15;
 8000cdc:	a314      	add	r3, pc, #80	; (adr r3, 8000d30 <mlx_read_temperature+0x1b0>)
 8000cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ce6:	f7ff fae3 	bl	80002b0 <__aeabi_dmul>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	a311      	add	r3, pc, #68	; (adr r3, 8000d38 <mlx_read_temperature+0x1b8>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f7ff fc08 	bl	800050c <__aeabi_dsub>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	e9c7 2300 	strd	r2, r3, [r7]

	memset(uart_buf,0,30);
 8000d04:	221e      	movs	r2, #30
 8000d06:	2100      	movs	r1, #0
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000d0a:	f004 fd17 	bl	800573c <memset>
	sprintf(uart_buf, "obj2 : %.2lf\n\r", temp_obj_2);
 8000d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d12:	4912      	ldr	r1, [pc, #72]	; (8000d5c <mlx_read_temperature+0x1dc>)
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000d16:	f004 fd19 	bl	800574c <siprintf>
	HAL_UART_Transmit_IT(&huart2, uart_buf, sizeof(uart_buf));
 8000d1a:	221e      	movs	r2, #30
 8000d1c:	490b      	ldr	r1, [pc, #44]	; (8000d4c <mlx_read_temperature+0x1cc>)
 8000d1e:	480d      	ldr	r0, [pc, #52]	; (8000d54 <mlx_read_temperature+0x1d4>)
 8000d20:	f003 fdd7 	bl	80048d2 <HAL_UART_Transmit_IT>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	47ae147b 	.word	0x47ae147b
 8000d34:	3f947ae1 	.word	0x3f947ae1
 8000d38:	66666666 	.word	0x66666666
 8000d3c:	40711266 	.word	0x40711266
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000003 	.word	0x20000003
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	2000012c 	.word	0x2000012c
 8000d50:	08006040 	.word	0x08006040
 8000d54:	200000e8 	.word	0x200000e8
 8000d58:	08006050 	.word	0x08006050
 8000d5c:	08006060 	.word	0x08006060

08000d60 <mlx_sleep>:

void mlx_sleep()
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
	uint8_t enter_sleep[2]={0xFF,0xE8};	//0xFF-Sleep CMD, 0xE8-PEC (0xB4+0xFF)
 8000d66:	f64e 03ff 	movw	r3, #59647	; 0xe8ff
 8000d6a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit_IT(&hi2c1,(uint16_t)MLX90614_addr<<1,(uint8_t *)&enter_sleep,2);
 8000d6c:	1d3a      	adds	r2, r7, #4
 8000d6e:	2302      	movs	r3, #2
 8000d70:	21b4      	movs	r1, #180	; 0xb4
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <mlx_sleep+0x30>)
 8000d74:	f001 f9b0 	bl	80020d8 <HAL_I2C_Master_Transmit_IT>
	while(HAL_I2C_GetState(&hi2c1)!=HAL_I2C_STATE_READY)
 8000d78:	bf00      	nop
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <mlx_sleep+0x30>)
 8000d7c:	f001 fd90 	bl	80028a0 <HAL_I2C_GetState>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b20      	cmp	r3, #32
 8000d84:	d1f9      	bne.n	8000d7a <mlx_sleep+0x1a>
	{
	}
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000094 	.word	0x20000094

08000d94 <mlx_wakeup>:

void mlx_wakeup()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0

	HAL_I2C_DeInit(&hi2c1);
 8000d9a:	4815      	ldr	r0, [pc, #84]	; (8000df0 <mlx_wakeup+0x5c>)
 8000d9c:	f001 f96c 	bl	8002078 <HAL_I2C_DeInit>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2180      	movs	r1, #128	; 0x80
 8000db2:	4810      	ldr	r0, [pc, #64]	; (8000df4 <mlx_wakeup+0x60>)
 8000db4:	f001 f802 	bl	8001dbc <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <mlx_wakeup+0x60>)
 8000dca:	f000 fd6f 	bl	80018ac <HAL_GPIO_Init>
	HAL_Delay(33);
 8000dce:	2021      	movs	r0, #33	; 0x21
 8000dd0:	f000 fb64 	bl	800149c <HAL_Delay>
	HAL_GPIO_DeInit(GPIOB,GPIO_PIN_7);
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <mlx_wakeup+0x60>)
 8000dd8:	f000 fefc 	bl	8001bd4 <HAL_GPIO_DeInit>

	HAL_I2C_Init(&hi2c1);
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <mlx_wakeup+0x5c>)
 8000dde:	f001 f807 	bl	8001df0 <HAL_I2C_Init>
	HAL_Delay(250);
 8000de2:	20fa      	movs	r0, #250	; 0xfa
 8000de4:	f000 fb5a 	bl	800149c <HAL_Delay>

}
 8000de8:	bf00      	nop
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000094 	.word	0x20000094
 8000df4:	40020400 	.word	0x40020400

08000df8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dfe:	f000 fadb 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e02:	f000 f841 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e06:	f000 f8f7 	bl	8000ff8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e0a:	f000 f89d 	bl	8000f48 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000e0e:	f000 f8c9 	bl	8000fa4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8000e12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e16:	f000 fb41 	bl	800149c <HAL_Delay>
  uint8_t str[] = "MLX90614\n\r";
 8000e1a:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <main+0x80>)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e20:	c303      	stmia	r3!, {r0, r1}
 8000e22:	801a      	strh	r2, [r3, #0]
 8000e24:	3302      	adds	r3, #2
 8000e26:	0c12      	lsrs	r2, r2, #16
 8000e28:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit_IT(&huart2, str, sizeof(str));
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	220b      	movs	r2, #11
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4812      	ldr	r0, [pc, #72]	; (8000e7c <main+0x84>)
 8000e32:	f003 fd4e 	bl	80048d2 <HAL_UART_Transmit_IT>
  HAL_Delay(100);
 8000e36:	2064      	movs	r0, #100	; 0x64
 8000e38:	f000 fb30 	bl	800149c <HAL_Delay>
  mlx_sleep();
 8000e3c:	f7ff ff90 	bl	8000d60 <mlx_sleep>
  mlx_wakeup();
 8000e40:	f7ff ffa8 	bl	8000d94 <mlx_wakeup>
  HAL_Delay(500);
 8000e44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e48:	f000 fb28 	bl	800149c <HAL_Delay>
  memset(uart_buf,0,30);
 8000e4c:	221e      	movs	r2, #30
 8000e4e:	2100      	movs	r1, #0
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <main+0x88>)
 8000e52:	f004 fc73 	bl	800573c <memset>
  sprintf(uart_buf, "temperature : ---\n\r");
 8000e56:	490b      	ldr	r1, [pc, #44]	; (8000e84 <main+0x8c>)
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <main+0x88>)
 8000e5a:	f004 fc77 	bl	800574c <siprintf>
  HAL_UART_Transmit_IT(&huart2, uart_buf, sizeof(uart_buf));
 8000e5e:	221e      	movs	r2, #30
 8000e60:	4907      	ldr	r1, [pc, #28]	; (8000e80 <main+0x88>)
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <main+0x84>)
 8000e64:	f003 fd35 	bl	80048d2 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mlx_read_temperature();
 8000e68:	f7ff fe8a 	bl	8000b80 <mlx_read_temperature>
	  HAL_Delay(1000);
 8000e6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e70:	f000 fb14 	bl	800149c <HAL_Delay>
	  mlx_read_temperature();
 8000e74:	e7f8      	b.n	8000e68 <main+0x70>
 8000e76:	bf00      	nop
 8000e78:	08006084 	.word	0x08006084
 8000e7c:	200000e8 	.word	0x200000e8
 8000e80:	2000012c 	.word	0x2000012c
 8000e84:	08006070 	.word	0x08006070

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	; 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2234      	movs	r2, #52	; 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fc50 	bl	800573c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb4:	4a22      	ldr	r2, [pc, #136]	; (8000f40 <SystemClock_Config+0xb8>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebc:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <SystemClock_Config+0xb8>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <SystemClock_Config+0xbc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ee4:	603b      	str	r3, [r7, #0]
 8000ee6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4618      	mov	r0, r3
 8000efe:	f003 f9fd 	bl	80042fc <HAL_RCC_OscConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f08:	f000 f89e 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 ff24 	bl	8003d74 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000f32:	f000 f889 	bl	8001048 <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_I2C1_Init+0x54>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f54:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_I2C1_Init+0x58>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f6c:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <MX_I2C1_Init+0x50>)
 8000f86:	f000 ff33 	bl	8001df0 <HAL_I2C_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f90:	f000 f85a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000094 	.word	0x20000094
 8000f9c:	40005400 	.word	0x40005400
 8000fa0:	000186a0 	.word	0x000186a0

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <MX_USART2_UART_Init+0x50>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_USART2_UART_Init+0x4c>)
 8000fdc:	f003 fc2c 	bl	8004838 <HAL_UART_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fe6:	f000 f82f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000e8 	.word	0x200000e8
 8000ff4:	40004400 	.word	0x40004400

08000ff8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <MX_GPIO_Init+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <MX_GPIO_Init+0x4c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <MX_GPIO_Init+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4b09      	ldr	r3, [pc, #36]	; (8001044 <MX_GPIO_Init+0x4c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a08      	ldr	r2, [pc, #32]	; (8001044 <MX_GPIO_Init+0x4c>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <MX_GPIO_Init+0x4c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	e7fe      	b.n	8001050 <Error_Handler+0x8>
	...

08001054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	; 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_I2C_MspInit+0xa4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d13b      	bne.n	800113e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <HAL_I2C_MspInit+0xa8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_I2C_MspInit+0xa8>)
 80010d0:	f043 0302 	orr.w	r3, r3, #2
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b1d      	ldr	r3, [pc, #116]	; (800114c <HAL_I2C_MspInit+0xa8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010e2:	23c0      	movs	r3, #192	; 0xc0
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e6:	2312      	movs	r3, #18
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	2303      	movs	r3, #3
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f2:	2304      	movs	r3, #4
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4814      	ldr	r0, [pc, #80]	; (8001150 <HAL_I2C_MspInit+0xac>)
 80010fe:	f000 fbd5 	bl	80018ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_I2C_MspInit+0xa8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a10      	ldr	r2, [pc, #64]	; (800114c <HAL_I2C_MspInit+0xa8>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <HAL_I2C_MspInit+0xa8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	201f      	movs	r0, #31
 8001124:	f000 fadd 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001128:	201f      	movs	r0, #31
 800112a:	f000 faf6 	bl	800171a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2020      	movs	r0, #32
 8001134:	f000 fad5 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001138:	2020      	movs	r0, #32
 800113a:	f000 faee 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40005400 	.word	0x40005400
 800114c:	40023800 	.word	0x40023800
 8001150:	40020400 	.word	0x40020400

08001154 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_I2C_MspDeInit+0x44>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d113      	bne.n	800118e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_I2C_MspDeInit+0x48>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_I2C_MspDeInit+0x48>)
 800116c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001172:	2140      	movs	r1, #64	; 0x40
 8001174:	480a      	ldr	r0, [pc, #40]	; (80011a0 <HAL_I2C_MspDeInit+0x4c>)
 8001176:	f000 fd2d 	bl	8001bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800117a:	2180      	movs	r1, #128	; 0x80
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <HAL_I2C_MspDeInit+0x4c>)
 800117e:	f000 fd29 	bl	8001bd4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001182:	201f      	movs	r0, #31
 8001184:	f000 fad7 	bl	8001736 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8001188:	2020      	movs	r0, #32
 800118a:	f000 fad4 	bl	8001736 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40005400 	.word	0x40005400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020400 	.word	0x40020400

080011a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_UART_MspInit+0x94>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d133      	bne.n	800122e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_UART_MspInit+0x98>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a1b      	ldr	r2, [pc, #108]	; (800123c <HAL_UART_MspInit+0x98>)
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <HAL_UART_MspInit+0x98>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_UART_MspInit+0x98>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <HAL_UART_MspInit+0x98>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_UART_MspInit+0x98>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fe:	230c      	movs	r3, #12
 8001200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120e:	2307      	movs	r3, #7
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <HAL_UART_MspInit+0x9c>)
 800121a:	f000 fb47 	bl	80018ac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	2026      	movs	r0, #38	; 0x26
 8001224:	f000 fa5d 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001228:	2026      	movs	r0, #38	; 0x26
 800122a:	f000 fa76 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	; 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004400 	.word	0x40004400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020000 	.word	0x40020000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001290:	f000 f8e4 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}

08001298 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <I2C1_EV_IRQHandler+0x10>)
 800129e:	f001 f87f 	bl	80023a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000094 	.word	0x20000094

080012ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <I2C1_ER_IRQHandler+0x10>)
 80012b2:	f001 f9e6 	bl	8002682 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000094 	.word	0x20000094

080012c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USART2_IRQHandler+0x10>)
 80012c6:	f003 fb49 	bl	800495c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000e8 	.word	0x200000e8

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f004 f9f0 	bl	80056e8 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	2000014c 	.word	0x2000014c
 800133c:	20000168 	.word	0x20000168

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f004 f9af 	bl	80056f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fd2f 	bl	8000df8 <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013a8:	080060ec 	.word	0x080060ec
  ldr r2, =_sbss
 80013ac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013b0:	20000164 	.word	0x20000164

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f973 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	200f      	movs	r0, #15
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fe32 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f999 	bl	8001752 <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f953 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000008 	.word	0x20000008
 8001454:	20000010 	.word	0x20000010
 8001458:	2000000c 	.word	0x2000000c

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000010 	.word	0x20000010
 8001480:	20000150 	.word	0x20000150

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000150 	.word	0x20000150

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000010 	.word	0x20000010

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	2b00      	cmp	r3, #0
 8001594:	db12      	blt.n	80015bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	f003 021f 	and.w	r2, r3, #31
 800159c:	490a      	ldr	r1, [pc, #40]	; (80015c8 <__NVIC_DisableIRQ+0x44>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	2001      	movs	r0, #1
 80015a6:	fa00 f202 	lsl.w	r2, r0, r2
 80015aa:	3320      	adds	r3, #32
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015b0:	f3bf 8f4f 	dsb	sy
}
 80015b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015b6:	f3bf 8f6f 	isb	sy
}
 80015ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff05 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff1a 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff0d 	bl	8001548 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff1d 	bl	8001584 <__NVIC_DisableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ff94 	bl	8001688 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001776:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001778:	f7ff fe84 	bl	8001484 <HAL_GetTick>
 800177c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d008      	beq.n	800179c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2280      	movs	r2, #128	; 0x80
 800178e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e052      	b.n	8001842 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0216 	bic.w	r2, r2, #22
 80017aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <HAL_DMA_Abort+0x62>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0208 	bic.w	r2, r2, #8
 80017da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ec:	e013      	b.n	8001816 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ee:	f7ff fe49 	bl	8001484 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b05      	cmp	r3, #5
 80017fa:	d90c      	bls.n	8001816 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2203      	movs	r2, #3
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e015      	b.n	8001842 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1e4      	bne.n	80017ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	223f      	movs	r2, #63	; 0x3f
 800182a:	409a      	lsls	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d004      	beq.n	8001868 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e00c      	b.n	8001882 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800189c:	b2db      	uxtb	r3, r3
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
 80018c6:	e165      	b.n	8001b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	f040 8154 	bne.w	8001b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d005      	beq.n	80018fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d130      	bne.n	8001960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001934:	2201      	movs	r2, #1
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	091b      	lsrs	r3, r3, #4
 800194a:	f003 0201 	and.w	r2, r3, #1
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b03      	cmp	r3, #3
 800196a:	d017      	beq.n	800199c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d123      	bne.n	80019f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	08da      	lsrs	r2, r3, #3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3208      	adds	r2, #8
 80019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	69b9      	ldr	r1, [r7, #24]
 80019ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0203 	and.w	r2, r3, #3
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80ae 	beq.w	8001b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5a      	ldr	r3, [pc, #360]	; (8001bac <HAL_GPIO_Init+0x300>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a4e:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	089b      	lsrs	r3, r3, #2
 8001a54:	3302      	adds	r3, #2
 8001a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	220f      	movs	r2, #15
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4f      	ldr	r2, [pc, #316]	; (8001bb4 <HAL_GPIO_Init+0x308>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x21a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	; (8001bb8 <HAL_GPIO_Init+0x30c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x216>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_GPIO_Init+0x310>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x212>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4c      	ldr	r2, [pc, #304]	; (8001bc0 <HAL_GPIO_Init+0x314>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x20e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4b      	ldr	r2, [pc, #300]	; (8001bc4 <HAL_GPIO_Init+0x318>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x20a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	; (8001bc8 <HAL_GPIO_Init+0x31c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x206>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_GPIO_Init+0x320>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x202>
 8001aaa:	2306      	movs	r3, #6
 8001aac:	e00c      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001aae:	2307      	movs	r3, #7
 8001ab0:	e00a      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ab2:	2305      	movs	r3, #5
 8001ab4:	e008      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	e006      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001aba:	2303      	movs	r3, #3
 8001abc:	e004      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e002      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_GPIO_Init+0x21c>
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	f002 0203 	and.w	r2, r2, #3
 8001ace:	0092      	lsls	r2, r2, #2
 8001ad0:	4093      	lsls	r3, r2
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad8:	4935      	ldr	r1, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x304>)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	3302      	adds	r3, #2
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ae6:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0a:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b34:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_GPIO_Init+0x324>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3301      	adds	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	f67f ae96 	bls.w	80018c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	bf00      	nop
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40021400 	.word	0x40021400
 8001bcc:	40021800 	.word	0x40021800
 8001bd0:	40013c00 	.word	0x40013c00

08001bd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e0c7      	b.n	8001d80 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	f040 80b7 	bne.w	8001d7a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c0c:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_GPIO_DeInit+0x1c4>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c18:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	220f      	movs	r2, #15
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <HAL_GPIO_DeInit+0x1c8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d025      	beq.n	8001c82 <HAL_GPIO_DeInit+0xae>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a59      	ldr	r2, [pc, #356]	; (8001da0 <HAL_GPIO_DeInit+0x1cc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d01f      	beq.n	8001c7e <HAL_GPIO_DeInit+0xaa>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_GPIO_DeInit+0x1d0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d019      	beq.n	8001c7a <HAL_GPIO_DeInit+0xa6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	; (8001da8 <HAL_GPIO_DeInit+0x1d4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d013      	beq.n	8001c76 <HAL_GPIO_DeInit+0xa2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	; (8001dac <HAL_GPIO_DeInit+0x1d8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00d      	beq.n	8001c72 <HAL_GPIO_DeInit+0x9e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <HAL_GPIO_DeInit+0x1dc>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <HAL_GPIO_DeInit+0x9a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <HAL_GPIO_DeInit+0x1e0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_GPIO_DeInit+0x96>
 8001c66:	2306      	movs	r3, #6
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_DeInit+0xb0>
 8001c82:	2300      	movs	r3, #0
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	68ba      	ldr	r2, [r7, #8]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d132      	bne.n	8001cfa <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c94:	4b48      	ldr	r3, [pc, #288]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4946      	ldr	r1, [pc, #280]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001ca2:	4b45      	ldr	r3, [pc, #276]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001ca4:	685a      	ldr	r2, [r3, #4]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	4943      	ldr	r1, [pc, #268]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001cac:	4013      	ands	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001cb0:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	493f      	ldr	r1, [pc, #252]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	493c      	ldr	r1, [pc, #240]	; (8001db8 <HAL_GPIO_DeInit+0x1e4>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <HAL_GPIO_DeInit+0x1c4>)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	43da      	mvns	r2, r3
 8001cec:	482a      	ldr	r0, [pc, #168]	; (8001d98 <HAL_GPIO_DeInit+0x1c4>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2103      	movs	r1, #3
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	220f      	movs	r2, #15
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	08d2      	lsrs	r2, r2, #3
 8001d30:	4019      	ands	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2103      	movs	r1, #3
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2101      	movs	r1, #1
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2103      	movs	r1, #3
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	401a      	ands	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f af34 	bls.w	8001bf0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40013800 	.word	0x40013800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40021400 	.word	0x40021400
 8001db4:	40021800 	.word	0x40021800
 8001db8:	40013c00 	.word	0x40013c00

08001dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dcc:	787b      	ldrb	r3, [r7, #1]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd8:	e003      	b.n	8001de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dda:	887b      	ldrh	r3, [r7, #2]
 8001ddc:	041a      	lsls	r2, r3, #16
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	619a      	str	r2, [r3, #24]
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e12b      	b.n	800205a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d106      	bne.n	8001e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff f944 	bl	80010a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2224      	movs	r2, #36	; 0x24
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0201 	bic.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e54:	f002 f880 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8001e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	4a81      	ldr	r2, [pc, #516]	; (8002064 <HAL_I2C_Init+0x274>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d807      	bhi.n	8001e74 <HAL_I2C_Init+0x84>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a80      	ldr	r2, [pc, #512]	; (8002068 <HAL_I2C_Init+0x278>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	bf94      	ite	ls
 8001e6c:	2301      	movls	r3, #1
 8001e6e:	2300      	movhi	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e006      	b.n	8001e82 <HAL_I2C_Init+0x92>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4a7d      	ldr	r2, [pc, #500]	; (800206c <HAL_I2C_Init+0x27c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0e7      	b.n	800205a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a78      	ldr	r2, [pc, #480]	; (8002070 <HAL_I2C_Init+0x280>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9b      	lsrs	r3, r3, #18
 8001e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a6a      	ldr	r2, [pc, #424]	; (8002064 <HAL_I2C_Init+0x274>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d802      	bhi.n	8001ec4 <HAL_I2C_Init+0xd4>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	e009      	b.n	8001ed8 <HAL_I2C_Init+0xe8>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001eca:	fb02 f303 	mul.w	r3, r2, r3
 8001ece:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_I2C_Init+0x284>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	099b      	lsrs	r3, r3, #6
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	495c      	ldr	r1, [pc, #368]	; (8002064 <HAL_I2C_Init+0x274>)
 8001ef4:	428b      	cmp	r3, r1
 8001ef6:	d819      	bhi.n	8001f2c <HAL_I2C_Init+0x13c>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e59      	subs	r1, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f0c:	400b      	ands	r3, r1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_I2C_Init+0x138>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1e59      	subs	r1, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f20:	3301      	adds	r3, #1
 8001f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f26:	e051      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e04f      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d111      	bne.n	8001f58 <HAL_I2C_Init+0x168>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e58      	subs	r0, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	440b      	add	r3, r1
 8001f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f46:	3301      	adds	r3, #1
 8001f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf0c      	ite	eq
 8001f50:	2301      	moveq	r3, #1
 8001f52:	2300      	movne	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	e012      	b.n	8001f7e <HAL_I2C_Init+0x18e>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1e58      	subs	r0, r3, #1
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	0099      	lsls	r1, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_Init+0x196>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e022      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10e      	bne.n	8001fac <HAL_I2C_Init+0x1bc>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e58      	subs	r0, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6859      	ldr	r1, [r3, #4]
 8001f96:	460b      	mov	r3, r1
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	440b      	add	r3, r1
 8001f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001faa:	e00f      	b.n	8001fcc <HAL_I2C_Init+0x1dc>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e58      	subs	r0, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6859      	ldr	r1, [r3, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	0099      	lsls	r1, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	6809      	ldr	r1, [r1, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6911      	ldr	r1, [r2, #16]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68d2      	ldr	r2, [r2, #12]
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	000186a0 	.word	0x000186a0
 8002068:	001e847f 	.word	0x001e847f
 800206c:	003d08ff 	.word	0x003d08ff
 8002070:	431bde83 	.word	0x431bde83
 8002074:	10624dd3 	.word	0x10624dd3

08002078 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e021      	b.n	80020ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2224      	movs	r2, #36	; 0x24
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff f856 	bl	8001154 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80020d8:	b480      	push	{r7}
 80020da:	b087      	sub	sp, #28
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	461a      	mov	r2, r3
 80020e4:	460b      	mov	r3, r1
 80020e6:	817b      	strh	r3, [r7, #10]
 80020e8:	4613      	mov	r3, r2
 80020ea:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b20      	cmp	r3, #32
 80020fa:	f040 8085 	bne.w	8002208 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_I2C_Master_Transmit_IT+0x140>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	08db      	lsrs	r3, r3, #3
 8002104:	4a45      	ldr	r2, [pc, #276]	; (800221c <HAL_I2C_Master_Transmit_IT+0x144>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a1a      	lsrs	r2, r3, #8
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	009a      	lsls	r2, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3b01      	subs	r3, #1
 800211c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e05b      	b.n	800220a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d0db      	beq.n	8002118 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_I2C_Master_Transmit_IT+0x96>
 800216a:	2302      	movs	r3, #2
 800216c:	e04d      	b.n	800220a <HAL_I2C_Master_Transmit_IT+0x132>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b01      	cmp	r3, #1
 8002182:	d007      	beq.n	8002194 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2221      	movs	r2, #33	; 0x21
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2210      	movs	r2, #16
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	893a      	ldrh	r2, [r7, #8]
 80021c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_I2C_Master_Transmit_IT+0x148>)
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80021d6:	897a      	ldrh	r2, [r7, #10]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80021f2:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002202:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	20000008 	.word	0x20000008
 800221c:	14f8b589 	.word	0x14f8b589
 8002220:	ffff0000 	.word	0xffff0000

08002224 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	4608      	mov	r0, r1
 800222e:	4611      	mov	r1, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4603      	mov	r3, r0
 8002234:	817b      	strh	r3, [r7, #10]
 8002236:	460b      	mov	r3, r1
 8002238:	813b      	strh	r3, [r7, #8]
 800223a:	4613      	mov	r3, r2
 800223c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b20      	cmp	r3, #32
 800224c:	f040 809a 	bne.w	8002384 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002250:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_I2C_Mem_Read_IT+0x170>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	4a50      	ldr	r2, [pc, #320]	; (8002398 <HAL_I2C_Mem_Read_IT+0x174>)
 8002258:	fba2 2303 	umull	r2, r3, r2, r3
 800225c:	0a1a      	lsrs	r2, r3, #8
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009a      	lsls	r2, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3b01      	subs	r3, #1
 800226e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	f043 0220 	orr.w	r2, r3, #32
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e070      	b.n	8002386 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d0db      	beq.n	800226a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_I2C_Mem_Read_IT+0x9c>
 80022bc:	2302      	movs	r3, #2
 80022be:	e062      	b.n	8002386 <HAL_I2C_Mem_Read_IT+0x162>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d007      	beq.n	80022e6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0201 	orr.w	r2, r2, #1
 80022e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022f4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2222      	movs	r2, #34	; 0x22
 80022fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2240      	movs	r2, #64	; 0x40
 8002302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <HAL_I2C_Mem_Read_IT+0x178>)
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8002328:	897a      	ldrh	r2, [r7, #10]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800232e:	893a      	ldrh	r2, [r7, #8]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800234e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800237e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8002380:	2300      	movs	r3, #0
 8002382:	e000      	b.n	8002386 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8002384:	2302      	movs	r3, #2
  }
}
 8002386:	4618      	mov	r0, r3
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000008 	.word	0x20000008
 8002398:	14f8b589 	.word	0x14f8b589
 800239c:	ffff0000 	.word	0xffff0000

080023a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b10      	cmp	r3, #16
 80023ce:	d003      	beq.n	80023d8 <HAL_I2C_EV_IRQHandler+0x38>
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b40      	cmp	r3, #64	; 0x40
 80023d4:	f040 80c1 	bne.w	800255a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_I2C_EV_IRQHandler+0x6e>
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80023f8:	d003      	beq.n	8002402 <HAL_I2C_EV_IRQHandler+0x62>
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002400:	d101      	bne.n	8002406 <HAL_I2C_EV_IRQHandler+0x66>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_I2C_EV_IRQHandler+0x68>
 8002406:	2300      	movs	r3, #0
 8002408:	2b01      	cmp	r3, #1
 800240a:	f000 8132 	beq.w	8002672 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00c      	beq.n	8002432 <HAL_I2C_EV_IRQHandler+0x92>
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	0a5b      	lsrs	r3, r3, #9
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f001 fc89 	bl	8003d3c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fd91 	bl	8002f52 <I2C_Master_SB>
 8002430:	e092      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HAL_I2C_EV_IRQHandler+0xb2>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	0a5b      	lsrs	r3, r3, #9
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fe07 	bl	800305e <I2C_Master_ADD10>
 8002450:	e082      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_I2C_EV_IRQHandler+0xd2>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	0a5b      	lsrs	r3, r3, #9
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 fe21 	bl	80030b2 <I2C_Master_ADDR>
 8002470:	e072      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d03b      	beq.n	80024f6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800248c:	f000 80f3 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	09db      	lsrs	r3, r3, #7
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00f      	beq.n	80024bc <HAL_I2C_EV_IRQHandler+0x11c>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	0a9b      	lsrs	r3, r3, #10
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_I2C_EV_IRQHandler+0x11c>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d103      	bne.n	80024bc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fa01 	bl	80028bc <I2C_MasterTransmit_TXE>
 80024ba:	e04d      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80d6 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	0a5b      	lsrs	r3, r3, #9
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 80cf 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	2b21      	cmp	r3, #33	; 0x21
 80024dc:	d103      	bne.n	80024e6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa88 	bl	80029f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e4:	e0c7      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	f040 80c4 	bne.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 faf6 	bl	8002ae0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f4:	e0bf      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002504:	f000 80b7 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00f      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x194>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	0a9b      	lsrs	r3, r3, #10
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_I2C_EV_IRQHandler+0x194>
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d103      	bne.n	8002534 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fb6b 	bl	8002c08 <I2C_MasterReceive_RXNE>
 8002532:	e011      	b.n	8002558 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 809a 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	0a5b      	lsrs	r3, r3, #9
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8093 	beq.w	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fc14 	bl	8002d7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002556:	e08e      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002558:	e08d      	b.n	8002676 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e007      	b.n	800257c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d012      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x20e>
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 ffd2 	bl	8003550 <I2C_Slave_ADDR>
 80025ac:	e066      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x22e>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	0a5b      	lsrs	r3, r3, #9
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 f80c 	bl	80035e4 <I2C_Slave_STOPF>
 80025cc:	e056      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025ce:	7bbb      	ldrb	r3, [r7, #14]
 80025d0:	2b21      	cmp	r3, #33	; 0x21
 80025d2:	d002      	beq.n	80025da <HAL_I2C_EV_IRQHandler+0x23a>
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2b29      	cmp	r3, #41	; 0x29
 80025d8:	d125      	bne.n	8002626 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	09db      	lsrs	r3, r3, #7
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00f      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0x266>
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	0a9b      	lsrs	r3, r3, #10
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_I2C_EV_IRQHandler+0x266>
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 fee8 	bl	80033d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002604:	e039      	b.n	800267a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	089b      	lsrs	r3, r3, #2
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d033      	beq.n	800267a <HAL_I2C_EV_IRQHandler+0x2da>
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	0a5b      	lsrs	r3, r3, #9
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d02d      	beq.n	800267a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 ff15 	bl	800344e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002624:	e029      	b.n	800267a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00f      	beq.n	8002652 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	0a9b      	lsrs	r3, r3, #10
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <HAL_I2C_EV_IRQHandler+0x2b2>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 ff20 	bl	8003490 <I2C_SlaveReceive_RXNE>
 8002650:	e014      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	0a5b      	lsrs	r3, r3, #9
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 ff4e 	bl	800350c <I2C_SlaveReceive_BTF>
 8002670:	e004      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002672:	bf00      	nop
 8002674:	e002      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800267a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b08a      	sub	sp, #40	; 0x28
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00e      	beq.n	80026d0 <HAL_I2C_ER_IRQHandler+0x4e>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026ce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00e      	beq.n	80026fa <HAL_I2C_ER_IRQHandler+0x78>
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	f043 0302 	orr.w	r3, r3, #2
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80026f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	0a9b      	lsrs	r3, r3, #10
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03f      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0x104>
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d039      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002712:	7efb      	ldrb	r3, [r7, #27]
 8002714:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29b      	uxth	r3, r3
 800271c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002724:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800272c:	7ebb      	ldrb	r3, [r7, #26]
 800272e:	2b20      	cmp	r3, #32
 8002730:	d112      	bne.n	8002758 <HAL_I2C_ER_IRQHandler+0xd6>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10f      	bne.n	8002758 <HAL_I2C_ER_IRQHandler+0xd6>
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	2b21      	cmp	r3, #33	; 0x21
 800273c:	d008      	beq.n	8002750 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800273e:	7cfb      	ldrb	r3, [r7, #19]
 8002740:	2b29      	cmp	r3, #41	; 0x29
 8002742:	d005      	beq.n	8002750 <HAL_I2C_ER_IRQHandler+0xce>
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	2b28      	cmp	r3, #40	; 0x28
 8002748:	d106      	bne.n	8002758 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b21      	cmp	r3, #33	; 0x21
 800274e:	d103      	bne.n	8002758 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f001 f877 	bl	8003844 <I2C_Slave_AF>
 8002756:	e016      	b.n	8002786 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002760:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800276a:	7efb      	ldrb	r3, [r7, #27]
 800276c:	2b10      	cmp	r3, #16
 800276e:	d002      	beq.n	8002776 <HAL_I2C_ER_IRQHandler+0xf4>
 8002770:	7efb      	ldrb	r3, [r7, #27]
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d107      	bne.n	8002786 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002784:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	0adb      	lsrs	r3, r3, #11
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00e      	beq.n	80027b0 <HAL_I2C_ER_IRQHandler+0x12e>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80027ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f001 f8ae 	bl	8003924 <I2C_ITError>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
 800282c:	4613      	mov	r3, r2
 800282e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ae:	b2db      	uxtb	r3, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d150      	bne.n	8002984 <I2C_MasterTransmit_TXE+0xc8>
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	2b21      	cmp	r3, #33	; 0x21
 80028e6:	d14d      	bne.n	8002984 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d01d      	beq.n	800292a <I2C_MasterTransmit_TXE+0x6e>
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d01a      	beq.n	800292a <I2C_MasterTransmit_TXE+0x6e>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028fa:	d016      	beq.n	800292a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800290a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2211      	movs	r2, #17
 8002910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ff54 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002928:	e060      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002938:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002948:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d107      	bne.n	8002974 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff6f 	bl	8002850 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002972:	e03b      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ff27 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002982:	e033      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b21      	cmp	r3, #33	; 0x21
 8002988:	d005      	beq.n	8002996 <I2C_MasterTransmit_TXE+0xda>
 800298a:	7bbb      	ldrb	r3, [r7, #14]
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d12d      	bne.n	80029ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b22      	cmp	r3, #34	; 0x22
 8002994:	d12a      	bne.n	80029ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d108      	bne.n	80029b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80029b0:	e01c      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d103      	bne.n	80029c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f88e 	bl	8002ae0 <I2C_MemoryTransmit_TXE_BTF>
}
 80029c4:	e012      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	781a      	ldrb	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029ea:	e7ff      	b.n	80029ec <I2C_MasterTransmit_TXE+0x130>
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b21      	cmp	r3, #33	; 0x21
 8002a0c:	d164      	bne.n	8002ad8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a3c:	e04c      	b.n	8002ad8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d01d      	beq.n	8002a80 <I2C_MasterTransmit_BTF+0x8c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d01a      	beq.n	8002a80 <I2C_MasterTransmit_BTF+0x8c>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a50:	d016      	beq.n	8002a80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2211      	movs	r2, #17
 8002a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fea9 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
}
 8002a7e:	e02b      	b.n	8002ad8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d107      	bne.n	8002aca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fec4 	bl	8002850 <HAL_I2C_MemTxCpltCallback>
}
 8002ac8:	e006      	b.n	8002ad8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fe7c 	bl	80027d0 <HAL_I2C_MasterTxCpltCallback>
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11d      	bne.n	8002b34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10b      	bne.n	8002b18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b10:	1c9a      	adds	r2, r3, #2
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b16:	e073      	b.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	121b      	asrs	r3, r3, #8
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b32:	e065      	b.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10b      	bne.n	8002b54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b52:	e055      	b.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d151      	bne.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2b22      	cmp	r3, #34	; 0x22
 8002b60:	d10d      	bne.n	8002b7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b7c:	e040      	b.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b21      	cmp	r3, #33	; 0x21
 8002b8c:	d112      	bne.n	8002bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002bb2:	e025      	b.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d120      	bne.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b21      	cmp	r3, #33	; 0x21
 8002bc2:	d11d      	bne.n	8002c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff fe28 	bl	8002850 <HAL_I2C_MemTxCpltCallback>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b22      	cmp	r3, #34	; 0x22
 8002c1a:	f040 80ac 	bne.w	8002d76 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d921      	bls.n	8002c70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	f040 808c 	bne.w	8002d76 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002c6e:	e082      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d075      	beq.n	8002d64 <I2C_MasterReceive_RXNE+0x15c>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d002      	beq.n	8002c84 <I2C_MasterReceive_RXNE+0x7c>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d16f      	bne.n	8002d64 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f001 f827 	bl	8003cd8 <I2C_WaitOnSTOPRequestThroughIT>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d142      	bne.n	8002d16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d10a      	bne.n	8002d00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff fdb3 	bl	8002864 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002cfe:	e03a      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2212      	movs	r2, #18
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fd68 	bl	80027e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d14:	e02f      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fd8b 	bl	8002878 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d62:	e008      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	605a      	str	r2, [r3, #4]
}
 8002d74:	e7ff      	b.n	8002d76 <I2C_MasterReceive_RXNE+0x16e>
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d11b      	bne.n	8002dce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002da4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	1c5a      	adds	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002dcc:	e0bd      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d129      	bne.n	8002e2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d00a      	beq.n	8002e04 <I2C_MasterReceive_BTF+0x86>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d007      	beq.n	8002e04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e2a:	e08e      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d176      	bne.n	8002f24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d002      	beq.n	8002e42 <I2C_MasterReceive_BTF+0xc4>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d108      	bne.n	8002e54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e019      	b.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d002      	beq.n	8002e60 <I2C_MasterReceive_BTF+0xe2>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d108      	bne.n	8002e72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e00a      	b.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d007      	beq.n	8002e88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ee2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d10a      	bne.n	8002f0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff fcac 	bl	8002864 <HAL_I2C_MemRxCpltCallback>
}
 8002f0c:	e01d      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2212      	movs	r2, #18
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fc61 	bl	80027e4 <HAL_I2C_MasterRxCpltCallback>
}
 8002f22:	e012      	b.n	8002f4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d117      	bne.n	8002f96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002f80:	e067      	b.n	8003052 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]
}
 8002f94:	e05d      	b.n	8003052 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f9e:	d133      	bne.n	8003008 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b21      	cmp	r3, #33	; 0x21
 8002faa:	d109      	bne.n	8002fc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fbc:	611a      	str	r2, [r3, #16]
 8002fbe:	e008      	b.n	8002fd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	f043 0301 	orr.w	r3, r3, #1
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <I2C_Master_SB+0x92>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d032      	beq.n	8003052 <I2C_Master_SB+0x100>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d02d      	beq.n	8003052 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003004:	605a      	str	r2, [r3, #4]
}
 8003006:	e024      	b.n	8003052 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10e      	bne.n	800302e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	b29b      	uxth	r3, r3
 8003016:	11db      	asrs	r3, r3, #7
 8003018:	b2db      	uxtb	r3, r3
 800301a:	f003 0306 	and.w	r3, r3, #6
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f063 030f 	orn	r3, r3, #15
 8003024:	b2da      	uxtb	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	611a      	str	r2, [r3, #16]
}
 800302c:	e011      	b.n	8003052 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10d      	bne.n	8003052 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	b29b      	uxth	r3, r3
 800303c:	11db      	asrs	r3, r3, #7
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f003 0306 	and.w	r3, r3, #6
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f063 030e 	orn	r3, r3, #14
 800304a:	b2da      	uxtb	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	611a      	str	r2, [r3, #16]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	b2da      	uxtb	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003076:	2b00      	cmp	r3, #0
 8003078:	d004      	beq.n	8003084 <I2C_Master_ADD10+0x26>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00c      	beq.n	80030a6 <I2C_Master_ADD10+0x48>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	605a      	str	r2, [r3, #4]
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b091      	sub	sp, #68	; 0x44
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b22      	cmp	r3, #34	; 0x22
 80030da:	f040 8169 	bne.w	80033b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10f      	bne.n	8003106 <I2C_Master_ADDR+0x54>
 80030e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d10b      	bne.n	8003106 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	633b      	str	r3, [r7, #48]	; 0x30
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	e160      	b.n	80033c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	2b00      	cmp	r3, #0
 800310c:	d11d      	bne.n	800314a <I2C_Master_ADDR+0x98>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003116:	d118      	bne.n	800314a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800313c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	651a      	str	r2, [r3, #80]	; 0x50
 8003148:	e13e      	b.n	80033c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d113      	bne.n	800317c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003154:	2300      	movs	r3, #0
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	62bb      	str	r3, [r7, #40]	; 0x28
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	e115      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	f040 808a 	bne.w	800329c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800318e:	d137      	bne.n	8003200 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800319e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d113      	bne.n	80031d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	e0e7      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d8:	2300      	movs	r3, #0
 80031da:	623b      	str	r3, [r7, #32]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	623b      	str	r3, [r7, #32]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	e0d3      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	2b08      	cmp	r3, #8
 8003204:	d02e      	beq.n	8003264 <I2C_Master_ADDR+0x1b2>
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	2b20      	cmp	r3, #32
 800320a:	d02b      	beq.n	8003264 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	2b12      	cmp	r3, #18
 8003210:	d102      	bne.n	8003218 <I2C_Master_ADDR+0x166>
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	2b01      	cmp	r3, #1
 8003216:	d125      	bne.n	8003264 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800321a:	2b04      	cmp	r3, #4
 800321c:	d00e      	beq.n	800323c <I2C_Master_ADDR+0x18a>
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	2b02      	cmp	r3, #2
 8003222:	d00b      	beq.n	800323c <I2C_Master_ADDR+0x18a>
 8003224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003226:	2b10      	cmp	r3, #16
 8003228:	d008      	beq.n	800323c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e007      	b.n	800324c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800324a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	e0a1      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003274:	2300      	movs	r3, #0
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e085      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d14d      	bne.n	8003342 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80032a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d016      	beq.n	80032da <I2C_Master_ADDR+0x228>
 80032ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d013      	beq.n	80032da <I2C_Master_ADDR+0x228>
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d010      	beq.n	80032da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	e007      	b.n	80032ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f8:	d117      	bne.n	800332a <I2C_Master_ADDR+0x278>
 80032fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003300:	d00b      	beq.n	800331a <I2C_Master_ADDR+0x268>
 8003302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003304:	2b01      	cmp	r3, #1
 8003306:	d008      	beq.n	800331a <I2C_Master_ADDR+0x268>
 8003308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330a:	2b08      	cmp	r3, #8
 800330c:	d005      	beq.n	800331a <I2C_Master_ADDR+0x268>
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2b10      	cmp	r3, #16
 8003312:	d002      	beq.n	800331a <I2C_Master_ADDR+0x268>
 8003314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003316:	2b20      	cmp	r3, #32
 8003318:	d107      	bne.n	800332a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003328:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	e032      	b.n	80033a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003350:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003360:	d117      	bne.n	8003392 <I2C_Master_ADDR+0x2e0>
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003368:	d00b      	beq.n	8003382 <I2C_Master_ADDR+0x2d0>
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	2b01      	cmp	r3, #1
 800336e:	d008      	beq.n	8003382 <I2C_Master_ADDR+0x2d0>
 8003370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003372:	2b08      	cmp	r3, #8
 8003374:	d005      	beq.n	8003382 <I2C_Master_ADDR+0x2d0>
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2b10      	cmp	r3, #16
 800337a:	d002      	beq.n	8003382 <I2C_Master_ADDR+0x2d0>
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	2b20      	cmp	r3, #32
 8003380:	d107      	bne.n	8003392 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003390:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80033ae:	e00b      	b.n	80033c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
}
 80033c6:	e7ff      	b.n	80033c8 <I2C_Master_ADDR+0x316>
 80033c8:	bf00      	nop
 80033ca:	3744      	adds	r7, #68	; 0x44
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02b      	beq.n	8003446 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	781a      	ldrb	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d114      	bne.n	8003446 <I2C_SlaveTransmit_TXE+0x72>
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b29      	cmp	r3, #41	; 0x29
 8003420:	d111      	bne.n	8003446 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003430:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2221      	movs	r2, #33	; 0x21
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2228      	movs	r2, #40	; 0x28
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff f9d9 	bl	80027f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d011      	beq.n	8003484 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	781a      	ldrb	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02c      	beq.n	8003504 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d114      	bne.n	8003504 <I2C_SlaveReceive_RXNE+0x74>
 80034da:	7bfb      	ldrb	r3, [r7, #15]
 80034dc:	2b2a      	cmp	r3, #42	; 0x2a
 80034de:	d111      	bne.n	8003504 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2222      	movs	r2, #34	; 0x22
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2228      	movs	r2, #40	; 0x28
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff f984 	bl	800280c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d012      	beq.n	8003544 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800356a:	2b28      	cmp	r3, #40	; 0x28
 800356c:	d127      	bne.n	80035be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800357c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800358a:	2301      	movs	r3, #1
 800358c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	09db      	lsrs	r3, r3, #7
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	81bb      	strh	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80035b0:	89ba      	ldrh	r2, [r7, #12]
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff f932 	bl	8002820 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035bc:	e00e      	b.n	80035dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003602:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003630:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003640:	d172      	bne.n	8003728 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	2b22      	cmp	r3, #34	; 0x22
 8003646:	d002      	beq.n	800364e <I2C_Slave_STOPF+0x6a>
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b2a      	cmp	r3, #42	; 0x2a
 800364c:	d135      	bne.n	80036ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	b29a      	uxth	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003680:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe f901 	bl	800188e <HAL_DMA_GetState>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d049      	beq.n	8003726 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	4a69      	ldr	r2, [pc, #420]	; (800383c <I2C_Slave_STOPF+0x258>)
 8003698:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f8d3 	bl	800184a <HAL_DMA_Abort_IT>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03d      	beq.n	8003726 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036b4:	4610      	mov	r0, r2
 80036b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036b8:	e035      	b.n	8003726 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d005      	beq.n	80036de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f043 0204 	orr.w	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe f8cb 	bl	800188e <HAL_DMA_GetState>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d014      	beq.n	8003728 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	4a4e      	ldr	r2, [pc, #312]	; (800383c <I2C_Slave_STOPF+0x258>)
 8003704:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe f89d 	bl	800184a <HAL_DMA_Abort_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
 8003724:	e000      	b.n	8003728 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003726:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d03e      	beq.n	80037b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d112      	bne.n	8003766 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003770:	2b40      	cmp	r3, #64	; 0x40
 8003772:	d112      	bne.n	800379a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f043 0204 	orr.w	r2, r3, #4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8b3 	bl	8003924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80037be:	e039      	b.n	8003834 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d109      	bne.n	80037da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2228      	movs	r2, #40	; 0x28
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff f819 	bl	800280c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b28      	cmp	r3, #40	; 0x28
 80037e4:	d111      	bne.n	800380a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <I2C_Slave_STOPF+0x25c>)
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff f81a 	bl	800283c <HAL_I2C_ListenCpltCallback>
}
 8003808:	e014      	b.n	8003834 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	2b22      	cmp	r3, #34	; 0x22
 8003810:	d002      	beq.n	8003818 <I2C_Slave_STOPF+0x234>
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	2b22      	cmp	r3, #34	; 0x22
 8003816:	d10d      	bne.n	8003834 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe ffec 	bl	800280c <HAL_I2C_SlaveRxCpltCallback>
}
 8003834:	bf00      	nop
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	08003b89 	.word	0x08003b89
 8003840:	ffff0000 	.word	0xffff0000

08003844 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b08      	cmp	r3, #8
 800385e:	d002      	beq.n	8003866 <I2C_Slave_AF+0x22>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b20      	cmp	r3, #32
 8003864:	d129      	bne.n	80038ba <I2C_Slave_AF+0x76>
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b28      	cmp	r3, #40	; 0x28
 800386a:	d126      	bne.n	80038ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <I2C_Slave_AF+0xdc>)
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003880:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800389a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7fe ffc2 	bl	800283c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80038b8:	e02e      	b.n	8003918 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	2b21      	cmp	r3, #33	; 0x21
 80038be:	d126      	bne.n	800390e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a17      	ldr	r2, [pc, #92]	; (8003920 <I2C_Slave_AF+0xdc>)
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2221      	movs	r2, #33	; 0x21
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003904:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fe ff76 	bl	80027f8 <HAL_I2C_SlaveTxCpltCallback>
}
 800390c:	e004      	b.n	8003918 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003916:	615a      	str	r2, [r3, #20]
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	ffff0000 	.word	0xffff0000

08003924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800393a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800393c:	7bbb      	ldrb	r3, [r7, #14]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d002      	beq.n	8003948 <I2C_ITError+0x24>
 8003942:	7bbb      	ldrb	r3, [r7, #14]
 8003944:	2b40      	cmp	r3, #64	; 0x40
 8003946:	d10a      	bne.n	800395e <I2C_ITError+0x3a>
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b22      	cmp	r3, #34	; 0x22
 800394c:	d107      	bne.n	800395e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800395c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003964:	2b28      	cmp	r3, #40	; 0x28
 8003966:	d107      	bne.n	8003978 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2228      	movs	r2, #40	; 0x28
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003976:	e015      	b.n	80039a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d00a      	beq.n	800399e <I2C_ITError+0x7a>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b60      	cmp	r3, #96	; 0x60
 800398c:	d007      	beq.n	800399e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039b2:	d162      	bne.n	8003a7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d020      	beq.n	8003a14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d6:	4a6a      	ldr	r2, [pc, #424]	; (8003b80 <I2C_ITError+0x25c>)
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd ff33 	bl	800184a <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 8089 	beq.w	8003afe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4798      	blx	r3
 8003a12:	e074      	b.n	8003afe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a18:	4a59      	ldr	r2, [pc, #356]	; (8003b80 <I2C_ITError+0x25c>)
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fd ff12 	bl	800184a <HAL_DMA_Abort_IT>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d068      	beq.n	8003afe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d10b      	bne.n	8003a52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
 8003a78:	e041      	b.n	8003afe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b60      	cmp	r3, #96	; 0x60
 8003a84:	d125      	bne.n	8003ad2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d10b      	bne.n	8003aba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fe fede 	bl	800288c <HAL_I2C_AbortCpltCallback>
 8003ad0:	e015      	b.n	8003afe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b40      	cmp	r3, #64	; 0x40
 8003ade:	d10b      	bne.n	8003af8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7fe febd 	bl	8002878 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d113      	bne.n	8003b78 <I2C_ITError+0x254>
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	2b28      	cmp	r3, #40	; 0x28
 8003b54:	d110      	bne.n	8003b78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <I2C_ITError+0x260>)
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fe fe62 	bl	800283c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	08003b89 	.word	0x08003b89
 8003b84:	ffff0000 	.word	0xffff0000

08003b88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <I2C_DMAAbort+0x148>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	08db      	lsrs	r3, r3, #3
 8003ba8:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <I2C_DMAAbort+0x14c>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0a1a      	lsrs	r2, r3, #8
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00da      	lsls	r2, r3, #3
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003bce:	e00a      	b.n	8003be6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d0ea      	beq.n	8003bbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	2200      	movs	r2, #0
 8003c04:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c28:	2200      	movs	r2, #0
 8003c2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2200      	movs	r2, #0
 8003c3a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b60      	cmp	r3, #96	; 0x60
 8003c56:	d10e      	bne.n	8003c76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c6e:	6978      	ldr	r0, [r7, #20]
 8003c70:	f7fe fe0c 	bl	800288c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c74:	e027      	b.n	8003cc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c7c:	2b28      	cmp	r3, #40	; 0x28
 8003c7e:	d117      	bne.n	8003cb0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2228      	movs	r2, #40	; 0x28
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cae:	e007      	b.n	8003cc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f7fe fdd9 	bl	8002878 <HAL_I2C_ErrorCallback>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	14f8b589 	.word	0x14f8b589

08003cd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	08db      	lsrs	r3, r3, #3
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0a1a      	lsrs	r2, r3, #8
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e008      	b.n	8003d28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d0e9      	beq.n	8003cfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	20000008 	.word	0x20000008
 8003d38:	14f8b589 	.word	0x14f8b589

08003d3c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d4c:	d103      	bne.n	8003d56 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003d54:	e007      	b.n	8003d66 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003d5e:	d102      	bne.n	8003d66 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2208      	movs	r2, #8
 8003d64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0cc      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d88:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d90c      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d96:	4b65      	ldr	r3, [pc, #404]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d044      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d119      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	4b3f      	ldr	r3, [pc, #252]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e42:	4b3b      	ldr	r3, [pc, #236]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e067      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e52:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 0203 	bic.w	r2, r3, #3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4934      	ldr	r1, [pc, #208]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e64:	f7fd fb0e 	bl	8001484 <HAL_GetTick>
 8003e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e6c:	f7fd fb0a 	bl	8001484 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e04f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e82:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 020c 	and.w	r2, r3, #12
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d1eb      	bne.n	8003e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b25      	ldr	r3, [pc, #148]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d20c      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b22      	ldr	r3, [pc, #136]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f855 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_ClockConfig+0x1bc>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490a      	ldr	r1, [pc, #40]	; (8003f34 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <HAL_RCC_ClockConfig+0x1c4>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_RCC_ClockConfig+0x1c8>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fa6e 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023c00 	.word	0x40023c00
 8003f30:	40023800 	.word	0x40023800
 8003f34:	08006090 	.word	0x08006090
 8003f38:	20000008 	.word	0x20000008
 8003f3c:	2000000c 	.word	0x2000000c

08003f40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000008 	.word	0x20000008

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff0 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	; (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	0a9b      	lsrs	r3, r3, #10
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	080060a0 	.word	0x080060a0

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffdc 	bl	8003f40 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0b5b      	lsrs	r3, r3, #13
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	080060a0 	.word	0x080060a0

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b0a6      	sub	sp, #152	; 0x98
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fce:	4bc8      	ldr	r3, [pc, #800]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	f200 817e 	bhi.w	80042d8 <HAL_RCC_GetSysClockFreq+0x330>
 8003fdc:	a201      	add	r2, pc, #4	; (adr r2, 8003fe4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	080042d9 	.word	0x080042d9
 8003fec:	080042d9 	.word	0x080042d9
 8003ff0:	080042d9 	.word	0x080042d9
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	080042d9 	.word	0x080042d9
 8003ffc:	080042d9 	.word	0x080042d9
 8004000:	080042d9 	.word	0x080042d9
 8004004:	08004029 	.word	0x08004029
 8004008:	080042d9 	.word	0x080042d9
 800400c:	080042d9 	.word	0x080042d9
 8004010:	080042d9 	.word	0x080042d9
 8004014:	08004193 	.word	0x08004193
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4bb6      	ldr	r3, [pc, #728]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800401a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800401e:	e15f      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004020:	4bb5      	ldr	r3, [pc, #724]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004022:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004026:	e15b      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004028:	4bb1      	ldr	r3, [pc, #708]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004034:	4bae      	ldr	r3, [pc, #696]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d031      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004040:	4bab      	ldr	r3, [pc, #684]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	099b      	lsrs	r3, r3, #6
 8004046:	2200      	movs	r2, #0
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
 800404a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800404c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	663b      	str	r3, [r7, #96]	; 0x60
 8004054:	2300      	movs	r3, #0
 8004056:	667b      	str	r3, [r7, #100]	; 0x64
 8004058:	4ba7      	ldr	r3, [pc, #668]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x350>)
 800405a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800405e:	462a      	mov	r2, r5
 8004060:	fb03 f202 	mul.w	r2, r3, r2
 8004064:	2300      	movs	r3, #0
 8004066:	4621      	mov	r1, r4
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	4aa2      	ldr	r2, [pc, #648]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x350>)
 8004070:	4621      	mov	r1, r4
 8004072:	fba1 1202 	umull	r1, r2, r1, r2
 8004076:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004078:	460a      	mov	r2, r1
 800407a:	67ba      	str	r2, [r7, #120]	; 0x78
 800407c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800407e:	4413      	add	r3, r2
 8004080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004086:	2200      	movs	r2, #0
 8004088:	65bb      	str	r3, [r7, #88]	; 0x58
 800408a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800408c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004090:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004094:	f7fc fbf2 	bl	800087c <__aeabi_uldivmod>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4613      	mov	r3, r2
 800409e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040a2:	e064      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a4:	4b92      	ldr	r3, [pc, #584]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	099b      	lsrs	r3, r3, #6
 80040aa:	2200      	movs	r2, #0
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
 80040ae:	657a      	str	r2, [r7, #84]	; 0x54
 80040b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	2300      	movs	r3, #0
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80040c0:	4622      	mov	r2, r4
 80040c2:	462b      	mov	r3, r5
 80040c4:	f04f 0000 	mov.w	r0, #0
 80040c8:	f04f 0100 	mov.w	r1, #0
 80040cc:	0159      	lsls	r1, r3, #5
 80040ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d2:	0150      	lsls	r0, r2, #5
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4621      	mov	r1, r4
 80040da:	1a51      	subs	r1, r2, r1
 80040dc:	6139      	str	r1, [r7, #16]
 80040de:	4629      	mov	r1, r5
 80040e0:	eb63 0301 	sbc.w	r3, r3, r1
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040f2:	4659      	mov	r1, fp
 80040f4:	018b      	lsls	r3, r1, #6
 80040f6:	4651      	mov	r1, sl
 80040f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040fc:	4651      	mov	r1, sl
 80040fe:	018a      	lsls	r2, r1, #6
 8004100:	4651      	mov	r1, sl
 8004102:	ebb2 0801 	subs.w	r8, r2, r1
 8004106:	4659      	mov	r1, fp
 8004108:	eb63 0901 	sbc.w	r9, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004118:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004120:	4690      	mov	r8, r2
 8004122:	4699      	mov	r9, r3
 8004124:	4623      	mov	r3, r4
 8004126:	eb18 0303 	adds.w	r3, r8, r3
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	462b      	mov	r3, r5
 800412e:	eb49 0303 	adc.w	r3, r9, r3
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004140:	4629      	mov	r1, r5
 8004142:	028b      	lsls	r3, r1, #10
 8004144:	4621      	mov	r1, r4
 8004146:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800414a:	4621      	mov	r1, r4
 800414c:	028a      	lsls	r2, r1, #10
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004156:	2200      	movs	r2, #0
 8004158:	643b      	str	r3, [r7, #64]	; 0x40
 800415a:	647a      	str	r2, [r7, #68]	; 0x44
 800415c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004160:	f7fc fb8c 	bl	800087c <__aeabi_uldivmod>
 8004164:	4602      	mov	r2, r0
 8004166:	460b      	mov	r3, r1
 8004168:	4613      	mov	r3, r2
 800416a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800416e:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	0c1b      	lsrs	r3, r3, #16
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	3301      	adds	r3, #1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8004180:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8004190:	e0a6      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02a      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041bc:	2100      	movs	r1, #0
 80041be:	4b4e      	ldr	r3, [pc, #312]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x350>)
 80041c0:	fb03 f201 	mul.w	r2, r3, r1
 80041c4:	2300      	movs	r3, #0
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	4a4a      	ldr	r2, [pc, #296]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x350>)
 80041ce:	fba0 1202 	umull	r1, r2, r0, r2
 80041d2:	677a      	str	r2, [r7, #116]	; 0x74
 80041d4:	460a      	mov	r2, r1
 80041d6:	673a      	str	r2, [r7, #112]	; 0x70
 80041d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041da:	4413      	add	r3, r2
 80041dc:	677b      	str	r3, [r7, #116]	; 0x74
 80041de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e2:	2200      	movs	r2, #0
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30
 80041e6:	637a      	str	r2, [r7, #52]	; 0x34
 80041e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041ec:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80041f0:	f7fc fb44 	bl	800087c <__aeabi_uldivmod>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4613      	mov	r3, r2
 80041fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041fe:	e05b      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004200:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	2200      	movs	r2, #0
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
 800420a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
 8004218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800421c:	4642      	mov	r2, r8
 800421e:	464b      	mov	r3, r9
 8004220:	f04f 0000 	mov.w	r0, #0
 8004224:	f04f 0100 	mov.w	r1, #0
 8004228:	0159      	lsls	r1, r3, #5
 800422a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800422e:	0150      	lsls	r0, r2, #5
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	4641      	mov	r1, r8
 8004236:	ebb2 0a01 	subs.w	sl, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800424c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004254:	ebb2 040a 	subs.w	r4, r2, sl
 8004258:	eb63 050b 	sbc.w	r5, r3, fp
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	00eb      	lsls	r3, r5, #3
 8004266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800426a:	00e2      	lsls	r2, r4, #3
 800426c:	4614      	mov	r4, r2
 800426e:	461d      	mov	r5, r3
 8004270:	4643      	mov	r3, r8
 8004272:	18e3      	adds	r3, r4, r3
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	464b      	mov	r3, r9
 8004278:	eb45 0303 	adc.w	r3, r5, r3
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800428a:	4629      	mov	r1, r5
 800428c:	028b      	lsls	r3, r1, #10
 800428e:	4621      	mov	r1, r4
 8004290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004294:	4621      	mov	r1, r4
 8004296:	028a      	lsls	r2, r1, #10
 8004298:	4610      	mov	r0, r2
 800429a:	4619      	mov	r1, r3
 800429c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a0:	2200      	movs	r2, #0
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	61fa      	str	r2, [r7, #28]
 80042a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042aa:	f7fc fae7 	bl	800087c <__aeabi_uldivmod>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4613      	mov	r3, r2
 80042b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042b8:	4b0d      	ldr	r3, [pc, #52]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x348>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0f1b      	lsrs	r3, r3, #28
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80042c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042d6:	e003      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80042da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80042de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3798      	adds	r7, #152	; 0x98
 80042e8:	46bd      	mov	sp, r7
 80042ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400
 80042f8:	017d7840 	.word	0x017d7840

080042fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e28d      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8083 	beq.w	8004422 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800431c:	4b94      	ldr	r3, [pc, #592]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b04      	cmp	r3, #4
 8004326:	d019      	beq.n	800435c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004328:	4b91      	ldr	r3, [pc, #580]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004330:	2b08      	cmp	r3, #8
 8004332:	d106      	bne.n	8004342 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004334:	4b8e      	ldr	r3, [pc, #568]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004340:	d00c      	beq.n	800435c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d112      	bne.n	8004374 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b88      	ldr	r3, [pc, #544]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435a:	d10b      	bne.n	8004374 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435c:	4b84      	ldr	r3, [pc, #528]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d05b      	beq.n	8004420 <HAL_RCC_OscConfig+0x124>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d157      	bne.n	8004420 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e25a      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d106      	bne.n	800438c <HAL_RCC_OscConfig+0x90>
 800437e:	4b7c      	ldr	r3, [pc, #496]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7b      	ldr	r2, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e01d      	b.n	80043c8 <HAL_RCC_OscConfig+0xcc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0xb4>
 8004396:	4b76      	ldr	r3, [pc, #472]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a75      	ldr	r2, [pc, #468]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800439c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b73      	ldr	r3, [pc, #460]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a72      	ldr	r2, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0xcc>
 80043b0:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	4b6c      	ldr	r3, [pc, #432]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6b      	ldr	r2, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d013      	beq.n	80043f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd f858 	bl	8001484 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d8:	f7fd f854 	bl	8001484 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e21f      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ea:	4b61      	ldr	r3, [pc, #388]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0xdc>
 80043f6:	e014      	b.n	8004422 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd f844 	bl	8001484 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd f840 	bl	8001484 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e20b      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004412:	4b57      	ldr	r3, [pc, #348]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1f0      	bne.n	8004400 <HAL_RCC_OscConfig+0x104>
 800441e:	e000      	b.n	8004422 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d06f      	beq.n	800450e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800442e:	4b50      	ldr	r3, [pc, #320]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 030c 	and.w	r3, r3, #12
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800443a:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004442:	2b08      	cmp	r3, #8
 8004444:	d105      	bne.n	8004452 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004446:	4b4a      	ldr	r3, [pc, #296]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b47      	ldr	r3, [pc, #284]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d11c      	bne.n	8004498 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800445e:	4b44      	ldr	r3, [pc, #272]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d116      	bne.n	8004498 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446a:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_RCC_OscConfig+0x186>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d001      	beq.n	8004482 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1d3      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004482:	4b3b      	ldr	r3, [pc, #236]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4937      	ldr	r1, [pc, #220]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004496:	e03a      	b.n	800450e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d020      	beq.n	80044e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a0:	4b34      	ldr	r3, [pc, #208]	; (8004574 <HAL_RCC_OscConfig+0x278>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7fc ffed 	bl	8001484 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ae:	f7fc ffe9 	bl	8001484 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e1b4      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044cc:	4b28      	ldr	r3, [pc, #160]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4925      	ldr	r1, [pc, #148]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	600b      	str	r3, [r1, #0]
 80044e0:	e015      	b.n	800450e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x278>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fc ffcc 	bl	8001484 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f0:	f7fc ffc8 	bl	8001484 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e193      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004502:	4b1b      	ldr	r3, [pc, #108]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d036      	beq.n	8004588 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x27c>)
 8004524:	2201      	movs	r2, #1
 8004526:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004528:	f7fc ffac 	bl	8001484 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004530:	f7fc ffa8 	bl	8001484 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e173      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004542:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_OscConfig+0x274>)
 8004544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x234>
 800454e:	e01b      	b.n	8004588 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_RCC_OscConfig+0x27c>)
 8004552:	2200      	movs	r2, #0
 8004554:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004556:	f7fc ff95 	bl	8001484 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	e00e      	b.n	800457c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455e:	f7fc ff91 	bl	8001484 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d907      	bls.n	800457c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e15c      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
 8004570:	40023800 	.word	0x40023800
 8004574:	42470000 	.word	0x42470000
 8004578:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b8a      	ldr	r3, [pc, #552]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ea      	bne.n	800455e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 8097 	beq.w	80046c4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459a:	4b83      	ldr	r3, [pc, #524]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10f      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	4b7f      	ldr	r3, [pc, #508]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	4a7e      	ldr	r2, [pc, #504]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80045b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b4:	6413      	str	r3, [r2, #64]	; 0x40
 80045b6:	4b7c      	ldr	r3, [pc, #496]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c6:	4b79      	ldr	r3, [pc, #484]	; (80047ac <HAL_RCC_OscConfig+0x4b0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d2:	4b76      	ldr	r3, [pc, #472]	; (80047ac <HAL_RCC_OscConfig+0x4b0>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a75      	ldr	r2, [pc, #468]	; (80047ac <HAL_RCC_OscConfig+0x4b0>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045de:	f7fc ff51 	bl	8001484 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fc ff4d 	bl	8001484 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e118      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f8:	4b6c      	ldr	r3, [pc, #432]	; (80047ac <HAL_RCC_OscConfig+0x4b0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x31e>
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a65      	ldr	r2, [pc, #404]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	e01c      	b.n	8004654 <HAL_RCC_OscConfig+0x358>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b05      	cmp	r3, #5
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0x340>
 8004622:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a60      	ldr	r2, [pc, #384]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	f043 0304 	orr.w	r3, r3, #4
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	4b5e      	ldr	r3, [pc, #376]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a5d      	ldr	r2, [pc, #372]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0x358>
 800463c:	4b5a      	ldr	r3, [pc, #360]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a59      	ldr	r2, [pc, #356]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
 8004648:	4b57      	ldr	r3, [pc, #348]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a56      	ldr	r2, [pc, #344]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800464e:	f023 0304 	bic.w	r3, r3, #4
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d015      	beq.n	8004688 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fc ff12 	bl	8001484 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fc ff0e 	bl	8001484 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e0d7      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	4b4b      	ldr	r3, [pc, #300]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d0ee      	beq.n	8004664 <HAL_RCC_OscConfig+0x368>
 8004686:	e014      	b.n	80046b2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fc fefc 	bl	8001484 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800468e:	e00a      	b.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004690:	f7fc fef8 	bl	8001484 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	f241 3288 	movw	r2, #5000	; 0x1388
 800469e:	4293      	cmp	r3, r2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e0c1      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a6:	4b40      	ldr	r3, [pc, #256]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1ee      	bne.n	8004690 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d105      	bne.n	80046c4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b8:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80046be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80ad 	beq.w	8004828 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ce:	4b36      	ldr	r3, [pc, #216]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d060      	beq.n	800479c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d145      	bne.n	800476e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCC_OscConfig+0x4b4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e8:	f7fc fecc 	bl	8001484 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f0:	f7fc fec8 	bl	8001484 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e093      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f0      	bne.n	80046f0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69da      	ldr	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	041b      	lsls	r3, r3, #16
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	061b      	lsls	r3, r3, #24
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	071b      	lsls	r3, r3, #28
 800473a:	491b      	ldr	r1, [pc, #108]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004740:	4b1b      	ldr	r3, [pc, #108]	; (80047b0 <HAL_RCC_OscConfig+0x4b4>)
 8004742:	2201      	movs	r2, #1
 8004744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fc fe9d 	bl	8001484 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474e:	f7fc fe99 	bl	8001484 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e064      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f0      	beq.n	800474e <HAL_RCC_OscConfig+0x452>
 800476c:	e05c      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_OscConfig+0x4b4>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004774:	f7fc fe86 	bl	8001484 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800477c:	f7fc fe82 	bl	8001484 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e04d      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCC_OscConfig+0x4ac>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x480>
 800479a:	e045      	b.n	8004828 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e040      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40007000 	.word	0x40007000
 80047b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <HAL_RCC_OscConfig+0x538>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d030      	beq.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d129      	bne.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d122      	bne.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d119      	bne.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	3b01      	subs	r3, #1
 80047fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004800:	429a      	cmp	r2, r3
 8004802:	d10f      	bne.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d001      	beq.n	8004828 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e03f      	b.n	80048ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fca0 	bl	80011a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800487a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fcbf 	bl	8005200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d130      	bne.n	800494e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_UART_Transmit_IT+0x26>
 80048f2:	88fb      	ldrh	r3, [r7, #6]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e029      	b.n	8004950 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit_IT+0x38>
 8004906:	2302      	movs	r3, #2
 8004908:	e022      	b.n	8004950 <HAL_UART_Transmit_IT+0x7e>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	68ba      	ldr	r2, [r7, #8]
 8004916:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2221      	movs	r2, #33	; 0x21
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004948:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	e000      	b.n	8004950 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800494e:	2302      	movs	r3, #2
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b0ba      	sub	sp, #232	; 0xe8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004988:	2300      	movs	r3, #0
 800498a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800499a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0320 	and.w	r3, r3, #32
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d009      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fb65 	bl	800508a <UART_Receive_IT>
      return;
 80049c0:	e256      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 80de 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
 80049cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d106      	bne.n	80049e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80d1 	beq.w	8004b88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
 80049f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f043 0201 	orr.w	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00b      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
 8004a16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0202 	orr.w	r2, r3, #2
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
 8004a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	f043 0204 	orr.w	r2, r3, #4
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d011      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
 8004a5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f043 0208 	orr.w	r2, r3, #8
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 81ed 	beq.w	8004e66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 faf0 	bl	800508a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d103      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x17a>
 8004ace:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04f      	beq.n	8004b76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9f8 	bl	8004ecc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae6:	2b40      	cmp	r3, #64	; 0x40
 8004ae8:	d141      	bne.n	8004b6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004af8:	e853 3f00 	ldrex	r3, [r3]
 8004afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3314      	adds	r3, #20
 8004b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b26:	e841 2300 	strex	r3, r2, [r1]
 8004b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1d9      	bne.n	8004aea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	4a7d      	ldr	r2, [pc, #500]	; (8004d38 <HAL_UART_IRQHandler+0x3dc>)
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc fe7d 	bl	800184a <HAL_DMA_Abort_IT>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d016      	beq.n	8004b84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	4610      	mov	r0, r2
 8004b62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b64:	e00e      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f99a 	bl	8004ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00a      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f996 	bl	8004ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e006      	b.n	8004b84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f992 	bl	8004ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b82:	e170      	b.n	8004e66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b84:	bf00      	nop
    return;
 8004b86:	e16e      	b.n	8004e66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	f040 814a 	bne.w	8004e26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 8143 	beq.w	8004e26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 813c 	beq.w	8004e26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	f040 80b4 	bne.w	8004d3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 8140 	beq.w	8004e6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	f080 8139 	bcs.w	8004e6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004bfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0a:	f000 8088 	beq.w	8004d1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004c3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1d9      	bne.n	8004c0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e1      	bne.n	8004c5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e3      	bne.n	8004c96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004d00:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e3      	bne.n	8004cdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fc fd26 	bl	800176a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8c0 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d34:	e099      	b.n	8004e6a <HAL_UART_IRQHandler+0x50e>
 8004d36:	bf00      	nop
 8004d38:	08004f93 	.word	0x08004f93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 808b 	beq.w	8004e6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8086 	beq.w	8004e6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	330c      	adds	r3, #12
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d86:	647a      	str	r2, [r7, #68]	; 0x44
 8004d88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e3      	bne.n	8004d62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3314      	adds	r3, #20
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	623b      	str	r3, [r7, #32]
   return(result);
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3314      	adds	r3, #20
 8004dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dbe:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	e853 3f00 	ldrex	r3, [r3]
 8004dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0310 	bic.w	r3, r3, #16
 8004df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004e04:	61fa      	str	r2, [r7, #28]
 8004e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	617b      	str	r3, [r7, #20]
   return(result);
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e3      	bne.n	8004de0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f848 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e24:	e023      	b.n	8004e6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d009      	beq.n	8004e46 <HAL_UART_IRQHandler+0x4ea>
 8004e32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f8bb 	bl	8004fba <UART_Transmit_IT>
    return;
 8004e44:	e014      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00e      	beq.n	8004e70 <HAL_UART_IRQHandler+0x514>
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d008      	beq.n	8004e70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f8fb 	bl	800505a <UART_EndTransmit_IT>
    return;
 8004e64:	e004      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
    return;
 8004e66:	bf00      	nop
 8004e68:	e002      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e000      	b.n	8004e70 <HAL_UART_IRQHandler+0x514>
      return;
 8004e6e:	bf00      	nop
  }
}
 8004e70:	37e8      	adds	r7, #232	; 0xe8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop

08004e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e80:	bf00      	nop
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b095      	sub	sp, #84	; 0x54
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef4:	643a      	str	r2, [r7, #64]	; 0x40
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004efc:	e841 2300 	strex	r3, r2, [r1]
 8004f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1e5      	bne.n	8004ed4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e5      	bne.n	8004f08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d119      	bne.n	8004f78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	330c      	adds	r3, #12
 8004f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f023 0310 	bic.w	r3, r3, #16
 8004f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f64:	61ba      	str	r2, [r7, #24]
 8004f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	613b      	str	r3, [r7, #16]
   return(result);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f86:	bf00      	nop
 8004f88:	3754      	adds	r7, #84	; 0x54
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ff77 	bl	8004ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b21      	cmp	r3, #33	; 0x21
 8004fcc:	d13e      	bne.n	800504c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	d114      	bne.n	8005002 <UART_Transmit_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d110      	bne.n	8005002 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	1c9a      	adds	r2, r3, #2
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]
 8005000:	e008      	b.n	8005014 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	1c59      	adds	r1, r3, #1
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6211      	str	r1, [r2, #32]
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4619      	mov	r1, r3
 8005022:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10f      	bne.n	8005048 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68da      	ldr	r2, [r3, #12]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005036:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005046:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	e000      	b.n	800504e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800504c:	2302      	movs	r3, #2
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fefc 	bl	8004e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08c      	sub	sp, #48	; 0x30
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b22      	cmp	r3, #34	; 0x22
 800509c:	f040 80ab 	bne.w	80051f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a8:	d117      	bne.n	80050da <UART_Receive_IT+0x50>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d113      	bne.n	80050da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
 80050d8:	e026      	b.n	8005128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ec:	d007      	beq.n	80050fe <UART_Receive_IT+0x74>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <UART_Receive_IT+0x82>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d106      	bne.n	800510c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	b2da      	uxtb	r2, r3
 8005106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	e008      	b.n	800511e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005118:	b2da      	uxtb	r2, r3
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29b      	uxth	r3, r3
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	4619      	mov	r1, r3
 8005136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005138:	2b00      	cmp	r3, #0
 800513a:	d15a      	bne.n	80051f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68da      	ldr	r2, [r3, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f022 0220 	bic.w	r2, r2, #32
 800514a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800515a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695a      	ldr	r2, [r3, #20]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	2b01      	cmp	r3, #1
 800517a:	d135      	bne.n	80051e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	e853 3f00 	ldrex	r3, [r3]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 0310 	bic.w	r3, r3, #16
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	330c      	adds	r3, #12
 80051a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a2:	623a      	str	r2, [r7, #32]
 80051a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a6:	69f9      	ldr	r1, [r7, #28]
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	e841 2300 	strex	r3, r2, [r1]
 80051ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e5      	bne.n	8005182 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d10a      	bne.n	80051da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fe67 	bl	8004eb4 <HAL_UARTEx_RxEventCallback>
 80051e6:	e002      	b.n	80051ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f7ff fe4f 	bl	8004e8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e002      	b.n	80051f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3730      	adds	r7, #48	; 0x30
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b0c0      	sub	sp, #256	; 0x100
 8005206:	af00      	add	r7, sp, #0
 8005208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	68d9      	ldr	r1, [r3, #12]
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	ea40 0301 	orr.w	r3, r0, r1
 8005228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	431a      	orrs	r2, r3
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005266:	430b      	orrs	r3, r1
 8005268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	6999      	ldr	r1, [r3, #24]
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	ea40 0301 	orr.w	r3, r0, r1
 8005286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <UART_SetConfig+0x2cc>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d005      	beq.n	80052a0 <UART_SetConfig+0xa0>
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b8d      	ldr	r3, [pc, #564]	; (80054d0 <UART_SetConfig+0x2d0>)
 800529c:	429a      	cmp	r2, r3
 800529e:	d104      	bne.n	80052aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7fe fe6e 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 80052a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052a8:	e003      	b.n	80052b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7fe fe55 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80052ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	f040 810c 	bne.w	80054d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	1891      	adds	r1, r2, r2
 80052d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052da:	415b      	adcs	r3, r3
 80052dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052e2:	4621      	mov	r1, r4
 80052e4:	eb12 0801 	adds.w	r8, r2, r1
 80052e8:	4629      	mov	r1, r5
 80052ea:	eb43 0901 	adc.w	r9, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005302:	4690      	mov	r8, r2
 8005304:	4699      	mov	r9, r3
 8005306:	4623      	mov	r3, r4
 8005308:	eb18 0303 	adds.w	r3, r8, r3
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005310:	462b      	mov	r3, r5
 8005312:	eb49 0303 	adc.w	r3, r9, r3
 8005316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800532a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800532e:	460b      	mov	r3, r1
 8005330:	18db      	adds	r3, r3, r3
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	4613      	mov	r3, r2
 8005336:	eb42 0303 	adc.w	r3, r2, r3
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
 800533c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005344:	f7fb fa9a 	bl	800087c <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4b61      	ldr	r3, [pc, #388]	; (80054d4 <UART_SetConfig+0x2d4>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011c      	lsls	r4, r3, #4
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005370:	415b      	adcs	r3, r3
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005378:	4641      	mov	r1, r8
 800537a:	eb12 0a01 	adds.w	sl, r2, r1
 800537e:	4649      	mov	r1, r9
 8005380:	eb43 0b01 	adc.w	fp, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005398:	4692      	mov	sl, r2
 800539a:	469b      	mov	fp, r3
 800539c:	4643      	mov	r3, r8
 800539e:	eb1a 0303 	adds.w	r3, sl, r3
 80053a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a6:	464b      	mov	r3, r9
 80053a8:	eb4b 0303 	adc.w	r3, fp, r3
 80053ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053c4:	460b      	mov	r3, r1
 80053c6:	18db      	adds	r3, r3, r3
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ca:	4613      	mov	r3, r2
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
 80053d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053da:	f7fb fa4f 	bl	800087c <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	; 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005408:	441c      	add	r4, r3
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	63b9      	str	r1, [r7, #56]	; 0x38
 8005424:	415b      	adcs	r3, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800542c:	4641      	mov	r1, r8
 800542e:	1851      	adds	r1, r2, r1
 8005430:	6339      	str	r1, [r7, #48]	; 0x30
 8005432:	4649      	mov	r1, r9
 8005434:	414b      	adcs	r3, r1
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005444:	4659      	mov	r1, fp
 8005446:	00cb      	lsls	r3, r1, #3
 8005448:	4651      	mov	r1, sl
 800544a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544e:	4651      	mov	r1, sl
 8005450:	00ca      	lsls	r2, r1, #3
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	4603      	mov	r3, r0
 8005458:	4642      	mov	r2, r8
 800545a:	189b      	adds	r3, r3, r2
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800547c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005480:	460b      	mov	r3, r1
 8005482:	18db      	adds	r3, r3, r3
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	4613      	mov	r3, r2
 8005488:	eb42 0303 	adc.w	r3, r2, r3
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005496:	f7fb f9f1 	bl	800087c <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	; 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	3332      	adds	r3, #50	; 0x32
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 0207 	and.w	r2, r3, #7
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4422      	add	r2, r4
 80054c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c8:	e105      	b.n	80056d6 <UART_SetConfig+0x4d6>
 80054ca:	bf00      	nop
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40011400 	.word	0x40011400
 80054d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ea:	4642      	mov	r2, r8
 80054ec:	464b      	mov	r3, r9
 80054ee:	1891      	adds	r1, r2, r2
 80054f0:	6239      	str	r1, [r7, #32]
 80054f2:	415b      	adcs	r3, r3
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054fa:	4641      	mov	r1, r8
 80054fc:	1854      	adds	r4, r2, r1
 80054fe:	4649      	mov	r1, r9
 8005500:	eb43 0501 	adc.w	r5, r3, r1
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	00eb      	lsls	r3, r5, #3
 800550e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005512:	00e2      	lsls	r2, r4, #3
 8005514:	4614      	mov	r4, r2
 8005516:	461d      	mov	r5, r3
 8005518:	4643      	mov	r3, r8
 800551a:	18e3      	adds	r3, r4, r3
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005520:	464b      	mov	r3, r9
 8005522:	eb45 0303 	adc.w	r3, r5, r3
 8005526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005546:	4629      	mov	r1, r5
 8005548:	008b      	lsls	r3, r1, #2
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005550:	4621      	mov	r1, r4
 8005552:	008a      	lsls	r2, r1, #2
 8005554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005558:	f7fb f990 	bl	800087c <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011c      	lsls	r4, r3, #4
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	1891      	adds	r1, r2, r2
 8005582:	61b9      	str	r1, [r7, #24]
 8005584:	415b      	adcs	r3, r3
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800558c:	4641      	mov	r1, r8
 800558e:	1851      	adds	r1, r2, r1
 8005590:	6139      	str	r1, [r7, #16]
 8005592:	4649      	mov	r1, r9
 8005594:	414b      	adcs	r3, r1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a4:	4659      	mov	r1, fp
 80055a6:	00cb      	lsls	r3, r1, #3
 80055a8:	4651      	mov	r1, sl
 80055aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ae:	4651      	mov	r1, sl
 80055b0:	00ca      	lsls	r2, r1, #3
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	4642      	mov	r2, r8
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c0:	464b      	mov	r3, r9
 80055c2:	460a      	mov	r2, r1
 80055c4:	eb42 0303 	adc.w	r3, r2, r3
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055f6:	f7fb f941 	bl	800087c <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561e:	441c      	add	r4, r3
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	673b      	str	r3, [r7, #112]	; 0x70
 8005628:	677a      	str	r2, [r7, #116]	; 0x74
 800562a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	4641      	mov	r1, r8
 8005640:	1851      	adds	r1, r2, r1
 8005642:	6039      	str	r1, [r7, #0]
 8005644:	4649      	mov	r1, r9
 8005646:	414b      	adcs	r3, r1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005656:	4659      	mov	r1, fp
 8005658:	00cb      	lsls	r3, r1, #3
 800565a:	4651      	mov	r1, sl
 800565c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005660:	4651      	mov	r1, sl
 8005662:	00ca      	lsls	r2, r1, #3
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	4603      	mov	r3, r0
 800566a:	4642      	mov	r2, r8
 800566c:	189b      	adds	r3, r3, r2
 800566e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	663b      	str	r3, [r7, #96]	; 0x60
 8005684:	667a      	str	r2, [r7, #100]	; 0x64
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005692:	4649      	mov	r1, r9
 8005694:	008b      	lsls	r3, r1, #2
 8005696:	4641      	mov	r1, r8
 8005698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569c:	4641      	mov	r1, r8
 800569e:	008a      	lsls	r2, r1, #2
 80056a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056a4:	f7fb f8ea 	bl	800087c <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 1302 	umull	r1, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2164      	movs	r1, #100	; 0x64
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4422      	add	r2, r4
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	bf00      	nop
 80056d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	51eb851f 	.word	0x51eb851f

080056e8 <__errno>:
 80056e8:	4b01      	ldr	r3, [pc, #4]	; (80056f0 <__errno+0x8>)
 80056ea:	6818      	ldr	r0, [r3, #0]
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	20000014 	.word	0x20000014

080056f4 <__libc_init_array>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	4d0d      	ldr	r5, [pc, #52]	; (800572c <__libc_init_array+0x38>)
 80056f8:	4c0d      	ldr	r4, [pc, #52]	; (8005730 <__libc_init_array+0x3c>)
 80056fa:	1b64      	subs	r4, r4, r5
 80056fc:	10a4      	asrs	r4, r4, #2
 80056fe:	2600      	movs	r6, #0
 8005700:	42a6      	cmp	r6, r4
 8005702:	d109      	bne.n	8005718 <__libc_init_array+0x24>
 8005704:	4d0b      	ldr	r5, [pc, #44]	; (8005734 <__libc_init_array+0x40>)
 8005706:	4c0c      	ldr	r4, [pc, #48]	; (8005738 <__libc_init_array+0x44>)
 8005708:	f000 fc8e 	bl	8006028 <_init>
 800570c:	1b64      	subs	r4, r4, r5
 800570e:	10a4      	asrs	r4, r4, #2
 8005710:	2600      	movs	r6, #0
 8005712:	42a6      	cmp	r6, r4
 8005714:	d105      	bne.n	8005722 <__libc_init_array+0x2e>
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	f855 3b04 	ldr.w	r3, [r5], #4
 800571c:	4798      	blx	r3
 800571e:	3601      	adds	r6, #1
 8005720:	e7ee      	b.n	8005700 <__libc_init_array+0xc>
 8005722:	f855 3b04 	ldr.w	r3, [r5], #4
 8005726:	4798      	blx	r3
 8005728:	3601      	adds	r6, #1
 800572a:	e7f2      	b.n	8005712 <__libc_init_array+0x1e>
 800572c:	080060e4 	.word	0x080060e4
 8005730:	080060e4 	.word	0x080060e4
 8005734:	080060e4 	.word	0x080060e4
 8005738:	080060e8 	.word	0x080060e8

0800573c <memset>:
 800573c:	4402      	add	r2, r0
 800573e:	4603      	mov	r3, r0
 8005740:	4293      	cmp	r3, r2
 8005742:	d100      	bne.n	8005746 <memset+0xa>
 8005744:	4770      	bx	lr
 8005746:	f803 1b01 	strb.w	r1, [r3], #1
 800574a:	e7f9      	b.n	8005740 <memset+0x4>

0800574c <siprintf>:
 800574c:	b40e      	push	{r1, r2, r3}
 800574e:	b500      	push	{lr}
 8005750:	b09c      	sub	sp, #112	; 0x70
 8005752:	ab1d      	add	r3, sp, #116	; 0x74
 8005754:	9002      	str	r0, [sp, #8]
 8005756:	9006      	str	r0, [sp, #24]
 8005758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800575c:	4809      	ldr	r0, [pc, #36]	; (8005784 <siprintf+0x38>)
 800575e:	9107      	str	r1, [sp, #28]
 8005760:	9104      	str	r1, [sp, #16]
 8005762:	4909      	ldr	r1, [pc, #36]	; (8005788 <siprintf+0x3c>)
 8005764:	f853 2b04 	ldr.w	r2, [r3], #4
 8005768:	9105      	str	r1, [sp, #20]
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	a902      	add	r1, sp, #8
 8005770:	f000 f868 	bl	8005844 <_svfiprintf_r>
 8005774:	9b02      	ldr	r3, [sp, #8]
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	b01c      	add	sp, #112	; 0x70
 800577c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005780:	b003      	add	sp, #12
 8005782:	4770      	bx	lr
 8005784:	20000014 	.word	0x20000014
 8005788:	ffff0208 	.word	0xffff0208

0800578c <__ssputs_r>:
 800578c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005790:	688e      	ldr	r6, [r1, #8]
 8005792:	429e      	cmp	r6, r3
 8005794:	4682      	mov	sl, r0
 8005796:	460c      	mov	r4, r1
 8005798:	4690      	mov	r8, r2
 800579a:	461f      	mov	r7, r3
 800579c:	d838      	bhi.n	8005810 <__ssputs_r+0x84>
 800579e:	898a      	ldrh	r2, [r1, #12]
 80057a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80057a4:	d032      	beq.n	800580c <__ssputs_r+0x80>
 80057a6:	6825      	ldr	r5, [r4, #0]
 80057a8:	6909      	ldr	r1, [r1, #16]
 80057aa:	eba5 0901 	sub.w	r9, r5, r1
 80057ae:	6965      	ldr	r5, [r4, #20]
 80057b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057b8:	3301      	adds	r3, #1
 80057ba:	444b      	add	r3, r9
 80057bc:	106d      	asrs	r5, r5, #1
 80057be:	429d      	cmp	r5, r3
 80057c0:	bf38      	it	cc
 80057c2:	461d      	movcc	r5, r3
 80057c4:	0553      	lsls	r3, r2, #21
 80057c6:	d531      	bpl.n	800582c <__ssputs_r+0xa0>
 80057c8:	4629      	mov	r1, r5
 80057ca:	f000 fb63 	bl	8005e94 <_malloc_r>
 80057ce:	4606      	mov	r6, r0
 80057d0:	b950      	cbnz	r0, 80057e8 <__ssputs_r+0x5c>
 80057d2:	230c      	movs	r3, #12
 80057d4:	f8ca 3000 	str.w	r3, [sl]
 80057d8:	89a3      	ldrh	r3, [r4, #12]
 80057da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057de:	81a3      	strh	r3, [r4, #12]
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	6921      	ldr	r1, [r4, #16]
 80057ea:	464a      	mov	r2, r9
 80057ec:	f000 fabe 	bl	8005d6c <memcpy>
 80057f0:	89a3      	ldrh	r3, [r4, #12]
 80057f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	81a3      	strh	r3, [r4, #12]
 80057fc:	6126      	str	r6, [r4, #16]
 80057fe:	6165      	str	r5, [r4, #20]
 8005800:	444e      	add	r6, r9
 8005802:	eba5 0509 	sub.w	r5, r5, r9
 8005806:	6026      	str	r6, [r4, #0]
 8005808:	60a5      	str	r5, [r4, #8]
 800580a:	463e      	mov	r6, r7
 800580c:	42be      	cmp	r6, r7
 800580e:	d900      	bls.n	8005812 <__ssputs_r+0x86>
 8005810:	463e      	mov	r6, r7
 8005812:	6820      	ldr	r0, [r4, #0]
 8005814:	4632      	mov	r2, r6
 8005816:	4641      	mov	r1, r8
 8005818:	f000 fab6 	bl	8005d88 <memmove>
 800581c:	68a3      	ldr	r3, [r4, #8]
 800581e:	1b9b      	subs	r3, r3, r6
 8005820:	60a3      	str	r3, [r4, #8]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	4433      	add	r3, r6
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	2000      	movs	r0, #0
 800582a:	e7db      	b.n	80057e4 <__ssputs_r+0x58>
 800582c:	462a      	mov	r2, r5
 800582e:	f000 fba5 	bl	8005f7c <_realloc_r>
 8005832:	4606      	mov	r6, r0
 8005834:	2800      	cmp	r0, #0
 8005836:	d1e1      	bne.n	80057fc <__ssputs_r+0x70>
 8005838:	6921      	ldr	r1, [r4, #16]
 800583a:	4650      	mov	r0, sl
 800583c:	f000 fabe 	bl	8005dbc <_free_r>
 8005840:	e7c7      	b.n	80057d2 <__ssputs_r+0x46>
	...

08005844 <_svfiprintf_r>:
 8005844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005848:	4698      	mov	r8, r3
 800584a:	898b      	ldrh	r3, [r1, #12]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	b09d      	sub	sp, #116	; 0x74
 8005850:	4607      	mov	r7, r0
 8005852:	460d      	mov	r5, r1
 8005854:	4614      	mov	r4, r2
 8005856:	d50e      	bpl.n	8005876 <_svfiprintf_r+0x32>
 8005858:	690b      	ldr	r3, [r1, #16]
 800585a:	b963      	cbnz	r3, 8005876 <_svfiprintf_r+0x32>
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	f000 fb19 	bl	8005e94 <_malloc_r>
 8005862:	6028      	str	r0, [r5, #0]
 8005864:	6128      	str	r0, [r5, #16]
 8005866:	b920      	cbnz	r0, 8005872 <_svfiprintf_r+0x2e>
 8005868:	230c      	movs	r3, #12
 800586a:	603b      	str	r3, [r7, #0]
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	e0d1      	b.n	8005a16 <_svfiprintf_r+0x1d2>
 8005872:	2340      	movs	r3, #64	; 0x40
 8005874:	616b      	str	r3, [r5, #20]
 8005876:	2300      	movs	r3, #0
 8005878:	9309      	str	r3, [sp, #36]	; 0x24
 800587a:	2320      	movs	r3, #32
 800587c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005880:	f8cd 800c 	str.w	r8, [sp, #12]
 8005884:	2330      	movs	r3, #48	; 0x30
 8005886:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005a30 <_svfiprintf_r+0x1ec>
 800588a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800588e:	f04f 0901 	mov.w	r9, #1
 8005892:	4623      	mov	r3, r4
 8005894:	469a      	mov	sl, r3
 8005896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800589a:	b10a      	cbz	r2, 80058a0 <_svfiprintf_r+0x5c>
 800589c:	2a25      	cmp	r2, #37	; 0x25
 800589e:	d1f9      	bne.n	8005894 <_svfiprintf_r+0x50>
 80058a0:	ebba 0b04 	subs.w	fp, sl, r4
 80058a4:	d00b      	beq.n	80058be <_svfiprintf_r+0x7a>
 80058a6:	465b      	mov	r3, fp
 80058a8:	4622      	mov	r2, r4
 80058aa:	4629      	mov	r1, r5
 80058ac:	4638      	mov	r0, r7
 80058ae:	f7ff ff6d 	bl	800578c <__ssputs_r>
 80058b2:	3001      	adds	r0, #1
 80058b4:	f000 80aa 	beq.w	8005a0c <_svfiprintf_r+0x1c8>
 80058b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058ba:	445a      	add	r2, fp
 80058bc:	9209      	str	r2, [sp, #36]	; 0x24
 80058be:	f89a 3000 	ldrb.w	r3, [sl]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80a2 	beq.w	8005a0c <_svfiprintf_r+0x1c8>
 80058c8:	2300      	movs	r3, #0
 80058ca:	f04f 32ff 	mov.w	r2, #4294967295
 80058ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058d2:	f10a 0a01 	add.w	sl, sl, #1
 80058d6:	9304      	str	r3, [sp, #16]
 80058d8:	9307      	str	r3, [sp, #28]
 80058da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058de:	931a      	str	r3, [sp, #104]	; 0x68
 80058e0:	4654      	mov	r4, sl
 80058e2:	2205      	movs	r2, #5
 80058e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058e8:	4851      	ldr	r0, [pc, #324]	; (8005a30 <_svfiprintf_r+0x1ec>)
 80058ea:	f7fa fc91 	bl	8000210 <memchr>
 80058ee:	9a04      	ldr	r2, [sp, #16]
 80058f0:	b9d8      	cbnz	r0, 800592a <_svfiprintf_r+0xe6>
 80058f2:	06d0      	lsls	r0, r2, #27
 80058f4:	bf44      	itt	mi
 80058f6:	2320      	movmi	r3, #32
 80058f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058fc:	0711      	lsls	r1, r2, #28
 80058fe:	bf44      	itt	mi
 8005900:	232b      	movmi	r3, #43	; 0x2b
 8005902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005906:	f89a 3000 	ldrb.w	r3, [sl]
 800590a:	2b2a      	cmp	r3, #42	; 0x2a
 800590c:	d015      	beq.n	800593a <_svfiprintf_r+0xf6>
 800590e:	9a07      	ldr	r2, [sp, #28]
 8005910:	4654      	mov	r4, sl
 8005912:	2000      	movs	r0, #0
 8005914:	f04f 0c0a 	mov.w	ip, #10
 8005918:	4621      	mov	r1, r4
 800591a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800591e:	3b30      	subs	r3, #48	; 0x30
 8005920:	2b09      	cmp	r3, #9
 8005922:	d94e      	bls.n	80059c2 <_svfiprintf_r+0x17e>
 8005924:	b1b0      	cbz	r0, 8005954 <_svfiprintf_r+0x110>
 8005926:	9207      	str	r2, [sp, #28]
 8005928:	e014      	b.n	8005954 <_svfiprintf_r+0x110>
 800592a:	eba0 0308 	sub.w	r3, r0, r8
 800592e:	fa09 f303 	lsl.w	r3, r9, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	46a2      	mov	sl, r4
 8005938:	e7d2      	b.n	80058e0 <_svfiprintf_r+0x9c>
 800593a:	9b03      	ldr	r3, [sp, #12]
 800593c:	1d19      	adds	r1, r3, #4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	9103      	str	r1, [sp, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	bfbb      	ittet	lt
 8005946:	425b      	neglt	r3, r3
 8005948:	f042 0202 	orrlt.w	r2, r2, #2
 800594c:	9307      	strge	r3, [sp, #28]
 800594e:	9307      	strlt	r3, [sp, #28]
 8005950:	bfb8      	it	lt
 8005952:	9204      	strlt	r2, [sp, #16]
 8005954:	7823      	ldrb	r3, [r4, #0]
 8005956:	2b2e      	cmp	r3, #46	; 0x2e
 8005958:	d10c      	bne.n	8005974 <_svfiprintf_r+0x130>
 800595a:	7863      	ldrb	r3, [r4, #1]
 800595c:	2b2a      	cmp	r3, #42	; 0x2a
 800595e:	d135      	bne.n	80059cc <_svfiprintf_r+0x188>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	9203      	str	r2, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfb8      	it	lt
 800596c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005970:	3402      	adds	r4, #2
 8005972:	9305      	str	r3, [sp, #20]
 8005974:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005a40 <_svfiprintf_r+0x1fc>
 8005978:	7821      	ldrb	r1, [r4, #0]
 800597a:	2203      	movs	r2, #3
 800597c:	4650      	mov	r0, sl
 800597e:	f7fa fc47 	bl	8000210 <memchr>
 8005982:	b140      	cbz	r0, 8005996 <_svfiprintf_r+0x152>
 8005984:	2340      	movs	r3, #64	; 0x40
 8005986:	eba0 000a 	sub.w	r0, r0, sl
 800598a:	fa03 f000 	lsl.w	r0, r3, r0
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	4303      	orrs	r3, r0
 8005992:	3401      	adds	r4, #1
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800599a:	4826      	ldr	r0, [pc, #152]	; (8005a34 <_svfiprintf_r+0x1f0>)
 800599c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059a0:	2206      	movs	r2, #6
 80059a2:	f7fa fc35 	bl	8000210 <memchr>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d038      	beq.n	8005a1c <_svfiprintf_r+0x1d8>
 80059aa:	4b23      	ldr	r3, [pc, #140]	; (8005a38 <_svfiprintf_r+0x1f4>)
 80059ac:	bb1b      	cbnz	r3, 80059f6 <_svfiprintf_r+0x1b2>
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	3307      	adds	r3, #7
 80059b2:	f023 0307 	bic.w	r3, r3, #7
 80059b6:	3308      	adds	r3, #8
 80059b8:	9303      	str	r3, [sp, #12]
 80059ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059bc:	4433      	add	r3, r6
 80059be:	9309      	str	r3, [sp, #36]	; 0x24
 80059c0:	e767      	b.n	8005892 <_svfiprintf_r+0x4e>
 80059c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80059c6:	460c      	mov	r4, r1
 80059c8:	2001      	movs	r0, #1
 80059ca:	e7a5      	b.n	8005918 <_svfiprintf_r+0xd4>
 80059cc:	2300      	movs	r3, #0
 80059ce:	3401      	adds	r4, #1
 80059d0:	9305      	str	r3, [sp, #20]
 80059d2:	4619      	mov	r1, r3
 80059d4:	f04f 0c0a 	mov.w	ip, #10
 80059d8:	4620      	mov	r0, r4
 80059da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059de:	3a30      	subs	r2, #48	; 0x30
 80059e0:	2a09      	cmp	r2, #9
 80059e2:	d903      	bls.n	80059ec <_svfiprintf_r+0x1a8>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0c5      	beq.n	8005974 <_svfiprintf_r+0x130>
 80059e8:	9105      	str	r1, [sp, #20]
 80059ea:	e7c3      	b.n	8005974 <_svfiprintf_r+0x130>
 80059ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80059f0:	4604      	mov	r4, r0
 80059f2:	2301      	movs	r3, #1
 80059f4:	e7f0      	b.n	80059d8 <_svfiprintf_r+0x194>
 80059f6:	ab03      	add	r3, sp, #12
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	462a      	mov	r2, r5
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <_svfiprintf_r+0x1f8>)
 80059fe:	a904      	add	r1, sp, #16
 8005a00:	4638      	mov	r0, r7
 8005a02:	f3af 8000 	nop.w
 8005a06:	1c42      	adds	r2, r0, #1
 8005a08:	4606      	mov	r6, r0
 8005a0a:	d1d6      	bne.n	80059ba <_svfiprintf_r+0x176>
 8005a0c:	89ab      	ldrh	r3, [r5, #12]
 8005a0e:	065b      	lsls	r3, r3, #25
 8005a10:	f53f af2c 	bmi.w	800586c <_svfiprintf_r+0x28>
 8005a14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a16:	b01d      	add	sp, #116	; 0x74
 8005a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a1c:	ab03      	add	r3, sp, #12
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	462a      	mov	r2, r5
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <_svfiprintf_r+0x1f8>)
 8005a24:	a904      	add	r1, sp, #16
 8005a26:	4638      	mov	r0, r7
 8005a28:	f000 f87a 	bl	8005b20 <_printf_i>
 8005a2c:	e7eb      	b.n	8005a06 <_svfiprintf_r+0x1c2>
 8005a2e:	bf00      	nop
 8005a30:	080060a8 	.word	0x080060a8
 8005a34:	080060b2 	.word	0x080060b2
 8005a38:	00000000 	.word	0x00000000
 8005a3c:	0800578d 	.word	0x0800578d
 8005a40:	080060ae 	.word	0x080060ae

08005a44 <_printf_common>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	4616      	mov	r6, r2
 8005a4a:	4699      	mov	r9, r3
 8005a4c:	688a      	ldr	r2, [r1, #8]
 8005a4e:	690b      	ldr	r3, [r1, #16]
 8005a50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a54:	4293      	cmp	r3, r2
 8005a56:	bfb8      	it	lt
 8005a58:	4613      	movlt	r3, r2
 8005a5a:	6033      	str	r3, [r6, #0]
 8005a5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a60:	4607      	mov	r7, r0
 8005a62:	460c      	mov	r4, r1
 8005a64:	b10a      	cbz	r2, 8005a6a <_printf_common+0x26>
 8005a66:	3301      	adds	r3, #1
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	0699      	lsls	r1, r3, #26
 8005a6e:	bf42      	ittt	mi
 8005a70:	6833      	ldrmi	r3, [r6, #0]
 8005a72:	3302      	addmi	r3, #2
 8005a74:	6033      	strmi	r3, [r6, #0]
 8005a76:	6825      	ldr	r5, [r4, #0]
 8005a78:	f015 0506 	ands.w	r5, r5, #6
 8005a7c:	d106      	bne.n	8005a8c <_printf_common+0x48>
 8005a7e:	f104 0a19 	add.w	sl, r4, #25
 8005a82:	68e3      	ldr	r3, [r4, #12]
 8005a84:	6832      	ldr	r2, [r6, #0]
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	42ab      	cmp	r3, r5
 8005a8a:	dc26      	bgt.n	8005ada <_printf_common+0x96>
 8005a8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a90:	1e13      	subs	r3, r2, #0
 8005a92:	6822      	ldr	r2, [r4, #0]
 8005a94:	bf18      	it	ne
 8005a96:	2301      	movne	r3, #1
 8005a98:	0692      	lsls	r2, r2, #26
 8005a9a:	d42b      	bmi.n	8005af4 <_printf_common+0xb0>
 8005a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	47c0      	blx	r8
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	d01e      	beq.n	8005ae8 <_printf_common+0xa4>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	68e5      	ldr	r5, [r4, #12]
 8005aae:	6832      	ldr	r2, [r6, #0]
 8005ab0:	f003 0306 	and.w	r3, r3, #6
 8005ab4:	2b04      	cmp	r3, #4
 8005ab6:	bf08      	it	eq
 8005ab8:	1aad      	subeq	r5, r5, r2
 8005aba:	68a3      	ldr	r3, [r4, #8]
 8005abc:	6922      	ldr	r2, [r4, #16]
 8005abe:	bf0c      	ite	eq
 8005ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac4:	2500      	movne	r5, #0
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	bfc4      	itt	gt
 8005aca:	1a9b      	subgt	r3, r3, r2
 8005acc:	18ed      	addgt	r5, r5, r3
 8005ace:	2600      	movs	r6, #0
 8005ad0:	341a      	adds	r4, #26
 8005ad2:	42b5      	cmp	r5, r6
 8005ad4:	d11a      	bne.n	8005b0c <_printf_common+0xc8>
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	e008      	b.n	8005aec <_printf_common+0xa8>
 8005ada:	2301      	movs	r3, #1
 8005adc:	4652      	mov	r2, sl
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4638      	mov	r0, r7
 8005ae2:	47c0      	blx	r8
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d103      	bne.n	8005af0 <_printf_common+0xac>
 8005ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8005aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af0:	3501      	adds	r5, #1
 8005af2:	e7c6      	b.n	8005a82 <_printf_common+0x3e>
 8005af4:	18e1      	adds	r1, r4, r3
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	2030      	movs	r0, #48	; 0x30
 8005afa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005afe:	4422      	add	r2, r4
 8005b00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b08:	3302      	adds	r3, #2
 8005b0a:	e7c7      	b.n	8005a9c <_printf_common+0x58>
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	4622      	mov	r2, r4
 8005b10:	4649      	mov	r1, r9
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d0e6      	beq.n	8005ae8 <_printf_common+0xa4>
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7d9      	b.n	8005ad2 <_printf_common+0x8e>
	...

08005b20 <_printf_i>:
 8005b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	7e0f      	ldrb	r7, [r1, #24]
 8005b26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b28:	2f78      	cmp	r7, #120	; 0x78
 8005b2a:	4691      	mov	r9, r2
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	469a      	mov	sl, r3
 8005b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005b36:	d807      	bhi.n	8005b48 <_printf_i+0x28>
 8005b38:	2f62      	cmp	r7, #98	; 0x62
 8005b3a:	d80a      	bhi.n	8005b52 <_printf_i+0x32>
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	f000 80d8 	beq.w	8005cf2 <_printf_i+0x1d2>
 8005b42:	2f58      	cmp	r7, #88	; 0x58
 8005b44:	f000 80a3 	beq.w	8005c8e <_printf_i+0x16e>
 8005b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b50:	e03a      	b.n	8005bc8 <_printf_i+0xa8>
 8005b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b56:	2b15      	cmp	r3, #21
 8005b58:	d8f6      	bhi.n	8005b48 <_printf_i+0x28>
 8005b5a:	a101      	add	r1, pc, #4	; (adr r1, 8005b60 <_printf_i+0x40>)
 8005b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b60:	08005bb9 	.word	0x08005bb9
 8005b64:	08005bcd 	.word	0x08005bcd
 8005b68:	08005b49 	.word	0x08005b49
 8005b6c:	08005b49 	.word	0x08005b49
 8005b70:	08005b49 	.word	0x08005b49
 8005b74:	08005b49 	.word	0x08005b49
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005b49 	.word	0x08005b49
 8005b80:	08005b49 	.word	0x08005b49
 8005b84:	08005b49 	.word	0x08005b49
 8005b88:	08005b49 	.word	0x08005b49
 8005b8c:	08005cd9 	.word	0x08005cd9
 8005b90:	08005bfd 	.word	0x08005bfd
 8005b94:	08005cbb 	.word	0x08005cbb
 8005b98:	08005b49 	.word	0x08005b49
 8005b9c:	08005b49 	.word	0x08005b49
 8005ba0:	08005cfb 	.word	0x08005cfb
 8005ba4:	08005b49 	.word	0x08005b49
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b49 	.word	0x08005b49
 8005bb0:	08005b49 	.word	0x08005b49
 8005bb4:	08005cc3 	.word	0x08005cc3
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	602a      	str	r2, [r5, #0]
 8005bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e0a3      	b.n	8005d14 <_printf_i+0x1f4>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	6829      	ldr	r1, [r5, #0]
 8005bd0:	0606      	lsls	r6, r0, #24
 8005bd2:	f101 0304 	add.w	r3, r1, #4
 8005bd6:	d50a      	bpl.n	8005bee <_printf_i+0xce>
 8005bd8:	680e      	ldr	r6, [r1, #0]
 8005bda:	602b      	str	r3, [r5, #0]
 8005bdc:	2e00      	cmp	r6, #0
 8005bde:	da03      	bge.n	8005be8 <_printf_i+0xc8>
 8005be0:	232d      	movs	r3, #45	; 0x2d
 8005be2:	4276      	negs	r6, r6
 8005be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005be8:	485e      	ldr	r0, [pc, #376]	; (8005d64 <_printf_i+0x244>)
 8005bea:	230a      	movs	r3, #10
 8005bec:	e019      	b.n	8005c22 <_printf_i+0x102>
 8005bee:	680e      	ldr	r6, [r1, #0]
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bf6:	bf18      	it	ne
 8005bf8:	b236      	sxthne	r6, r6
 8005bfa:	e7ef      	b.n	8005bdc <_printf_i+0xbc>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1d19      	adds	r1, r3, #4
 8005c02:	6029      	str	r1, [r5, #0]
 8005c04:	0601      	lsls	r1, r0, #24
 8005c06:	d501      	bpl.n	8005c0c <_printf_i+0xec>
 8005c08:	681e      	ldr	r6, [r3, #0]
 8005c0a:	e002      	b.n	8005c12 <_printf_i+0xf2>
 8005c0c:	0646      	lsls	r6, r0, #25
 8005c0e:	d5fb      	bpl.n	8005c08 <_printf_i+0xe8>
 8005c10:	881e      	ldrh	r6, [r3, #0]
 8005c12:	4854      	ldr	r0, [pc, #336]	; (8005d64 <_printf_i+0x244>)
 8005c14:	2f6f      	cmp	r7, #111	; 0x6f
 8005c16:	bf0c      	ite	eq
 8005c18:	2308      	moveq	r3, #8
 8005c1a:	230a      	movne	r3, #10
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c22:	6865      	ldr	r5, [r4, #4]
 8005c24:	60a5      	str	r5, [r4, #8]
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	bfa2      	ittt	ge
 8005c2a:	6821      	ldrge	r1, [r4, #0]
 8005c2c:	f021 0104 	bicge.w	r1, r1, #4
 8005c30:	6021      	strge	r1, [r4, #0]
 8005c32:	b90e      	cbnz	r6, 8005c38 <_printf_i+0x118>
 8005c34:	2d00      	cmp	r5, #0
 8005c36:	d04d      	beq.n	8005cd4 <_printf_i+0x1b4>
 8005c38:	4615      	mov	r5, r2
 8005c3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005c3e:	fb03 6711 	mls	r7, r3, r1, r6
 8005c42:	5dc7      	ldrb	r7, [r0, r7]
 8005c44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c48:	4637      	mov	r7, r6
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	d9f4      	bls.n	8005c3a <_printf_i+0x11a>
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d10b      	bne.n	8005c6c <_printf_i+0x14c>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07de      	lsls	r6, r3, #31
 8005c58:	d508      	bpl.n	8005c6c <_printf_i+0x14c>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6861      	ldr	r1, [r4, #4]
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	bfde      	ittt	le
 8005c62:	2330      	movle	r3, #48	; 0x30
 8005c64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c6c:	1b52      	subs	r2, r2, r5
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	f8cd a000 	str.w	sl, [sp]
 8005c74:	464b      	mov	r3, r9
 8005c76:	aa03      	add	r2, sp, #12
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7ff fee2 	bl	8005a44 <_printf_common>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d14c      	bne.n	8005d1e <_printf_i+0x1fe>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b004      	add	sp, #16
 8005c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8e:	4835      	ldr	r0, [pc, #212]	; (8005d64 <_printf_i+0x244>)
 8005c90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c94:	6829      	ldr	r1, [r5, #0]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c9c:	6029      	str	r1, [r5, #0]
 8005c9e:	061d      	lsls	r5, r3, #24
 8005ca0:	d514      	bpl.n	8005ccc <_printf_i+0x1ac>
 8005ca2:	07df      	lsls	r7, r3, #31
 8005ca4:	bf44      	itt	mi
 8005ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8005caa:	6023      	strmi	r3, [r4, #0]
 8005cac:	b91e      	cbnz	r6, 8005cb6 <_printf_i+0x196>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	f023 0320 	bic.w	r3, r3, #32
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	2310      	movs	r3, #16
 8005cb8:	e7b0      	b.n	8005c1c <_printf_i+0xfc>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	f043 0320 	orr.w	r3, r3, #32
 8005cc0:	6023      	str	r3, [r4, #0]
 8005cc2:	2378      	movs	r3, #120	; 0x78
 8005cc4:	4828      	ldr	r0, [pc, #160]	; (8005d68 <_printf_i+0x248>)
 8005cc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cca:	e7e3      	b.n	8005c94 <_printf_i+0x174>
 8005ccc:	0659      	lsls	r1, r3, #25
 8005cce:	bf48      	it	mi
 8005cd0:	b2b6      	uxthmi	r6, r6
 8005cd2:	e7e6      	b.n	8005ca2 <_printf_i+0x182>
 8005cd4:	4615      	mov	r5, r2
 8005cd6:	e7bb      	b.n	8005c50 <_printf_i+0x130>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	6826      	ldr	r6, [r4, #0]
 8005cdc:	6961      	ldr	r1, [r4, #20]
 8005cde:	1d18      	adds	r0, r3, #4
 8005ce0:	6028      	str	r0, [r5, #0]
 8005ce2:	0635      	lsls	r5, r6, #24
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	d501      	bpl.n	8005cec <_printf_i+0x1cc>
 8005ce8:	6019      	str	r1, [r3, #0]
 8005cea:	e002      	b.n	8005cf2 <_printf_i+0x1d2>
 8005cec:	0670      	lsls	r0, r6, #25
 8005cee:	d5fb      	bpl.n	8005ce8 <_printf_i+0x1c8>
 8005cf0:	8019      	strh	r1, [r3, #0]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6123      	str	r3, [r4, #16]
 8005cf6:	4615      	mov	r5, r2
 8005cf8:	e7ba      	b.n	8005c70 <_printf_i+0x150>
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	1d1a      	adds	r2, r3, #4
 8005cfe:	602a      	str	r2, [r5, #0]
 8005d00:	681d      	ldr	r5, [r3, #0]
 8005d02:	6862      	ldr	r2, [r4, #4]
 8005d04:	2100      	movs	r1, #0
 8005d06:	4628      	mov	r0, r5
 8005d08:	f7fa fa82 	bl	8000210 <memchr>
 8005d0c:	b108      	cbz	r0, 8005d12 <_printf_i+0x1f2>
 8005d0e:	1b40      	subs	r0, r0, r5
 8005d10:	6060      	str	r0, [r4, #4]
 8005d12:	6863      	ldr	r3, [r4, #4]
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	2300      	movs	r3, #0
 8005d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d1c:	e7a8      	b.n	8005c70 <_printf_i+0x150>
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	462a      	mov	r2, r5
 8005d22:	4649      	mov	r1, r9
 8005d24:	4640      	mov	r0, r8
 8005d26:	47d0      	blx	sl
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d0ab      	beq.n	8005c84 <_printf_i+0x164>
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	079b      	lsls	r3, r3, #30
 8005d30:	d413      	bmi.n	8005d5a <_printf_i+0x23a>
 8005d32:	68e0      	ldr	r0, [r4, #12]
 8005d34:	9b03      	ldr	r3, [sp, #12]
 8005d36:	4298      	cmp	r0, r3
 8005d38:	bfb8      	it	lt
 8005d3a:	4618      	movlt	r0, r3
 8005d3c:	e7a4      	b.n	8005c88 <_printf_i+0x168>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	4632      	mov	r2, r6
 8005d42:	4649      	mov	r1, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	47d0      	blx	sl
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d09b      	beq.n	8005c84 <_printf_i+0x164>
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	9903      	ldr	r1, [sp, #12]
 8005d52:	1a5b      	subs	r3, r3, r1
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dcf2      	bgt.n	8005d3e <_printf_i+0x21e>
 8005d58:	e7eb      	b.n	8005d32 <_printf_i+0x212>
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	f104 0619 	add.w	r6, r4, #25
 8005d60:	e7f5      	b.n	8005d4e <_printf_i+0x22e>
 8005d62:	bf00      	nop
 8005d64:	080060b9 	.word	0x080060b9
 8005d68:	080060ca 	.word	0x080060ca

08005d6c <memcpy>:
 8005d6c:	440a      	add	r2, r1
 8005d6e:	4291      	cmp	r1, r2
 8005d70:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d74:	d100      	bne.n	8005d78 <memcpy+0xc>
 8005d76:	4770      	bx	lr
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d82:	4291      	cmp	r1, r2
 8005d84:	d1f9      	bne.n	8005d7a <memcpy+0xe>
 8005d86:	bd10      	pop	{r4, pc}

08005d88 <memmove>:
 8005d88:	4288      	cmp	r0, r1
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	eb01 0402 	add.w	r4, r1, r2
 8005d90:	d902      	bls.n	8005d98 <memmove+0x10>
 8005d92:	4284      	cmp	r4, r0
 8005d94:	4623      	mov	r3, r4
 8005d96:	d807      	bhi.n	8005da8 <memmove+0x20>
 8005d98:	1e43      	subs	r3, r0, #1
 8005d9a:	42a1      	cmp	r1, r4
 8005d9c:	d008      	beq.n	8005db0 <memmove+0x28>
 8005d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005da6:	e7f8      	b.n	8005d9a <memmove+0x12>
 8005da8:	4402      	add	r2, r0
 8005daa:	4601      	mov	r1, r0
 8005dac:	428a      	cmp	r2, r1
 8005dae:	d100      	bne.n	8005db2 <memmove+0x2a>
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dba:	e7f7      	b.n	8005dac <memmove+0x24>

08005dbc <_free_r>:
 8005dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dbe:	2900      	cmp	r1, #0
 8005dc0:	d044      	beq.n	8005e4c <_free_r+0x90>
 8005dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dc6:	9001      	str	r0, [sp, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f1a1 0404 	sub.w	r4, r1, #4
 8005dce:	bfb8      	it	lt
 8005dd0:	18e4      	addlt	r4, r4, r3
 8005dd2:	f000 f913 	bl	8005ffc <__malloc_lock>
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <_free_r+0x94>)
 8005dd8:	9801      	ldr	r0, [sp, #4]
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	b933      	cbnz	r3, 8005dec <_free_r+0x30>
 8005dde:	6063      	str	r3, [r4, #4]
 8005de0:	6014      	str	r4, [r2, #0]
 8005de2:	b003      	add	sp, #12
 8005de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005de8:	f000 b90e 	b.w	8006008 <__malloc_unlock>
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	d908      	bls.n	8005e02 <_free_r+0x46>
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	1961      	adds	r1, r4, r5
 8005df4:	428b      	cmp	r3, r1
 8005df6:	bf01      	itttt	eq
 8005df8:	6819      	ldreq	r1, [r3, #0]
 8005dfa:	685b      	ldreq	r3, [r3, #4]
 8005dfc:	1949      	addeq	r1, r1, r5
 8005dfe:	6021      	streq	r1, [r4, #0]
 8005e00:	e7ed      	b.n	8005dde <_free_r+0x22>
 8005e02:	461a      	mov	r2, r3
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	b10b      	cbz	r3, 8005e0c <_free_r+0x50>
 8005e08:	42a3      	cmp	r3, r4
 8005e0a:	d9fa      	bls.n	8005e02 <_free_r+0x46>
 8005e0c:	6811      	ldr	r1, [r2, #0]
 8005e0e:	1855      	adds	r5, r2, r1
 8005e10:	42a5      	cmp	r5, r4
 8005e12:	d10b      	bne.n	8005e2c <_free_r+0x70>
 8005e14:	6824      	ldr	r4, [r4, #0]
 8005e16:	4421      	add	r1, r4
 8005e18:	1854      	adds	r4, r2, r1
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	d1e0      	bne.n	8005de2 <_free_r+0x26>
 8005e20:	681c      	ldr	r4, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	6053      	str	r3, [r2, #4]
 8005e26:	4421      	add	r1, r4
 8005e28:	6011      	str	r1, [r2, #0]
 8005e2a:	e7da      	b.n	8005de2 <_free_r+0x26>
 8005e2c:	d902      	bls.n	8005e34 <_free_r+0x78>
 8005e2e:	230c      	movs	r3, #12
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	e7d6      	b.n	8005de2 <_free_r+0x26>
 8005e34:	6825      	ldr	r5, [r4, #0]
 8005e36:	1961      	adds	r1, r4, r5
 8005e38:	428b      	cmp	r3, r1
 8005e3a:	bf04      	itt	eq
 8005e3c:	6819      	ldreq	r1, [r3, #0]
 8005e3e:	685b      	ldreq	r3, [r3, #4]
 8005e40:	6063      	str	r3, [r4, #4]
 8005e42:	bf04      	itt	eq
 8005e44:	1949      	addeq	r1, r1, r5
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	6054      	str	r4, [r2, #4]
 8005e4a:	e7ca      	b.n	8005de2 <_free_r+0x26>
 8005e4c:	b003      	add	sp, #12
 8005e4e:	bd30      	pop	{r4, r5, pc}
 8005e50:	20000154 	.word	0x20000154

08005e54 <sbrk_aligned>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	4e0e      	ldr	r6, [pc, #56]	; (8005e90 <sbrk_aligned+0x3c>)
 8005e58:	460c      	mov	r4, r1
 8005e5a:	6831      	ldr	r1, [r6, #0]
 8005e5c:	4605      	mov	r5, r0
 8005e5e:	b911      	cbnz	r1, 8005e66 <sbrk_aligned+0x12>
 8005e60:	f000 f8bc 	bl	8005fdc <_sbrk_r>
 8005e64:	6030      	str	r0, [r6, #0]
 8005e66:	4621      	mov	r1, r4
 8005e68:	4628      	mov	r0, r5
 8005e6a:	f000 f8b7 	bl	8005fdc <_sbrk_r>
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	d00a      	beq.n	8005e88 <sbrk_aligned+0x34>
 8005e72:	1cc4      	adds	r4, r0, #3
 8005e74:	f024 0403 	bic.w	r4, r4, #3
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	d007      	beq.n	8005e8c <sbrk_aligned+0x38>
 8005e7c:	1a21      	subs	r1, r4, r0
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 f8ac 	bl	8005fdc <_sbrk_r>
 8005e84:	3001      	adds	r0, #1
 8005e86:	d101      	bne.n	8005e8c <sbrk_aligned+0x38>
 8005e88:	f04f 34ff 	mov.w	r4, #4294967295
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	20000158 	.word	0x20000158

08005e94 <_malloc_r>:
 8005e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e98:	1ccd      	adds	r5, r1, #3
 8005e9a:	f025 0503 	bic.w	r5, r5, #3
 8005e9e:	3508      	adds	r5, #8
 8005ea0:	2d0c      	cmp	r5, #12
 8005ea2:	bf38      	it	cc
 8005ea4:	250c      	movcc	r5, #12
 8005ea6:	2d00      	cmp	r5, #0
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	db01      	blt.n	8005eb0 <_malloc_r+0x1c>
 8005eac:	42a9      	cmp	r1, r5
 8005eae:	d905      	bls.n	8005ebc <_malloc_r+0x28>
 8005eb0:	230c      	movs	r3, #12
 8005eb2:	603b      	str	r3, [r7, #0]
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ebc:	4e2e      	ldr	r6, [pc, #184]	; (8005f78 <_malloc_r+0xe4>)
 8005ebe:	f000 f89d 	bl	8005ffc <__malloc_lock>
 8005ec2:	6833      	ldr	r3, [r6, #0]
 8005ec4:	461c      	mov	r4, r3
 8005ec6:	bb34      	cbnz	r4, 8005f16 <_malloc_r+0x82>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f7ff ffc2 	bl	8005e54 <sbrk_aligned>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	d14d      	bne.n	8005f72 <_malloc_r+0xde>
 8005ed6:	6834      	ldr	r4, [r6, #0]
 8005ed8:	4626      	mov	r6, r4
 8005eda:	2e00      	cmp	r6, #0
 8005edc:	d140      	bne.n	8005f60 <_malloc_r+0xcc>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	eb04 0803 	add.w	r8, r4, r3
 8005ee8:	f000 f878 	bl	8005fdc <_sbrk_r>
 8005eec:	4580      	cmp	r8, r0
 8005eee:	d13a      	bne.n	8005f66 <_malloc_r+0xd2>
 8005ef0:	6821      	ldr	r1, [r4, #0]
 8005ef2:	3503      	adds	r5, #3
 8005ef4:	1a6d      	subs	r5, r5, r1
 8005ef6:	f025 0503 	bic.w	r5, r5, #3
 8005efa:	3508      	adds	r5, #8
 8005efc:	2d0c      	cmp	r5, #12
 8005efe:	bf38      	it	cc
 8005f00:	250c      	movcc	r5, #12
 8005f02:	4629      	mov	r1, r5
 8005f04:	4638      	mov	r0, r7
 8005f06:	f7ff ffa5 	bl	8005e54 <sbrk_aligned>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d02b      	beq.n	8005f66 <_malloc_r+0xd2>
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	442b      	add	r3, r5
 8005f12:	6023      	str	r3, [r4, #0]
 8005f14:	e00e      	b.n	8005f34 <_malloc_r+0xa0>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	1b52      	subs	r2, r2, r5
 8005f1a:	d41e      	bmi.n	8005f5a <_malloc_r+0xc6>
 8005f1c:	2a0b      	cmp	r2, #11
 8005f1e:	d916      	bls.n	8005f4e <_malloc_r+0xba>
 8005f20:	1961      	adds	r1, r4, r5
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	6025      	str	r5, [r4, #0]
 8005f26:	bf18      	it	ne
 8005f28:	6059      	strne	r1, [r3, #4]
 8005f2a:	6863      	ldr	r3, [r4, #4]
 8005f2c:	bf08      	it	eq
 8005f2e:	6031      	streq	r1, [r6, #0]
 8005f30:	5162      	str	r2, [r4, r5]
 8005f32:	604b      	str	r3, [r1, #4]
 8005f34:	4638      	mov	r0, r7
 8005f36:	f104 060b 	add.w	r6, r4, #11
 8005f3a:	f000 f865 	bl	8006008 <__malloc_unlock>
 8005f3e:	f026 0607 	bic.w	r6, r6, #7
 8005f42:	1d23      	adds	r3, r4, #4
 8005f44:	1af2      	subs	r2, r6, r3
 8005f46:	d0b6      	beq.n	8005eb6 <_malloc_r+0x22>
 8005f48:	1b9b      	subs	r3, r3, r6
 8005f4a:	50a3      	str	r3, [r4, r2]
 8005f4c:	e7b3      	b.n	8005eb6 <_malloc_r+0x22>
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	42a3      	cmp	r3, r4
 8005f52:	bf0c      	ite	eq
 8005f54:	6032      	streq	r2, [r6, #0]
 8005f56:	605a      	strne	r2, [r3, #4]
 8005f58:	e7ec      	b.n	8005f34 <_malloc_r+0xa0>
 8005f5a:	4623      	mov	r3, r4
 8005f5c:	6864      	ldr	r4, [r4, #4]
 8005f5e:	e7b2      	b.n	8005ec6 <_malloc_r+0x32>
 8005f60:	4634      	mov	r4, r6
 8005f62:	6876      	ldr	r6, [r6, #4]
 8005f64:	e7b9      	b.n	8005eda <_malloc_r+0x46>
 8005f66:	230c      	movs	r3, #12
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	4638      	mov	r0, r7
 8005f6c:	f000 f84c 	bl	8006008 <__malloc_unlock>
 8005f70:	e7a1      	b.n	8005eb6 <_malloc_r+0x22>
 8005f72:	6025      	str	r5, [r4, #0]
 8005f74:	e7de      	b.n	8005f34 <_malloc_r+0xa0>
 8005f76:	bf00      	nop
 8005f78:	20000154 	.word	0x20000154

08005f7c <_realloc_r>:
 8005f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4680      	mov	r8, r0
 8005f82:	4614      	mov	r4, r2
 8005f84:	460e      	mov	r6, r1
 8005f86:	b921      	cbnz	r1, 8005f92 <_realloc_r+0x16>
 8005f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	f7ff bf81 	b.w	8005e94 <_malloc_r>
 8005f92:	b92a      	cbnz	r2, 8005fa0 <_realloc_r+0x24>
 8005f94:	f7ff ff12 	bl	8005dbc <_free_r>
 8005f98:	4625      	mov	r5, r4
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa0:	f000 f838 	bl	8006014 <_malloc_usable_size_r>
 8005fa4:	4284      	cmp	r4, r0
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	d802      	bhi.n	8005fb0 <_realloc_r+0x34>
 8005faa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fae:	d812      	bhi.n	8005fd6 <_realloc_r+0x5a>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	f7ff ff6e 	bl	8005e94 <_malloc_r>
 8005fb8:	4605      	mov	r5, r0
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	d0ed      	beq.n	8005f9a <_realloc_r+0x1e>
 8005fbe:	42bc      	cmp	r4, r7
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	bf28      	it	cs
 8005fc6:	463a      	movcs	r2, r7
 8005fc8:	f7ff fed0 	bl	8005d6c <memcpy>
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4640      	mov	r0, r8
 8005fd0:	f7ff fef4 	bl	8005dbc <_free_r>
 8005fd4:	e7e1      	b.n	8005f9a <_realloc_r+0x1e>
 8005fd6:	4635      	mov	r5, r6
 8005fd8:	e7df      	b.n	8005f9a <_realloc_r+0x1e>
	...

08005fdc <_sbrk_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4d06      	ldr	r5, [pc, #24]	; (8005ff8 <_sbrk_r+0x1c>)
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	f7fb f974 	bl	80012d4 <_sbrk>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_sbrk_r+0x1a>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_sbrk_r+0x1a>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	2000015c 	.word	0x2000015c

08005ffc <__malloc_lock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_lock+0x8>)
 8005ffe:	f000 b811 	b.w	8006024 <__retarget_lock_acquire_recursive>
 8006002:	bf00      	nop
 8006004:	20000160 	.word	0x20000160

08006008 <__malloc_unlock>:
 8006008:	4801      	ldr	r0, [pc, #4]	; (8006010 <__malloc_unlock+0x8>)
 800600a:	f000 b80c 	b.w	8006026 <__retarget_lock_release_recursive>
 800600e:	bf00      	nop
 8006010:	20000160 	.word	0x20000160

08006014 <_malloc_usable_size_r>:
 8006014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006018:	1f18      	subs	r0, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfbc      	itt	lt
 800601e:	580b      	ldrlt	r3, [r1, r0]
 8006020:	18c0      	addlt	r0, r0, r3
 8006022:	4770      	bx	lr

08006024 <__retarget_lock_acquire_recursive>:
 8006024:	4770      	bx	lr

08006026 <__retarget_lock_release_recursive>:
 8006026:	4770      	bx	lr

08006028 <_init>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr

08006034 <_fini>:
 8006034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006036:	bf00      	nop
 8006038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603a:	bc08      	pop	{r3}
 800603c:	469e      	mov	lr, r3
 800603e:	4770      	bx	lr
